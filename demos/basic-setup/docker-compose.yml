version: '3'
services:

  basicsetup-prod-instance-1:
    build: ./basic-app
    networks:
      - basicsetup
    environment: 
      - PORT=8080
      - ENV=prod
      - PG_HOST=postgres-prod
      - PG_PORT=5432
      - PG_USER=postgres
      - PG_PASSWORD=password
      - PG_DB=postgres
    expose:
      - 8080
    depends_on:
      - postgres-prod

  basicsetup-prod-instance-2:
    build: ./basic-app
    networks:
      - basicsetup
    environment: 
      - PORT=8080
      - ENV=prod
      - PG_HOST=postgres-prod
      - PG_PORT=5432
      - PG_USER=postgres
      - PG_PASSWORD=password
      - PG_DB=postgres
    expose:
      - 8080
    depends_on:
      - postgres-prod

  otoroshi-instance-1:
    image: maif/otoroshi:17.5.0-dev
    networks:
      - basicsetup
    environment:
      - APP_STORAGE=redis
      - REDIS_HOST=redis-master
      - PORT=8080
      - APP_IMPORT_FROM=/usr/app/otoroshi/imports/otoroshi-state.json
      - APP_DOMAIN=oto.tools
    volumes:
      - "./config:/usr/app/otoroshi/imports"
    expose:
      - 8080
    depends_on:
      - redis-slave

  otoroshi-instance-2:
    image: maif/otoroshi:17.5.0-dev
    networks:
      - basicsetup
    environment:
      - APP_STORAGE=redis
      - REDIS_HOST=redis-master
      - PORT=8080
      - APP_IMPORT_FROM=/usr/app/otoroshi/imports/otoroshi-state.json
      - APP_DOMAIN=oto.tools
    volumes:
      - "./config:/usr/app/otoroshi/imports"
    expose:
      - 8080
    depends_on:
      - redis-slave

  redis-master:
    image: redis:4.0.8
    expose:
      - 6379
    networks:
      - basicsetup
    command: redis-server --appendonly yes
    volumes:
      - ./data/otoroshi-master-data:/data

  redis-slave:
    image: redis:4.0.8
    expose:
      - 6379
    networks:
      - basicsetup
    command: redis-server --appendonly yes --slaveof redis-master 6379
    volumes:
      - ./data/otoroshi-slave-data:/data
    depends_on:
      - redis-master

  # https://github.com/DanielDent/docker-postgres-replication
  # https://docs.postgresql.fr/10/high-availability.html    

  postgres-prod:
    image: postgres:10.3
    expose:
      - 5432
    networks:
      - basicsetup
    environment: 
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    command: '-c listen_addresses=*'
    volumes:
      - ./data/prod-data:/var/lib/postgresql/data

  nginx-otoroshi:
    image: nginx
    expose:
      - 8080
    ports:
      - 8889:8080
    networks:
      - basicsetup
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - otoroshi-instance-1
      - otoroshi-instance-2

  kibana:
    image: docker.elastic.co/kibana/kibana:6.3.0
    environment:
      SERVER_NAME: kibana.oto.tools
      ELASTICSEARCH_URL: http://elastic:9200
    expose:
      - 5601
    networks:
      - basicsetup
    depends_on:
      - elastic

  elastic:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.3.0
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ./data/es-data:/usr/share/elasticsearch/data
    expose:
      - 9200
    networks:
      - basicsetup

networks:
  basicsetup:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.239.30/24
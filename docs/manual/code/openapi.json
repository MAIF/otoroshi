{
  "openapi" : "3.0.3",
  "info" : {
    "title" : "Otoroshi Admin API",
    "description" : "Admin API of the Otoroshi reverse proxy",
    "version" : "1.5.6",
    "contact" : {
      "name" : "Otoroshi Team",
      "email" : "oss@maif.fr"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs" : {
    "url" : "https://www.otoroshi.io",
    "description" : "everything about otoroshi"
  },
  "servers" : [ {
    "url" : "http://otoroshi-api.oto.tools:8080",
    "description" : "your local otoroshi server"
  } ],
  "tags" : [ {
    "name" : "admin-sessions",
    "description" : "All api endpoints about admin-session"
  }, {
    "name" : "admins",
    "description" : "All api endpoints about admins"
  }, {
    "name" : "analytics",
    "description" : "All api endpoints about analytics"
  }, {
    "name" : "apikeys",
    "description" : "All api endpoints about apikeys"
  }, {
    "name" : "apps-sessions",
    "description" : "All api endpoints about apps-sessions"
  }, {
    "name" : "auth-modules",
    "description" : "All api endpoints about auth-modules"
  }, {
    "name" : "certificates",
    "description" : "All api endpoints about certificates"
  }, {
    "name" : "cluster",
    "description" : "All api endpoints about cluster"
  }, {
    "name" : "data-exporters",
    "description" : "All api endpoints about data-exporters"
  }, {
    "name" : "events",
    "description" : "All api endpoints about events"
  }, {
    "name" : "experimental",
    "description" : "All experimental endpoints"
  }, {
    "name" : "globalconfig",
    "description" : "All api endpoints about globalconfig"
  }, {
    "name" : "groups",
    "description" : "All api endpoints about groups"
  }, {
    "name" : "import-export",
    "description" : "All api endpoints about import-export"
  }, {
    "name" : "jwt-verifiers",
    "description" : "All api endpoints about jwt-verifiers"
  }, {
    "name" : "lines",
    "description" : "All api endpoints about lines"
  }, {
    "name" : "live",
    "description" : "All api endpoints about live"
  }, {
    "name" : "organizations",
    "description" : "All api endpoints about organizations"
  }, {
    "name" : "pki",
    "description" : "All api endpoints about pki"
  }, {
    "name" : "privateapps",
    "description" : "All api endpoints about privateapps"
  }, {
    "name" : "scripts",
    "description" : "All api endpoints about scripts"
  }, {
    "name" : "services",
    "description" : "All api endpoints about services"
  }, {
    "name" : "snowmonkey",
    "description" : "All api endpoints about snowmonkey"
  }, {
    "name" : "tcp",
    "description" : "All api endpoints about tcp"
  }, {
    "name" : "teams",
    "description" : "All api endpoints about teams"
  }, {
    "name" : "templates",
    "description" : "All api endpoints about templates "
  } ],
  "paths" : {
    "/api/stats" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Statistic for a service, apikey or group",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.filterableStats",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/stats/global" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Global statistic for your services",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.globalStats",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/stats" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Statistics for a service",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceStats",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_template" : {
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Creates a new Script from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateScript",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_list" : {
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Search plugins based on type of plugin",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.findAllScriptsList",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ScriptsList"
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Register a webauthn admin user",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.registerWebAuthnAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Returns all webauthn admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.webAuthnAdmins",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/WebauthnAdminList"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{groupId}/status" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Statis for a group of services over time",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.groupStatus",
        "parameters" : [ {
          "name" : "groupId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the groupId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/{id}" : {
      "patch" : {
        "tags" : [ "teams" ],
        "summary" : "Updates (using json-patch) a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Team"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Find a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams" ],
        "summary" : "Deletes a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "teams" ],
        "summary" : "Updates a specific Team using its id",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Team"
              }
            }
          }
        }
      }
    },
    "/api/teams" : {
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "Creates a Team",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Team"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Find all possible Teams entities",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.Team"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/_bulk" : {
      "patch" : {
        "tags" : [ "teams" ],
        "summary" : "Update (using json-patch) multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "teams" ],
        "summary" : "Create multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "teams" ],
        "summary" : "Delete multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "teams" ],
        "summary" : "Update multiple Teams at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TeamsController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/targets" : {
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Update the target of the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.updateServiceTargets",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Target"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Target"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Adds a target to the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceAddTarget",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Target"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Target"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get targets of the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceTargets",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TargetsList"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Deletes a target to the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceDeleteTarget",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/forms" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Return all plugins config form spec",
        "operationId" : "otoroshi.next.controllers.NgPluginsController.forms",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/{id}" : {
      "patch" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Updates (using json-patch) a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Find a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Deletes a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Updates a specific AuthModuleConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
              }
            }
          }
        }
      }
    },
    "/api/experimental/routes/_form" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "The form description of the current controllers entity",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.form",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExperimentalFormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/cluster/members" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Get cluster members statistics",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.getClusterMembers",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "cluster" ],
        "summary" : "Clear cluster members from members statistics",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.clearClusterMembers",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/services/_form" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "The form description of the current controllers entity",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.form",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExperimentalFormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/targets/_template" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a new template for a target",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.initiateStoredNgTarget",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/_bulk" : {
      "patch" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Update (using json-patch) multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Create multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Delete multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Update multiple AuthModuleConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/plugins/categories" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Returns all possible plugins categories",
        "operationId" : "otoroshi.next.controllers.NgPluginsController.categories",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringList"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts" : {
      "post" : {
        "tags" : [ "scripts" ],
        "summary" : "Creates a otoroshi.script.Script",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.script.Script"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Find all possible otoroshi.script.Scripts entities",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.script.Script"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/privateapps/sessions/{id}/{username}" : {
      "post" : {
        "tags" : [ "privateapps" ],
        "summary" : "Registers a private app session",
        "operationId" : "otoroshi.controllers.PrivateAppsController.registerSession",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        }, {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/cluster/sessions/{id}" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to create a distributed private apps session between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.isSessionValid",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/_bulk" : {
      "patch" : {
        "tags" : [ "apikeys" ],
        "summary" : "Update (using json-patch) multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "apikeys" ],
        "summary" : "Create multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikeys" ],
        "summary" : "Delete multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "apikeys" ],
        "summary" : "Update multiple ApiKeys at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps-sessions/{id}" : {
      "delete" : {
        "tags" : [ "apps-sessions" ],
        "summary" : "Discard a specific private apps session",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardPrivateAppsSession",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/services" : {
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Creates a ServiceDescriptor",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Find all possible ServiceDescriptors entities",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants" : {
      "post" : {
        "tags" : [ "organizations" ],
        "summary" : "Creates a Tenant",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Tenant"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Find all possible Tenants entities",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/new/service" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new Service from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateService_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/config" : {
      "patch" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Updates (using json-patch) the snowmonkey configuration",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.patchSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchBody"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Get the snowmonkey config",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Updates the snowmonkey configuration",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.updateSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
              }
            }
          }
        }
      }
    },
    "/api/globalconfig/_template" : {
      "get" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Creates a new GlobalConfig from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateGlobalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/alert/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get all events of type AlertEvent",
        "operationId" : "otoroshi.controllers.adminapi.EventsController.alertEvents",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlertEventList"
                }
              }
            }
          }
        }
      }
    },
    "/api/lines/{line}/services" : {
      "get" : {
        "tags" : [ "lines" ],
        "summary" : "Get all service for a line of work",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.servicesForALine",
        "parameters" : [ {
          "name" : "line",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The line param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDescriptorList"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/backends/_bulk" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Update (using json-patch) multiple StoredNgBackends at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Create multiple StoredNgBackends at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Delete multiple StoredNgBackends at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Update multiple StoredNgBackends at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/services/{id}" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates (using json-patch) a specific NgService using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find a specific NgService using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Deletes a specific NgService using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates a specific NgService using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
              }
            }
          }
        }
      }
    },
    "/api/groups" : {
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Creates a ServiceGroup",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Find all possible ServiceGroups entities",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/plugins/steps" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Returns all possible plugins steps",
        "operationId" : "otoroshi.next.controllers.NgPluginsController.steps",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringList"
                }
              }
            }
          }
        }
      }
    },
    "/api/{entity}/_template" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_templates",
        "parameters" : [ {
          "name" : "entity",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the entity parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/experimental/targets/{id}" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates (using json-patch) a specific StoredNgTarget using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find a specific StoredNgTarget using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Deletes a specific StoredNgTarget using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates a specific StoredNgTarget using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
              }
            }
          }
        }
      }
    },
    "/api/pki/cas/{ca}/cas" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a sub-CA",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genSubCA",
        "parameters" : [ {
          "name" : "ca",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the ca parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/verifiers/{id}" : {
      "patch" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Updates (using json-patch) a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Find a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Deletes a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Updates a specific GlobalJwtVerifier using its id",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
              }
            }
          }
        }
      }
    },
    "/api/experimental/backends/_template" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Generates a new backend template",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.initiateStoredNgBackend",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin-sessions/{id}" : {
      "delete" : {
        "tags" : [ "admin-sessions" ],
        "summary" : "Discard a specific admin session (otoroshi-ui)",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardSession",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/tcp/_template" : {
      "get" : {
        "tags" : [ "tcp" ],
        "summary" : "Creates a new TcpService from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_tcp",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      }
    },
    "/api/status/global" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Global status of your services",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.globalStatus",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/_bulk" : {
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Update (using json-patch) multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Create multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Delete multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Update multiple ServiceDescriptors at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/outages" : {
      "get" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Get the current snowmonkey outages",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.getSnowMonkeyOutages",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OutagesList"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Reset the snowmonkey outages",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.resetSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs/_bulk" : {
      "patch" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Update (using json-patch) multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Create multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Delete multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Update multiple DataExporterConfigs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/services/_template" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a new template for a service",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.initiateService",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/_bulk" : {
      "patch" : {
        "tags" : [ "organizations" ],
        "summary" : "Update (using json-patch) multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "organizations" ],
        "summary" : "Create multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "organizations" ],
        "summary" : "Delete multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "organizations" ],
        "summary" : "Update multiple Tenants at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/_bundle" : {
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Import PEM bundle as otoroshi certificates",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.importBundle",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PemCertificateBody"
              }
            }
          }
        }
      }
    },
    "/api/cluster/state" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to get internal state from a leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.internalState",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/new/resources" : {
      "post" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new Resources from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateResources",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Unknown"
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_p12" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Import de .p12 file as client certificates",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.importCertFromP12",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ByteStreamBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/keys" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a keypair",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genKeyPair",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenKeyPairResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenKeyPairQuery"
              }
            }
          }
        }
      }
    },
    "/api/experimental/targets/_form" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "The form description of the current controllers entity",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.form",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExperimentalFormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/otoroshi.json" : {
      "post" : {
        "tags" : [ "import-export" ],
        "summary" : "Import the content of the otoroshi datastore (json)",
        "operationId" : "otoroshi.controllers.adminapi.ImportExportController.fullImport",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalConfigImportBody"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "import-export" ],
        "summary" : "Export all the content of the otoroshi datastore",
        "operationId" : "otoroshi.controllers.adminapi.ImportExportController.fullExport",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths" : {
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Creates a AuthModuleConfig",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Find all possible AuthModuleConfigs entities",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn/_template" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_webauthn",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new WebauthnAdmin from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateWebauthnAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}" : {
      "patch" : {
        "tags" : [ "groups" ],
        "summary" : "Updates (using json-patch) a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Find a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "groups" ],
        "summary" : "Deletes a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "groups" ],
        "summary" : "Updates a specific ServiceGroup using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
              }
            }
          }
        }
      }
    },
    "/api/tenants/{id}" : {
      "patch" : {
        "tags" : [ "organizations" ],
        "summary" : "Updates (using json-patch) a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Tenant"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Find a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "organizations" ],
        "summary" : "Deletes a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "organizations" ],
        "summary" : "Updates a specific Tenant using its id",
        "operationId" : "otoroshi.controllers.adminapi.TenantsController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.Tenant"
              }
            }
          }
        }
      }
    },
    "/api/live" : {
      "get" : {
        "tags" : [ "live" ],
        "summary" : "Get global live statis",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.globalLiveStats",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/backends/{id}" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates (using json-patch) a specific StoredNgBackend using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find a specific StoredNgBackend using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Deletes a specific StoredNgBackend using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates a specific StoredNgBackend using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
              }
            }
          }
        }
      }
    },
    "/api/experimental/routes/{id}" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates (using json-patch) a specific NgRoute using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find a specific NgRoute using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Deletes a specific NgRoute using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Updates a specific NgRoute using its id",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
              }
            }
          }
        }
      }
    },
    "/api/experimental/frontends/_form" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "The form description of the current controllers entity",
        "operationId" : "otoroshi.next.controllers.adminapi.NgFrontendsController.form",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExperimentalFormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn/{username}/{id}" : {
      "delete" : {
        "tags" : [ "admins" ],
        "summary" : "Deletes a webauthn admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.webAuthnDeleteAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        }, {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/routes" : {
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a NgRoute",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find all possible NgRoutes entities",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/import" : {
      "post" : {
        "tags" : [ "import-export" ],
        "summary" : "Import the content of the otoroshi datastore (file)",
        "operationId" : "otoroshi.controllers.adminapi.ImportExportController.fullImportFromFile",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/GlobalConfigImportBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/cas" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a self signed CA",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genSelfSignedCA",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/scripts/{id}" : {
      "patch" : {
        "tags" : [ "scripts" ],
        "summary" : "Updates (using json-patch) a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.script.Script"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "scripts" ],
        "summary" : "Find a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "scripts" ],
        "summary" : "Deletes a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "scripts" ],
        "summary" : "Updates a specific otoroshi.script.Script using its id",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.script.Script"
              }
            }
          }
        }
      }
    },
    "/api/events" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Events for a service, apikey or group",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.filterableEvents",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/certs" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a self signed certificates",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genSelfSignedCert",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/new/tcp/service" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new TcpService from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTcpService_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/{id}/register/finish" : {
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Finishes the registration of a user",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.finishRegistration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebAuthnRegistrationFinishBody"
              }
            }
          }
        }
      }
    },
    "/api/new/group" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new ServiceGroup from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/tcp/services/_template" : {
      "post" : {
        "tags" : [ "tcp" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_tcp",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/tcp/services/_bulk" : {
      "patch" : {
        "tags" : [ "tcp" ],
        "summary" : "Update (using json-patch) multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "tcp" ],
        "summary" : "Create multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tcp" ],
        "summary" : "Delete multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tcp" ],
        "summary" : "Update multiple TcpServices at the same time",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/_template" : {
      "get" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Creates a new AuthModule from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateAuthModule",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/tcp/services" : {
      "post" : {
        "tags" : [ "tcp" ],
        "summary" : "Creates a TcpService",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "tcp" ],
        "summary" : "Find all possible TcpServices entities",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/verifiers/_template" : {
      "get" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Creates a new JwtVerifier from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateJwtVerifier",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      }
    },
    "/api/globalconfig" : {
      "patch" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Update (with json-patch) the global config",
        "operationId" : "otoroshi.controllers.adminapi.GlobalConfigController.patchGlobalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchBody"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Get the global config",
        "operationId" : "otoroshi.controllers.adminapi.GlobalConfigController.globalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "globalconfig" ],
        "summary" : "Update the global config",
        "operationId" : "otoroshi.controllers.adminapi.GlobalConfigController.updateGlobalConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/response" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Response time statistics for a service",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceResponseTime",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/new/apikey" : {
      "get" : {
        "tags" : [ "templates" ],
        "summary" : "Creates a new ApiKey from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_templates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/{id}" : {
      "patch" : {
        "tags" : [ "apikeys" ],
        "summary" : "Updates (using json-patch) a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Find a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikeys" ],
        "summary" : "Deletes a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "apikeys" ],
        "summary" : "Updates a specific ApiKey using its id",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_data" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Extract data from a certificate",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.certificateData",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PemCertificateBody"
              }
            }
          }
        }
      }
    },
    "/api/cluster/quotas" : {
      "put" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to push quotas usage from a worker to a leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.updateQuotas",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateQuotasBody"
              }
            }
          }
        }
      }
    },
    "/api/admins/webauthn/{username}" : {
      "put" : {
        "tags" : [ "admins" ],
        "summary" : "Updates a webauthn admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.updateWebAuthnAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
              }
            }
          }
        }
      }
    },
    "/api/groups/_bulk" : {
      "patch" : {
        "tags" : [ "groups" ],
        "summary" : "Update (using json-patch) multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "groups" ],
        "summary" : "Create multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "groups" ],
        "summary" : "Delete multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "groups" ],
        "summary" : "Update multiple ServiceGroups at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/backends/_form" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "The form description of the current controllers entity",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.form",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ExperimentalFormResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/services" : {
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a NgService",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find all possible NgServices entities",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/live" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get live stats for a specific service",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.serviceLiveStats_services",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/services/_bulk" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Update (using json-patch) multiple NgServices at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Create multiple NgServices at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Delete multiple NgServices at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Update multiple NgServices at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_bulk" : {
      "patch" : {
        "tags" : [ "scripts" ],
        "summary" : "Update (using json-patch) multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "scripts" ],
        "summary" : "Create multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "scripts" ],
        "summary" : "Delete multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "scripts" ],
        "summary" : "Update multiple otoroshi.script.Scripts at the same time",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.script.Script"
                }
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs/{id}" : {
      "patch" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Updates (using json-patch) a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Find a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Deletes a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Updates a specific DataExporterConfig using its id",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
              }
            }
          }
        }
      }
    },
    "/api/pki/csrs" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a CSR",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genCsr",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/groups/_template" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Creates a new ServiceGroup from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateServiceGroup_groups",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
                }
              }
            }
          }
        }
      }
    },
    "/api/verifiers" : {
      "post" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Creates a GlobalJwtVerifier",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Find all possible GlobalJwtVerifiers entities",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/simple/{username}" : {
      "delete" : {
        "tags" : [ "admins" ],
        "summary" : "Deletes an admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.deleteAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "admins" ],
        "summary" : "Updates an admin",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.updateAdmin",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs" : {
      "post" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Creates a DataExporterConfig",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Find all possible DataExporterConfigs entities",
        "operationId" : "otoroshi.controllers.adminapi.DataExporterConfigController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/data-exporter-configs/_template" : {
      "get" : {
        "tags" : [ "data-exporters" ],
        "summary" : "Creates a new DataExporterConfig from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateDataExporterConfig",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/routes/_template" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a new template for a route",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.initiateRoute",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        }
      }
    },
    "/api/teams/_template" : {
      "get" : {
        "tags" : [ "teams" ],
        "summary" : "Creates a new Team from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTeam",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Team"
                }
              }
            }
          }
        }
      }
    },
    "/api/admin-sessions" : {
      "get" : {
        "tags" : [ "admin-sessions" ],
        "summary" : "Returns all admin sessions",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.sessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.BackOfficeUser"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "admin-sessions" ],
        "summary" : "Discard all admin sessions (otoroshi-ui)",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardAllSessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/admins/simple/_template" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new Template from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.createFromTemplate_simple",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Creates a new SimpleAdmin from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateSimpleAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/{id}" : {
      "patch" : {
        "tags" : [ "certificates" ],
        "summary" : "Updates (using json-patch) a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "certificates" ],
        "summary" : "Find a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "certificates" ],
        "summary" : "Deletes a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "certificates" ],
        "summary" : "Updates a specific Cert using its id",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      }
    },
    "/api/cluster/user-tokens/{id}" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to get a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.getUserToken",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/_start" : {
      "post" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Start the snowmonkey of all otoroshi instances",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.startSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/experimental/plugins/all" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Return all plugins descriptions",
        "operationId" : "otoroshi.next.controllers.NgPluginsController.plugins",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/events/_template" : {
      "get" : {
        "tags" : [ "analytics" ],
        "summary" : "Returns a template that extract possible fields out of a Gateway event",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.templateSpec",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{id}" : {
      "patch" : {
        "tags" : [ "services" ],
        "summary" : "Updates (using json-patch) a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Find a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Deletes a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Updates a specific ServiceDescriptor using its id",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
              }
            }
          }
        }
      }
    },
    "/api/apikeys" : {
      "post" : {
        "tags" : [ "apikeys" ],
        "summary" : "Creates a ApiKey",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Find all possible ApiKeys entities",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/cas/{ca}/certs" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a certificate",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genCert",
        "parameters" : [ {
          "name" : "ca",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the ca parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/events" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Events for a service",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceEvents",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/_template" : {
      "get" : {
        "tags" : [ "certificates" ],
        "summary" : "Creates a new Certificate from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateCertificate",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      }
    },
    "/api/audit/events" : {
      "get" : {
        "tags" : [ "events" ],
        "summary" : "Get all events of type AuditEvent",
        "operationId" : "otoroshi.controllers.adminapi.EventsController.auditEvents",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AuditEventList"
                }
              }
            }
          }
        }
      }
    },
    "/api/snowmonkey/_stop" : {
      "post" : {
        "tags" : [ "snowmonkey" ],
        "summary" : "Stop the snowmonkey of all otoroshi instances",
        "operationId" : "otoroshi.controllers.adminapi.SnowMonkeyController.stopSnowMonkey",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/experimental/forms/_single" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Return a plugin config form spec",
        "operationId" : "otoroshi.next.controllers.NgPluginsController.form",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/_bulk" : {
      "patch" : {
        "tags" : [ "certificates" ],
        "summary" : "Update (using json-patch) multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Create multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "certificates" ],
        "summary" : "Delete multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "certificates" ],
        "summary" : "Update multiple Certs at the same time",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        }
      }
    },
    "/api/tenants/_template" : {
      "get" : {
        "tags" : [ "organizations" ],
        "summary" : "Creates a new Tenant from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateTenant",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.Tenant"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/health" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get healthcheck status for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceHealth",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HealthCheckEventList"
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/canary" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get members of a canary campaign",
        "operationId" : "otoroshi.controllers.adminapi.CanaryController.serviceCanaryMembers",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Reset members of a canary campaign",
        "operationId" : "otoroshi.controllers.adminapi.CanaryController.resetServiceCanaryMembers",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/live/host" : {
      "get" : {
        "tags" : [ "live" ],
        "summary" : "Get local host metrics",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.hostMetrics",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HostMetrics"
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_valid" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Check if a certificate is valid (based on its own data)",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.certificateIsValid",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertValidResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      }
    },
    "/api/cluster/live" : {
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to get cluster statistics",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.liveCluster",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates" : {
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Creates a Cert",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "certificates" ],
        "summary" : "Find all possible Certs entities",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/{id}/quotas" : {
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Consumed quotas for a specific apikey",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.apiKeyQuotas",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.RemainingQuotas"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apikeys" ],
        "summary" : "Reset quotas consumption for an apikey",
        "operationId" : "otoroshi.controllers.adminapi.ApiKeysController.resetApiKeyQuotas",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.RemainingQuotas"
                }
              }
            }
          }
        }
      }
    },
    "/api/cluster/user-tokens" : {
      "post" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to set a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.setUserToken",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UserTokenBody"
              }
            }
          }
        }
      }
    },
    "/api/pki/certs/_letencrypt" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Generates a certificates using Let's Encrypt or any ACME compatible system",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.genLetsEncryptCert",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LetsEncryptCertBody"
              }
            }
          }
        }
      }
    },
    "/api/live/{id}" : {
      "get" : {
        "tags" : [ "live" ],
        "summary" : "Get live stats for a specific service",
        "operationId" : "otoroshi.controllers.adminapi.StatsController.serviceLiveStats_live",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LiveStats"
                }
              }
            }
          }
        }
      }
    },
    "/api/verifiers/_bulk" : {
      "patch" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Update (using json-patch) multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Create multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Delete multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "jwt-verifiers" ],
        "summary" : "Update multiple GlobalJwtVerifiers at the same time",
        "operationId" : "otoroshi.controllers.adminapi.JwtVerifierController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
                }
              }
            }
          }
        }
      }
    },
    "/api/lines" : {
      "get" : {
        "tags" : [ "lines" ],
        "summary" : "Get all lines of work (prod, preprod, etc)",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.allLines",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/StringList"
                }
              }
            }
          }
        }
      }
    },
    "/api/apps-sessions" : {
      "get" : {
        "tags" : [ "apps-sessions" ],
        "summary" : "Return all private apps sessions",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.privateAppsSessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "apps-sessions" ],
        "summary" : "Discard all private apps sessions",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.discardAllPrivateAppsSessions",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      }
    },
    "/api/apikeys/_template" : {
      "get" : {
        "tags" : [ "apikeys" ],
        "summary" : "Creates a new ApiKey from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateApiKey_apikeys",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/backends" : {
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a StoredNgBackend",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find all possible StoredNgBackends entities",
        "operationId" : "otoroshi.next.controllers.adminapi.NgBackendsController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/routes/_bulk" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Update (using json-patch) multiple NgRoutes at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Create multiple NgRoutes at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Delete multiple NgRoutes at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Update multiple NgRoutes at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
                }
              }
            }
          }
        }
      }
    },
    "/api/groups/{id}/services" : {
      "get" : {
        "tags" : [ "groups" ],
        "summary" : "Get the services from a service group",
        "operationId" : "otoroshi.controllers.adminapi.ServiceGroupController.serviceGroupServices",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ServiceDescriptorList"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/targets" : {
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Creates a StoredNgTarget",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.createAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Find all possible StoredNgTargets entities",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.findAllEntitiesAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/template" : {
      "post" : {
        "tags" : [ "services" ],
        "summary" : "Creates an error template for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.createServiceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Get the error template for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.serviceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorTemplateList"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "services" ],
        "summary" : "Deletes the error template for the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.deleteServiceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Done"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "services" ],
        "summary" : "Update the error template of the current service",
        "operationId" : "otoroshi.controllers.adminapi.ServicesController.updateServiceTemplate",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The serviceId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
              }
            }
          }
        }
      }
    },
    "/api/status" : {
      "post" : {
        "tags" : [ "analytics" ],
        "summary" : "Status for some/all services over time",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.servicesStatus",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceDescriptorList"
              }
            }
          }
        }
      }
    },
    "/api/privateapps/sessions/send/{id}/{username}" : {
      "post" : {
        "tags" : [ "privateapps" ],
        "summary" : "Send an email to a user to update its own settings",
        "operationId" : "otoroshi.controllers.PrivateAppsController.sendSelfUpdateLink",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        }, {
          "name" : "username",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the username parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Empty"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/admins/simple" : {
      "post" : {
        "tags" : [ "admins" ],
        "summary" : "Register an admin user",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.registerSimpleAdmin",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "admins" ],
        "summary" : "Returns all admins",
        "operationId" : "otoroshi.controllers.adminapi.UsersController.simpleAdmins",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimpleAdminList"
                }
              }
            }
          }
        }
      }
    },
    "/api/auths/{id}/register/start" : {
      "post" : {
        "tags" : [ "auth-modules" ],
        "summary" : "Stats the registration of a user",
        "operationId" : "otoroshi.controllers.adminapi.AuthModulesController.startRegistration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/WebAuthnRegistrationStartBody"
              }
            }
          }
        }
      }
    },
    "/api/services/{serviceId}/status" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Status of a service over time",
        "operationId" : "otoroshi.controllers.adminapi.AnalyticsController.serviceStatus",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the serviceId parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/experimental/services/_openapi" : {
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Generates a service based on an openapi spec.",
        "operationId" : "otoroshi.next.controllers.adminapi.NgServicesController.fromOpenapi",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/ServiceFromOpenApiBody"
              }
            }
          }
        }
      }
    },
    "/api/experimental/targets/_bulk" : {
      "patch" : {
        "tags" : [ "experimental" ],
        "summary" : "Update (using json-patch) multiple StoredNgTargets at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.bulkPatchAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPatchBody"
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "experimental" ],
        "summary" : "Create multiple StoredNgTargets at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.bulkCreateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "experimental" ],
        "summary" : "Delete multiple StoredNgTargets at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.bulkDeleteAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "experimental" ],
        "summary" : "Update multiple StoredNgTargets at the same time",
        "operationId" : "otoroshi.next.controllers.adminapi.NgTargetsController.bulkUpdateAction",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BulkResponseBody"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
                }
              }
            }
          }
        }
      }
    },
    "/api/scripts/_compile" : {
      "post" : {
        "tags" : [ "scripts" ],
        "summary" : "Trigger script compilation of the server",
        "operationId" : "otoroshi.controllers.adminapi.ScriptApiController.compileScript",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Any"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/CodeBody"
              }
            }
          }
        }
      }
    },
    "/api/experimental/certificates/_by_domain" : {
      "get" : {
        "tags" : [ "experimental" ],
        "summary" : "Experimental payload",
        "operationId" : "otoroshi.next.controllers.adminapi.NgRoutesController.domainsAndCertificates",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Unknown"
                }
              }
            }
          }
        }
      }
    },
    "/api/pki/cas/{ca}/certs/_sign" : {
      "post" : {
        "tags" : [ "pki" ],
        "summary" : "Sign a certificate based on a CSR",
        "operationId" : "otoroshi.controllers.adminapi.PkiController.signCert",
        "parameters" : [ {
          "name" : "ca",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the ca parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.SignCertResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PemCsrBody"
              }
            }
          }
        }
      }
    },
    "/api/cluster/login-tokens/{id}" : {
      "post" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to create a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.createLoginToken",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to check a distributed login token between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.isLoginTokenValid",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "the id parameter"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TokenResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/certificates/{certId}/_renew" : {
      "post" : {
        "tags" : [ "certificates" ],
        "summary" : "Renew a certificates with the same attributes as the original one",
        "operationId" : "otoroshi.controllers.adminapi.CertificatesController.renewCert",
        "parameters" : [ {
          "name" : "certId",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The certId param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/Empty"
              }
            }
          }
        }
      }
    },
    "/api/tcp/services/{id}" : {
      "patch" : {
        "tags" : [ "tcp" ],
        "summary" : "Updates (using json-patch) a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.patchEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
              }
            }
          }
        }
      },
      "get" : {
        "tags" : [ "tcp" ],
        "summary" : "Find a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.findEntityByIdAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "tcp" ],
        "summary" : "Deletes a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.deleteEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "tcp" ],
        "summary" : "Updates a specific TcpService using its id",
        "operationId" : "otoroshi.controllers.adminapi.TcpServiceApiController.updateEntityAction",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "schema" : {
            "type" : "string"
          },
          "required" : true,
          "description" : "The id param of the target entity"
        } ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/x-ndjson" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body in nd-json format (1 stringified entity per line)",
          "required" : true,
          "content" : {
            "application/x-ndjson" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
              }
            }
          }
        }
      }
    },
    "/api/services/_template" : {
      "get" : {
        "tags" : [ "services" ],
        "summary" : "Creates a new Service from a template",
        "operationId" : "otoroshi.controllers.adminapi.TemplatesController.initiateService_services",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
                }
              }
            }
          }
        }
      }
    },
    "/api/cluster/sessions" : {
      "post" : {
        "tags" : [ "cluster" ],
        "summary" : "Api to create a distributed private apps session between worker and leader",
        "operationId" : "otoroshi.controllers.adminapi.ClusterController.createSession",
        "parameters" : [ ],
        "security" : [ {
          "otoroshi_auth" : [ ]
        } ],
        "responses" : {
          "401" : {
            "description" : "You have to provide an Api Key. Api Key can be passed with 'Otoroshi-Client-Id' and 'Otoroshi-Client-Secret' headers, or use basic http authentication",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad resource format. Take another look to the swagger, or open an issue",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Resource not found or does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Successful operation",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
                }
              }
            }
          }
        },
        "requestBody" : {
          "description" : "the request body",
          "required" : true,
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "otoroshi.models.ElasticAnalyticsConfig" : {
        "description" : "Settings for connection to an elastic cluster",
        "type" : "object",
        "properties" : {
          "clusterUri" : {
            "description" : "Cluster URL",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Additionnal headers in the http request"
          },
          "password" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Elastic password"
          },
          "indexSettings" : {
            "description" : "Indexation settings",
            "$ref" : "#/components/schemas/otoroshi.models.IndexSettings"
          },
          "mtlsConfig" : {
            "description" : "TLS settings for the http client",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "index" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Index name"
          },
          "type" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Object type",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "applyTemplate" : {
            "description" : "Enable template creation/update",
            "type" : "boolean"
          },
          "version" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Version of Elasticsearch"
          },
          "user" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Elasticsearch user"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesIngressControllerJob" : {
        "description" : "Plugin to sync kubernetes ingresses with otoroshi",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgRouteDataStore" : {
        "description" : "The datastore for routes",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.CorsSettings" : {
        "description" : "Settings for CORS support",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether or not cors is enabled",
            "type" : "boolean"
          },
          "allowCredentials" : {
            "description" : "Allow to pass credentials",
            "type" : "boolean"
          },
          "maxAge" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "number"
            } ],
            "description" : "Cors max age"
          },
          "allowMethods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors allowed methods"
          },
          "allowHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors allowed headers"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors excluded patterns"
          },
          "exposeHeaders" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The cors exposed header"
          },
          "allowOrigin" : {
            "description" : "The cors allowed origin",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.apikeys.BiscuitConf" : {
        "description" : "Configuration for the biscuit plugin",
        "type" : "object",
        "properties" : {
          "privkey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Biscuit private key"
          },
          "checks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit checks"
          },
          "facts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit facts"
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit rules"
          }
        }
      },
      "otoroshi.models.LargeResponseFaultConfig" : {
        "description" : "Settings for a large response fault (chaos engineering)",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "additionalResponseSize" : {
            "format" : "int32",
            "description" : "Add n 0 bytes",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.MappingSettings" : {
        "description" : "Settings to transform a jwt token",
        "type" : "object",
        "properties" : {
          "map" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Change values"
          },
          "values" : {
            "description" : "Add values",
            "type" : "object"
          },
          "remove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove some token claims"
          }
        }
      },
      "otoroshi.next.models.NgContextualPlugins" : {
        "description" : "The plugins that will be triggered for the current request",
        "type" : "object",
        "properties" : {
          "_env" : {
            "description" : "The current env",
            "$ref" : "#/components/schemas/otoroshi.env.Env"
          },
          "next_plugins_merge" : {
            "description" : "Try to merge synchronous and contiguous plugins",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesEntity" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.ApikeyQuotas" : {
        "description" : "Plugin to apply quotas en apikeys",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.core.apikeys.JwtApikeyExtractor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.GzipResponseCompressor" : {
        "description" : "Plugin for gzip compression",
        "type" : "object",
        "properties" : {
          "compression_level" : {
            "format" : "int32",
            "description" : "The compression level (1 to 9)",
            "type" : "integer"
          },
          "buffer_size" : {
            "format" : "int32",
            "description" : "Compressor buffer size",
            "type" : "integer"
          },
          "chunked_threshold" : {
            "format" : "int32",
            "description" : "Chunk size",
            "type" : "integer"
          },
          "excluded_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The excluded path patterns"
          },
          "white_list" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed mimetypes list"
          },
          "black_list" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Blocked mimetypes list"
          }
        }
      },
      "otoroshi.models.VerificationSettings" : {
        "description" : "jwt token verification settings",
        "type" : "object",
        "properties" : {
          "fields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields validation"
          },
          "arrayFields" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Fields array validation"
          }
        }
      },
      "otoroshi.next.models.NgMinimalRoute" : {
        "description" : "A route representation with it's minimal attributes",
        "type" : "object",
        "properties" : {
          "frontend" : {
            "description" : "The frontend of the route",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgFrontend"
          },
          "backend" : {
            "description" : "The backend of the route",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgMinimalBackend"
          },
          "backend_ref" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The backend id of the route (if one)"
          }
        }
      },
      "otoroshi.next.plugins.NgLatencyInjectionFaultConfig" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of requests impacted",
            "type" : "number"
          },
          "from" : {
            "description" : "Lower bound of latency injection",
            "type" : "number"
          },
          "to" : {
            "description" : "Upper bound of latency injection",
            "type" : "number"
          }
        }
      },
      "otoroshi.next.plugins.JwtVerification" : {
        "description" : "Plugin to verify jwt token",
        "type" : "object",
        "properties" : {
          "verifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of verifiers id"
          }
        }
      },
      "otoroshi.plugins.log4j.Log4jExpressionText" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "value" : {
            "description" : "A parsed text for log4jshell evaluation",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.NgGzipConfig" : {
        "description" : "Configuration for Gzip",
        "type" : "object",
        "properties" : {
          "compression_level" : {
            "format" : "int32",
            "description" : "The compression level (1 to 9)",
            "type" : "integer"
          },
          "buffer_size" : {
            "format" : "int32",
            "description" : "Compressor buffer size",
            "type" : "integer"
          },
          "chunked_threshold" : {
            "format" : "int32",
            "description" : "Chunk size",
            "type" : "integer"
          },
          "excluded_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The excluded path patterns"
          },
          "white_list" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed mimetypes list"
          },
          "black_list" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Blocked mimetypes list"
          }
        }
      },
      "otoroshi.next.plugins.W3CTracingConfigKind" : {
        "description" : "Configuration for W3CTracing",
        "type" : "string",
        "enum" : [ "jaeger", "zipkin", "logger", "noop" ]
      },
      "otoroshi.next.plugins.JQConfig" : {
        "description" : "Configuration for JQ",
        "type" : "object",
        "properties" : {
          "request" : {
            "description" : "JQ filter for request",
            "type" : "string"
          },
          "response" : {
            "description" : "JQ filter for response",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.TeamId" : {
        "type" : "string",
        "description" : "team id"
      },
      "otoroshi.next.plugins.NgAllowedMethodsConfig" : {
        "description" : "Configuration for AllowHttpMethods",
        "type" : "object",
        "properties" : {
          "allowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of allowed methods"
          },
          "forbidden" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of forbidden methods"
          }
        }
      },
      "WebauthnAdminList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
        }
      },
      "otoroshi.models.RegionMatch" : {
        "description" : "Match a target if in the same region",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "region" : {
            "description" : "Region name",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.Cors" : {
        "description" : "Plugin to use cors",
        "type" : "object",
        "properties" : {
          "allow_credentials" : {
            "description" : "Allowed credentials",
            "type" : "boolean"
          },
          "max_age" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "number"
            } ],
            "description" : "cors max age"
          },
          "allow_origin" : {
            "description" : "Allowed cors origins",
            "type" : "string"
          },
          "allow_methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed cors methods"
          },
          "excluded_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Paths without cors"
          },
          "allow_headers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed cors headers"
          },
          "expose_headers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exposed cors headers"
          }
        }
      },
      "ErrorTemplateList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.ErrorTemplate"
        }
      },
      "otoroshi.next.plugins.PublicPrivatePaths" : {
        "description" : "Plugin to define public and private paths",
        "type" : "object",
        "properties" : {
          "strict" : {
            "description" : "apikey only",
            "type" : "boolean"
          },
          "public_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Paths that should not have user or apikey to pass"
          },
          "private_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Paths that should have user or apikey to pass"
          }
        }
      },
      "otoroshi.auth.GroupRights" : {
        "description" : "User rights associated with a group",
        "type" : "object",
        "properties" : {
          "userRights" : {
            "description" : "The user rights associated with this group",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The users associated with this group"
          }
        }
      },
      "otoroshi.plugins.quotas.ServiceQuotasConfig" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Calls quota per second",
            "type" : "integer"
          },
          "dailyQuota" : {
            "format" : "int64",
            "description" : "Daily calls quota",
            "type" : "integer"
          },
          "monthlyQuota" : {
            "format" : "int64",
            "description" : "Monthly calls quota",
            "type" : "integer"
          }
        }
      },
      "otoroshi.next.plugins.ApikeyCalls" : {
        "description" : "Plugin to use apikeys",
        "type" : "object",
        "properties" : {
          "extractors" : {
            "description" : "Configuration of the apikey extraction modes",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyExtractors"
          },
          "pass_with_user" : {
            "description" : "Let the request pass if a user is connected",
            "type" : "boolean"
          },
          "wipe_backend_request" : {
            "description" : "Removes the apikeys from the request to not forward it to the backend",
            "type" : "boolean"
          },
          "validate" : {
            "description" : "Enabled quotas validation",
            "type" : "boolean"
          },
          "routing" : {
            "description" : "Use apikey for routing",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyMatcher"
          }
        }
      },
      "otoroshi.script.AccessContext" : {
        "description" : "Context for AccessValidation plugins",
        "type" : "object",
        "properties" : {
          "attrs" : {
            "description" : "The current request attributes",
            "$ref" : "#/components/schemas/otoroshi.utils.TypedMap"
          },
          "config" : {
            "description" : "The current plugin config.",
            "type" : "object"
          },
          "descriptor" : {
            "description" : "The current service descriptor",
            "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
          },
          "index" : {
            "format" : "int32",
            "description" : "The current plugin index",
            "type" : "integer"
          },
          "globalConfig" : {
            "description" : "The current global config",
            "type" : "object"
          },
          "apikey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
            } ],
            "description" : "The current apikey"
          },
          "snowflake" : {
            "description" : "The current request snowflake",
            "type" : "string"
          },
          "user" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.PrivateAppsUser"
            } ],
            "description" : "The current user"
          }
        }
      },
      "otoroshi.next.plugins.JQResponseConfig" : {
        "description" : "Configuration for JQResponse",
        "type" : "object",
        "properties" : {
          "filter" : {
            "description" : "JQ filter for response",
            "type" : "string"
          }
        }
      },
      "otoroshi.utils.http.MtlsConfig" : {
        "description" : "TLS settings for the http client",
        "type" : "object",
        "properties" : {
          "mtls" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trustAll" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trustedCerts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "otoroshi.plugins.geoloc.IpStackGeolocationInfoExtractor" : {
        "description" : "Plugin that extracts geolocation based on ipstack",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.metrics.PrometheusServiceMetrics" : {
        "description" : "Plugin to collect service metrics",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesClient" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "config" : {
            "description" : "The current client config.",
            "$ref" : "#/components/schemas/otoroshi.plugins.jobs.kubernetes.KubernetesConfig"
          },
          "env" : {
            "description" : "The current env",
            "$ref" : "#/components/schemas/otoroshi.env.Env"
          }
        }
      },
      "otoroshi.models.RefJwtVerifier" : {
        "description" : "Reference to a jwt verifier",
        "type" : "object",
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifier excluded paths"
          },
          "ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifiers ids"
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global", "local", "ref" ]
          },
          "enabled" : {
            "description" : "Verifier enabled",
            "type" : "boolean"
          }
        }
      },
      "TokenResponse" : {
        "type" : "object",
        "description" : "User login token response",
        "properties" : {
          "valid" : {
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.AuthModule" : {
        "description" : "Plugin to use auth. modules",
        "type" : "object",
        "properties" : {
          "module" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Id of the auth. module"
          },
          "pass_with_apikey" : {
            "description" : "let the request pass if an apikey is present",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.clientcert.HasClientCertValidator" : {
        "description" : "Plugin that validates client certificates",
        "type" : "object",
        "properties" : { }
      },
      "ScriptsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.script.Script"
        }
      },
      "otoroshi.models.WeightedBestResponseTime" : {
        "description" : "Loadbalancing policy that route to best response time targets with a weight",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "Weight ratio",
            "type" : "number"
          }
        }
      },
      "otoroshi.next.plugins.AdditionalHeadersIn" : {
        "description" : "Plugin that add headers on a request",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The headers added to the request"
          }
        }
      },
      "LetsEncryptCertBody" : {
        "type" : "object",
        "description" : "PEM encoded certificate"
      },
      "otoroshi.script.PreRoutingContext" : {
        "description" : "Context for preroutes plugins",
        "type" : "object",
        "properties" : {
          "globalConfig" : {
            "description" : "The current global config",
            "type" : "object"
          },
          "snowflake" : {
            "description" : "The current request snowflake",
            "type" : "string"
          },
          "descriptor" : {
            "description" : "The current service descriptor",
            "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
          },
          "config" : {
            "description" : "The current plugin config.",
            "type" : "object"
          },
          "index" : {
            "format" : "int32",
            "description" : "The current plugin index",
            "type" : "integer"
          },
          "attrs" : {
            "description" : "The current request attributes",
            "$ref" : "#/components/schemas/otoroshi.utils.TypedMap"
          }
        }
      },
      "otoroshi.next.plugins.IpAddressAllowedList" : {
        "description" : "Plugin to allow only some ip addresses",
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of allowed ip addresses of cidr blocks"
          }
        }
      },
      "otoroshi.plugins.apikeys.ApikeyAuthModule" : {
        "description" : "Plugin that authenticate a website based on apikeys",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.CustomTimeouts" : {
        "description" : "Settings for custom timeouts for a specific path",
        "type" : "object",
        "properties" : {
          "path" : {
            "description" : "path on which this configuration works",
            "type" : "string"
          },
          "callAndStreamTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "callTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "idleTimeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "globalTimeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "connectionTimeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.BasicAuthConstraints" : {
        "description" : "Settings to extract apikey from a basic auth header like",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "headerName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to get client_id:client_secret base64 encoded"
          },
          "queryName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Query param name to get client_id:client_secret base64 encoded"
          }
        }
      },
      "otoroshi.models.Transform" : {
        "description" : "jwt token transformation policy settings",
        "type" : "object",
        "properties" : {
          "transformSettings" : {
            "description" : "Transformation settings",
            "$ref" : "#/components/schemas/otoroshi.models.TransformSettings"
          },
          "algoSettings" : {
            "description" : "Algorithm settings for re-signing token",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          }
        }
      },
      "otoroshi.models.KidAlgoSettings" : {
        "description" : "Settings to find keypair based on header kid for verification",
        "type" : "object",
        "properties" : {
          "onlyExposedCerts" : {
            "description" : "Use only exposed certs",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.plugins.loggers.ResponseBodyEvent" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "status" : {
            "format" : "int32",
            "description" : "The response status",
            "type" : "integer"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The response headers"
          },
          "url" : {
            "description" : "The request url",
            "type" : "string"
          },
          "reqId" : {
            "description" : "The request id",
            "type" : "string"
          },
          "from" : {
            "description" : "The incoming request ip address",
            "type" : "string"
          },
          "ua" : {
            "description" : "The user agent",
            "type" : "string"
          },
          "method" : {
            "description" : "The request method",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.AlwaysMatch" : {
        "type" : "object",
        "description" : "Always select target",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Always" ]
          }
        }
      },
      "otoroshi.next.plugins.MockResponses" : {
        "description" : "Plugin to mock responses",
        "type" : "object",
        "properties" : {
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.MockResponse"
            },
            "description" : "Possible responses"
          },
          "pass_through" : {
            "description" : "Pass the call if no mocked response found",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.TenantId" : {
        "type" : "string",
        "description" : "organization id"
      },
      "otoroshi.auth.SAMLCanocalizationMethod" : {
        "description" : "Canonicalization Method for XML Signatures",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgTreeRouter_Test" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "Done" : {
        "type" : "object",
        "description" : "operation is done",
        "properties" : {
          "done" : {
            "type" : "boolean"
          }
        }
      },
      "UserTokenBody" : {
        "type" : "object",
        "properties" : {
          "token" : {
            "type" : "string"
          }
        }
      },
      "otoroshi.utils.mailer.MailgunSettings" : {
        "description" : "Settings for the mailgun mailer",
        "type" : "object",
        "properties" : {
          "eu" : {
            "description" : "European tenant",
            "type" : "boolean"
          },
          "apiKey" : {
            "description" : "Mailgun apikey",
            "type" : "string"
          },
          "domain" : {
            "description" : "Mailgun domain",
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.models.FileSettings" : {
        "description" : "Settings for a file data exporter",
        "type" : "object",
        "properties" : {
          "path" : {
            "description" : "File path",
            "type" : "string"
          },
          "maxFileSize" : {
            "format" : "int32",
            "description" : "Max file size in bytes",
            "type" : "integer"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "otoroshi.plugins.workflow.WorkflowEndpoint" : {
        "description" : "Experimental plugin",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.InfraProviderMatch" : {
        "description" : "Match a target if in the same infrastructure",
        "type" : "object",
        "properties" : {
          "provider" : {
            "description" : "provider name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "otoroshi.models.Exporter" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.events.KafkaConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.events.PulsarConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ConsoleSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
        }, {
          "$ref" : "#/components/schemas/Null"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ExporterRef"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.FileSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.MetricsSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.Webhook"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
        } ]
      },
      "otoroshi.plugins.discovery.SelfRegistrationConfig" : {
        "description" : "Configuration for the DiscoverySelfRegistrationTransformer plugin",
        "type" : "object",
        "properties" : {
          "registrationTtl" : {
            "description" : "the ttl for a service registration",
            "type" : "number"
          },
          "targetTemplate" : {
            "description" : "A json template for otoroshi target",
            "type" : "object"
          },
          "hosts" : {
            "description" : "The possible list of hosts for a service",
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "otoroshi.next.models.NgMatchedRoutes" : {
        "description" : "A set of matched routes in the new router",
        "type" : "object",
        "properties" : {
          "routes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
            },
            "description" : "Current matched route"
          },
          "path" : {
            "description" : "Current matched path",
            "type" : "string"
          },
          "no_more_segments" : {
            "description" : "Is the path fully matched",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.JsonToXmlResponse" : {
        "description" : "Plugin to transform json body to xml",
        "type" : "object",
        "properties" : {
          "filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter for response"
          }
        }
      },
      "otoroshi.auth.LdapAuthModuleConfig" : {
        "description" : "Authentication module that works with LDAP",
        "type" : "object",
        "properties" : {
          "groupFilters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.GroupFilter"
            },
            "description" : "LDAP group filters"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata of the module"
          },
          "allowEmptyPassword" : {
            "description" : "Allow empty password access",
            "type" : "boolean"
          },
          "basicAuth" : {
            "description" : "Use standard basic auth or web login form",
            "type" : "boolean"
          },
          "searchBase" : {
            "description" : "LDAP search base",
            "type" : "string"
          },
          "nameField" : {
            "description" : "Field name to get name from user profile",
            "type" : "string"
          },
          "emailField" : {
            "description" : "Field name to get email from user profile",
            "type" : "string"
          },
          "extractProfileFilterNot" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exclude LDAP properties matching"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "metadataField" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Field name to get metadata from user profile"
          },
          "rightsOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRights"
            },
            "description" : "Overrides user rights. Object with email as key"
          },
          "groupRights" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.auth.GroupRights"
            },
            "description" : "Rights associated with groups"
          },
          "id" : {
            "description" : "Unique id of the config",
            "type" : "string"
          },
          "extraMetadata" : {
            "description" : "Add metadata to user. Object with email as key",
            "type" : "object"
          },
          "searchFilter" : {
            "description" : "Filter for users",
            "type" : "string"
          },
          "adminPassword" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The admin password"
          },
          "extractProfileFilter" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Only include LDAP properties matching"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "dataOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Overiddes user data. Object with email as key"
          },
          "superAdmins" : {
            "description" : "This module produces only super admins",
            "type" : "boolean"
          },
          "userBase" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "LDAP user base DN"
          },
          "serverUrls" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "LDAP server list of url"
          },
          "userValidators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.UserValidator"
            },
            "description" : "Validators that will check if the current user is authorized after successful login"
          },
          "_loc" : {
            "description" : "Location of the module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "Max age of the session",
            "type" : "integer"
          },
          "adminUsername" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The admin username"
          },
          "extractProfile" : {
            "description" : "Extract profile from LDAP profile",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the config",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the config",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.Keys" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.QuotasAlmostExceededSettings" : {
        "description" : "Settings for apikey quotas alerts",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is quotas alert enabled",
            "type" : "boolean"
          },
          "dailyQuotasThreshold" : {
            "format" : "double",
            "description" : "The daily quotas threshold before generating alert",
            "type" : "number"
          },
          "monthlyQuotasThreshold" : {
            "format" : "double",
            "description" : "The monthly quotas threshold before generating alert",
            "type" : "number"
          }
        }
      },
      "otoroshi.next.plugins.JQResponse" : {
        "description" : "Plugin to transform body with JQ filters",
        "type" : "object",
        "properties" : {
          "filter" : {
            "description" : "JQ filter for response",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.Team" : {
        "description" : "An otoroshi model for a team of users in the organization (otoroshi-ui)",
        "type" : "object",
        "properties" : {
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "tenant" : {
            "description" : "Entity organization",
            "$ref" : "#/components/schemas/otoroshi.models.TenantId"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "id" : {
            "description" : "Entity id",
            "$ref" : "#/components/schemas/otoroshi.models.TeamId"
          }
        }
      },
      "otoroshi.models.ChaosConfig" : {
        "description" : "Settings to enable chaos engineering for a service",
        "type" : "object",
        "properties" : {
          "badResponsesFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.BadResponsesFaultConfig"
            } ],
            "description" : "Settings for bad responses"
          },
          "largeRequestFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.LargeRequestFaultConfig"
            } ],
            "description" : "Settings for large requests"
          },
          "largeResponseFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.LargeResponseFaultConfig"
            } ],
            "description" : "Settings for large responses"
          },
          "latencyInjectionFaultConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.LatencyInjectionFaultConfig"
            } ],
            "description" : "Settings for latency injection"
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.events.HealthCheckEvent" : {
        "description" : "Events generated by health checks",
        "type" : "object",
        "properties" : {
          "error" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Error if any"
          },
          "health" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Health status"
          },
          "logicCheck" : {
            "description" : "Did the service respond with the logic check",
            "type" : "boolean"
          },
          "status" : {
            "format" : "int32",
            "description" : "Check status",
            "type" : "integer"
          },
          "url" : {
            "description" : "Checked url",
            "type" : "string"
          },
          "duration" : {
            "format" : "int64",
            "description" : "Duration of the call",
            "type" : "integer"
          }
        }
      },
      "otoroshi.plugins.authcallers.OAuth2Kind" : {
        "description" : "The kind of oauth2 flow",
        "type" : "string",
        "enum" : [ "client_credentials", "password" ]
      },
      "otoroshi.models.SecComVersion" : {
        "type" : "string",
        "enum" : [ "V1", "v2" ],
        "description" : "Version of the challenge token"
      },
      "otoroshi.plugins.authcallers.OAuth2Caller" : {
        "description" : "Plugin that can call an oauth2 client_credentials flow or password flow backend",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.TransformSettings" : {
        "description" : "jwt token transformation settings",
        "type" : "object",
        "properties" : {
          "location" : {
            "description" : "Location of the token",
            "$ref" : "#/components/schemas/otoroshi.models.JwtTokenLocation"
          },
          "mappingSettings" : {
            "description" : "Token mapping settings",
            "$ref" : "#/components/schemas/otoroshi.models.MappingSettings"
          }
        }
      },
      "ServiceDescriptorList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
        }
      },
      "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute" : {
        "description" : "Configuration for IzanamiCanary",
        "type" : "object",
        "properties" : {
          "variants" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The possible variant"
          },
          "wildcard" : {
            "description" : "Wildcard match",
            "type" : "boolean"
          },
          "default" : {
            "description" : "The default variant",
            "type" : "string"
          },
          "regex" : {
            "description" : "Regex match",
            "type" : "boolean"
          },
          "exact" : {
            "description" : "Exact match",
            "type" : "boolean"
          },
          "route" : {
            "description" : "The route path",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.ApiKey" : {
        "description" : "An otoroshi apikey that can allow you to access some services",
        "type" : "object",
        "properties" : {
          "dailyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per day",
            "type" : "integer"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Bunch of metadata for the key"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second, measured on 10 seconds",
            "type" : "integer"
          },
          "constrainedServicesOnly" : {
            "description" : "This apikey can only be used on services that constrained their apikey routing",
            "type" : "boolean"
          },
          "allowClientIdOnly" : {
            "description" : "This apikey can be used juste with the client_id value",
            "type" : "boolean"
          },
          "_loc" : {
            "description" : "The location of the apikey",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "restrictions" : {
            "description" : "Apikey restrictions settings",
            "$ref" : "#/components/schemas/otoroshi.models.Restrictions"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Apikey tags"
          },
          "enabled" : {
            "description" : "Whether or not the key is enabled. If disabled, resources won't be available to calls using this key",
            "type" : "boolean"
          },
          "readOnly" : {
            "description" : "The apikey only allow access for GET, HEAD and OPTIONS verbs",
            "type" : "boolean"
          },
          "clientSecret" : {
            "description" : "The secret of the Api Key. Usually 64 random alpha numerical characters, but can be anything",
            "type" : "string"
          },
          "validUntil" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "number"
            } ],
            "description" : "Date until when the apikey is valid"
          },
          "clientName" : {
            "description" : "The name of the api key, for humans ;-)",
            "type" : "string"
          },
          "monthlyQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per month",
            "type" : "integer"
          },
          "description" : {
            "description" : "Description of this apikey",
            "type" : "string"
          },
          "rotation" : {
            "description" : "Apikey rotation settings",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKeyRotation"
          },
          "authorizedEntities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.EntityIdentifier"
            },
            "description" : "The group/service ids (prefixed by group_ or service_ on which the key is authorized"
          },
          "clientId" : {
            "description" : "The unique id of the Api Key. Usually 16 random alpha numerical characters, but can be anything",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.oidc.OIDCAccessTokenValidator" : {
        "description" : "Plugin to validate OIDC token ",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.UserRight" : {
        "description" : "Represent a user right (teams, organizations) in otoroshi-ui",
        "type" : "object",
        "properties" : {
          "tenant" : {
            "description" : "Access rights on organizations",
            "$ref" : "#/components/schemas/otoroshi.models.TenantAccess"
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.TeamAccess"
            },
            "description" : "Access rights on teams"
          }
        }
      },
      "otoroshi.models.InHeader" : {
        "description" : "JWT token location (header)",
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Header name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          },
          "remove" : {
            "description" : "Remove from value",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.GenericOauth2ModuleConfig" : {
        "description" : "Authentication module that works with OAuth2/OIDC",
        "type" : "object",
        "properties" : {
          "refreshTokens" : {
            "description" : "Refresh token support",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata of the module"
          },
          "tokenUrl" : {
            "description" : "OAuth token URL",
            "type" : "string"
          },
          "otoroshiRightsField" : {
            "description" : "Field in user profile to find otoroshi UI rights",
            "type" : "string"
          },
          "mtlsConfig" : {
            "description" : "TLS config. for the module (for server accessed endpoints like tokenUrl, introspectionUrl, etc)",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "nameField" : {
            "description" : "Field name to get name from user profile",
            "type" : "string"
          },
          "emailField" : {
            "description" : "Field name to get email from user profile",
            "type" : "string"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "introspectionUrl" : {
            "description" : "URL to introspect access_token",
            "type" : "string"
          },
          "loginUrl" : {
            "description" : "OAuth login URL",
            "type" : "string"
          },
          "scope" : {
            "description" : "The scope of the token",
            "type" : "string"
          },
          "rightsOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRights"
            },
            "description" : "Overrides user rights. Object with email as key"
          },
          "callbackUrl" : {
            "description" : "Otoroshi callback URL",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "OAuth Client secret",
            "type" : "string"
          },
          "id" : {
            "description" : "Unique id of the config",
            "type" : "string"
          },
          "extraMetadata" : {
            "description" : "Add metadata to user. Object with email as key",
            "type" : "object"
          },
          "accessTokenField" : {
            "description" : "Field name to get access token",
            "type" : "string"
          },
          "userInfoUrl" : {
            "description" : "OAuth userinfo to get user profile",
            "type" : "string"
          },
          "clientId" : {
            "description" : "OAuth Client id",
            "type" : "string"
          },
          "useCookie" : {
            "description" : "Use cookies for redirection",
            "type" : "boolean"
          },
          "authorizeUrl" : {
            "description" : "OAuth authorize URL",
            "type" : "string"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "dataOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Overiddes user data. Object with email as key"
          },
          "superAdmins" : {
            "description" : "This module produces only super admins",
            "type" : "boolean"
          },
          "apiKeyMetaField" : {
            "description" : "Field name to extract apikey metadata",
            "type" : "string"
          },
          "useJson" : {
            "description" : "Use JSON or URL Form Encoded as payload with the OAuth provider",
            "type" : "boolean"
          },
          "pkce" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.auth.PKCEConfig"
            } ],
            "description" : "Use PKCE challenge (OAuth 2.1)"
          },
          "apiKeyTagsField" : {
            "description" : "Field name to extract apikey tags",
            "type" : "string"
          },
          "otoroshiDataField" : {
            "description" : "Field name to get otoroshi metadata from. You can specify sub fields using | as separator",
            "type" : "string"
          },
          "userValidators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.UserValidator"
            },
            "description" : "Validators that will check if the current user is authorized after successful login"
          },
          "_loc" : {
            "description" : "Location of the module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "jwtVerifier" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
            } ],
            "description" : "Algo. settings to verify JWT token"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "max age for the session cookie in seconds",
            "type" : "integer"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy configuration for the module's http client"
          },
          "logoutUrl" : {
            "description" : "OAuth logout URL",
            "type" : "string"
          },
          "oidConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "URL of the OIDC config. file"
          },
          "noWildcardRedirectURI" : {
            "description" : "Manage redirection without query params for exact string comparison (OAuth 2.1)",
            "type" : "boolean"
          },
          "readProfileFromToken" : {
            "description" : "The user profile will be read from the JWT token in id_token",
            "type" : "boolean"
          },
          "name" : {
            "description" : "Name of the config",
            "type" : "string"
          },
          "claims" : {
            "description" : "The claims of the token",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the config",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.quotas.InstanceQuotas" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "ServiceFromOpenApiBody" : {
        "type" : "object",
        "description" : "Properties to create a service from an openapi spec",
        "properties" : {
          "domain" : {
            "type" : "string",
            "description" : "the domain on which the service will be exposed by otoroshi"
          },
          "openapi" : {
            "type" : "string",
            "description" : "the url to an openapi 3 spec or the content of an openapi 3 spec"
          }
        }
      },
      "otoroshi.next.plugins.JQRequest" : {
        "description" : "Plugin to transform body with JQ filters",
        "type" : "object",
        "properties" : {
          "filter" : {
            "description" : "JQ filter for request",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.GlobalJwtVerifier" : {
        "description" : "Otoroshi model for JWT token verifier",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "algoSettings" : {
            "description" : "Algo settings of the verifier",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "name" : {
            "description" : "Verifier name",
            "type" : "string"
          },
          "source" : {
            "description" : "Where to find the jwt token",
            "$ref" : "#/components/schemas/otoroshi.models.JwtTokenLocation"
          },
          "id" : {
            "description" : "Verifier id",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global" ]
          },
          "strict" : {
            "description" : "Does it fail if JWT not found",
            "type" : "boolean"
          },
          "strategy" : {
            "description" : "The strategy of the verifier",
            "$ref" : "#/components/schemas/otoroshi.models.VerifierStrategy"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "desc" : {
            "description" : "Verifier description",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.models.ConsoleSettings" : {
        "description" : "Data exporter that will log everything to the console",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "otoroshi.models.TenantAccess" : {
        "description" : "Access rights for organizations",
        "type" : "object",
        "properties" : {
          "canWrite" : {
            "description" : "Can this access right write data",
            "type" : "boolean"
          },
          "value" : {
            "description" : "Access pattern",
            "type" : "string"
          },
          "canRead" : {
            "description" : "Can this access right read data",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.discovery.DiscoverySelfRegistrationTransformer" : {
        "description" : "Plugin that add services discovery to otoroshi",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.TargetPredicate" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.AlwaysMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.DataCenterMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.GeolocationMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.InfraProviderMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.NetworkLocationMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RackMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RegionMatch"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ZoneMatch"
        } ]
      },
      "otoroshi.models.IpStackGeolocationSettings" : {
        "description" : "Settings for connection to IpStack",
        "type" : "object",
        "properties" : {
          "apikey" : {
            "description" : "IpStack apikey",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of geolocation",
            "type" : "string",
            "enum" : [ "none", "maxmind", "ipstack" ]
          },
          "enabled" : {
            "description" : "enable ipstack geolocation",
            "type" : "boolean"
          },
          "timeout" : {
            "format" : "int64",
            "description" : "API call timeout",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.DefaultTemplates" : {
        "description" : "The template that will be merged with newly created entities",
        "type" : "object",
        "properties" : {
          "team" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the team entities"
          },
          "script" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the script entities"
          },
          "apikey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the apikey entities"
          },
          "group" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the group entities"
          },
          "tcpService" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the tcpService entities"
          },
          "verifier" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the verifier entities"
          },
          "service" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the service entities"
          },
          "target" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the target entities"
          },
          "certificate" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the certificate entities"
          },
          "dataExporter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the dataExporter entities"
          },
          "route" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the route entities"
          },
          "backend" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the backend entities"
          },
          "template" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the template entities"
          },
          "tenant" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the tenant entities"
          },
          "authConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the authConfig entities"
          },
          "descriptor" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "the template for the descriptor entities"
          }
        }
      },
      "otoroshi.auth.SAMLSignature" : {
        "description" : "Algorithm and canocalization method used to sign SAML documents",
        "type" : "object",
        "properties" : {
          "algorithm" : {
            "description" : "Algorithm to sign documents or assertions",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLSignatureAlgorithm"
          },
          "canocalizationMethod" : {
            "description" : "Canonicalization Method for XML Signatures",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLCanocalizationMethod"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesAdmissionWebhookCRDValidator" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "UpdateQuotasBody" : {
        "type" : "string",
        "description" : ""
      },
      "otoroshi.next.plugins.MissingHeadersIn" : {
        "description" : "Plugin to add headers to a request",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers added to the request if missing"
          }
        }
      },
      "otoroshi.plugins.clientcert.HasClientCertMatchingHttpValidator" : {
        "description" : "Plugin that validates client certificates",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.ClientSupport" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "client" : {
            "description" : "The actual kubernetes client",
            "$ref" : "#/components/schemas/otoroshi.plugins.jobs.kubernetes.KubernetesClient"
          },
          "env" : {
            "description" : "The current env",
            "$ref" : "#/components/schemas/otoroshi.env.Env"
          }
        }
      },
      "otoroshi.plugins.core.DefaultPlugins" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.DataExporterConfigFiltering" : {
        "description" : "Settings to match otoroshi events",
        "type" : "object",
        "properties" : {
          "include" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            },
            "description" : "Exclude the events matching one of those filters"
          },
          "exclude" : {
            "type" : "array",
            "items" : {
              "type" : "object"
            },
            "description" : "Include the events matching one of those filters"
          }
        }
      },
      "PluginDescription" : {
        "type" : "object",
        "description" : "Description of a plugin",
        "properties" : {
          "id" : {
            "type" : "string",
            "description" : "the id of the plugin"
          },
          "name" : {
            "type" : "string",
            "description" : "the name of the plugin"
          },
          "description" : {
            "type" : "string",
            "description" : "the description of the plugin"
          },
          "default_config" : {
            "type" : "string",
            "description" : "the default config of the plugin (for UI form)"
          },
          "config_schema" : {
            "type" : "string",
            "description" : "the config schema of the plugin (for UI form)"
          },
          "config_flow" : {
            "type" : "array",
            "description" : "the config flow of the plugin (for UI form)",
            "items" : {
              "type" : "string"
            }
          },
          "plugin_visibility" : {
            "type" : "string",
            "description" : "visibility of the plugin (can be internal or userland)"
          },
          "plugin_categories" : {
            "type" : "array",
            "description" : "categories of the plugin",
            "items" : {
              "$ref" : "#/components/schemas/StringList"
            }
          },
          "plugin_steps" : {
            "type" : "array",
            "description" : "steps of the plugin",
            "items" : {
              "$ref" : "#/components/schemas/StringList"
            }
          },
          "plugin_tags" : {
            "type" : "array",
            "description" : "tags of the plugin",
            "items" : {
              "$ref" : "#/components/schemas/StringList"
            }
          }
        }
      },
      "otoroshi.plugins.static.StaticResponse" : {
        "description" : "Plugin that serves static responses",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.apikeys.CertificateAsApikey" : {
        "description" : "Plugin to use a certificate as an apikey",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfigMode" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.ServiceGroup" : {
        "description" : "The otoroshi model for a group of services",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.auth.OAuth1Provider" : {
        "description" : "Method used to get request and access token",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.XmlToJsonRequest" : {
        "description" : "Plugin to transform xml body into json",
        "type" : "object",
        "properties" : {
          "filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter to transform request body"
          }
        }
      },
      "otoroshi.plugins.discovery.DiscoveryHelper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.ssl.pki.models.GenCsrQuery" : {
        "description" : "Settings for generating a certificate",
        "type" : "object",
        "properties" : {
          "client" : {
            "description" : "Is cert client ?",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificate SANs"
          },
          "key" : {
            "description" : "Keypair specs",
            "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenKeyPairQuery"
          },
          "includeAIA" : {
            "description" : "Include AIA extension (if generated from otoroshi CA)",
            "type" : "boolean"
          },
          "signatureAlg" : {
            "description" : "Signature algorithm",
            "type" : "string"
          },
          "existingSerialNumber" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "integer",
              "format" : "int64"
            } ],
            "description" : ""
          },
          "duration" : {
            "description" : "Certificate lifespan",
            "type" : "number"
          },
          "digestAlg" : {
            "description" : "Digest algo",
            "type" : "string"
          },
          "ca" : {
            "description" : "Is cert ca ?",
            "type" : "boolean"
          },
          "name" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Certificate name"
          },
          "subject" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Certificate subject"
          }
        }
      },
      "otoroshi.next.plugins.NgApikeyMatcher" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "none_meta_keys_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata keys being present"
          },
          "all_meta_keys_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on all metadata keys being present"
          },
          "all_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on all metadata being present"
          },
          "none_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata being present"
          },
          "one_tag_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on one tag being present"
          },
          "enabled" : {
            "description" : "Tags and metadata matching enabled",
            "type" : "boolean"
          },
          "one_meta_in" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Matching on none metadata being present"
          },
          "all_tags_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on all tags being present"
          },
          "one_meta_key_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on one metadata being present"
          },
          "none_tag_in" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching on none tags being present"
          }
        }
      },
      "otoroshi.plugins.apikeys.HasAllowedApiKeyValidator" : {
        "description" : "Plugin that validates apikey",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.NetworkLocationMatch" : {
        "description" : "Match a target if in the same network location",
        "type" : "object",
        "properties" : {
          "rack" : {
            "description" : "Rack name",
            "type" : "string"
          },
          "provider" : {
            "description" : "Provider name",
            "type" : "string"
          },
          "dataCenter" : {
            "description" : "Datacenter name",
            "type" : "string"
          },
          "zone" : {
            "description" : "Zone name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "region" : {
            "description" : "Region name",
            "type" : "string"
          }
        }
      },
      "otoroshi.script.PluginType" : {
        "type" : "string",
        "enum" : [ "app", "transformer", "validator", "preroute", "sink", "listener", "job", "exporter" ],
        "description" : "Plugin kind"
      },
      "otoroshi.utils.mailer.ConsoleMailerSettings" : {
        "description" : "Settings for the console mailer",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.plugins.oauth1.OAuth1CallerPlugin" : {
        "description" : "Plugin to call OAuth1 protected backends",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.XmlToJsonResponse" : {
        "description" : "Plugin to transform xml body into json",
        "type" : "object",
        "properties" : {
          "filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter to transform response body"
          }
        }
      },
      "otoroshi.models.DataExporterConfigType" : {
        "type" : "string",
        "enum" : [ "kafka", "pulsar", "elastic", "webhook", "file", "mailer", "custom", "none", "console", "metrics" ],
        "description" : "Type of data exporter"
      },
      "otoroshi.plugins.jobs.kubernetes.FailedCrdParsing" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "crd" : {
            "description" : "The failed crd",
            "type" : "object"
          },
          "namespace" : {
            "description" : "The namespace of the error",
            "type" : "string"
          },
          "pluralName" : {
            "description" : "The plural name of the resources",
            "type" : "string"
          },
          "error" : {
            "description" : "The actual error",
            "type" : "string"
          },
          "customizedSpec" : {
            "description" : "The spec to customize",
            "type" : "object"
          }
        }
      },
      "otoroshi.script.Script" : {
        "description" : "An otoroshi plugins stored as scala code in the otoroshi datastore",
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "The name of the script",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "desc" : {
            "description" : "The description of the script",
            "type" : "string"
          },
          "code" : {
            "description" : "The code of the script",
            "type" : "string"
          },
          "id" : {
            "description" : "The id of the script",
            "type" : "string"
          },
          "type" : {
            "description" : "Plugin type",
            "$ref" : "#/components/schemas/otoroshi.script.PluginType"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesToOtoroshiCertSyncJob" : {
        "description" : "Plugin to sync otoroshi certificates with kubernetes",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.clientcert.SubIss" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "sn" : {
            "description" : "The serial number of the current issuer",
            "type" : "string"
          },
          "subject" : {
            "description" : "The subject DN",
            "$ref" : "#/components/schemas/otoroshi.utils.http.DN"
          },
          "issuer" : {
            "description" : "The issuer DN",
            "$ref" : "#/components/schemas/otoroshi.utils.http.DN"
          }
        }
      },
      "otoroshi.utils.mailer.MailjetSettings" : {
        "description" : "Settings for the mailjet mailer",
        "type" : "object",
        "properties" : {
          "apiKeyPrivate" : {
            "description" : "Private key",
            "type" : "string"
          },
          "apiKeyPublic" : {
            "description" : "Public key",
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "play.api.libs.ws.WSProxyServer" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The hostname of the proxy server."
          },
          "port" : {
            "type" : "string",
            "description" : "The port of the proxy server."
          },
          "protocol" : {
            "type" : "string",
            "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
          },
          "principal" : {
            "type" : "string",
            "description" : "The principal (aka username) of the credentials for the proxy server."
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the credentials for the proxy server."
          },
          "ntlmDomain" : {
            "type" : "string",
            "description" : "The ntlm domain for the proxy server."
          },
          "encoding" : {
            "type" : "string",
            "description" : "The realm's charset."
          },
          "nonProxyHosts" : {
            "type" : "string",
            "description" : "The non proxied hosts"
          }
        },
        "description" : "Proxy server"
      },
      "otoroshi.next.plugins.GlobalPerIpAddressThrottlingQuotas" : {
        "description" : "Plugin for ip address quotas",
        "type" : "object",
        "properties" : {
          "within" : {
            "description" : "Is it within the quotas",
            "type" : "boolean"
          },
          "sec_calls" : {
            "format" : "int64",
            "description" : "Number of calls per second",
            "type" : "integer"
          }
        }
      },
      "otoroshi.plugins.loggers.BodyLoggerConfig" : {
        "description" : "Configuration for BodyLogger",
        "type" : "object",
        "properties" : {
          "json" : {
            "description" : "The current config",
            "type" : "object"
          }
        }
      },
      "otoroshi.models.ServiceDescriptorIdentifier" : {
        "type" : "string",
        "description" : "the id of a service prefixed by 'service_'"
      },
      "otoroshi.models.SecComHeaders" : {
        "description" : "Header names for the otoroshi exchange protocol",
        "type" : "object",
        "properties" : {
          "claimRequestName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name where the info token will be"
          },
          "stateRequestName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name where the validation token will be"
          },
          "stateResponseName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name where the validation token respondewill be"
          }
        }
      },
      "otoroshi.auth.SAMLCredentials" : {
        "description" : "Used to sign, encrypt assertions and sign SAML documents",
        "type" : "object",
        "properties" : {
          "signingKey" : {
            "description" : "Pair of configuration used to sign documents",
            "$ref" : "#/components/schemas/otoroshi.auth.Credential"
          },
          "encryptionKey" : {
            "description" : "Pair of configuration used to encrypt assertions",
            "$ref" : "#/components/schemas/otoroshi.auth.Credential"
          },
          "signedDocuments" : {
            "description" : "Indicates if SAML documents have to be sign before sending to identity provider",
            "type" : "boolean"
          },
          "encryptedAssertions" : {
            "description" : "Indicates if assertions have to be encrypt before sending to identity provider",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.models.StoredNgTarget" : {
        "description" : "A target that can be stored in the otoroshi datastore",
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "The name of the target",
            "type" : "string"
          },
          "_loc" : {
            "description" : "The location of the target",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the target"
          },
          "description" : {
            "description" : "The description of the target",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The tags of the target"
          },
          "id" : {
            "description" : "The id of the target",
            "type" : "string"
          },
          "target" : {
            "description" : "The actual target",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgTarget"
          }
        }
      },
      "otoroshi.next.plugins.NgApikeyExtractorCustomHeaders" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          },
          "client_id_header_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to extract client id"
          },
          "client_secret_header_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to extract client secret"
          }
        }
      },
      "otoroshi.tcp.TlsMode" : {
        "type" : "string",
        "enum" : [ "Disabled", "Enabled", "PassThrough" ],
        "description" : "TLS mode"
      },
      "otoroshi.models.ESKPAlgoSettings" : {
        "description" : "Settings to use elliptic curve signing algorithm from a certificate keypair",
        "type" : "object",
        "properties" : {
          "size" : {
            "format" : "int32",
            "description" : "Size of the key",
            "type" : "integer"
          },
          "certId" : {
            "description" : "Certificate id to use the keypair",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.plugins.users.HasAllowedUsersValidator" : {
        "description" : "Plugin that validates current user",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgTreeRouter" : {
        "description" : "A very efficient router with a tree structure",
        "type" : "object",
        "properties" : { }
      },
      "AuditEventList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.events.AuditEvent"
        }
      },
      "otoroshi.next.plugins.NgCorsSettings" : {
        "description" : "Configuration for Cors",
        "type" : "object",
        "properties" : {
          "allow_credentials" : {
            "description" : "Allowed credentials",
            "type" : "boolean"
          },
          "max_age" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "number"
            } ],
            "description" : "cors max age"
          },
          "allow_origin" : {
            "description" : "Allowed cors origins",
            "type" : "string"
          },
          "allow_methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed cors methods"
          },
          "excluded_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Paths without cors"
          },
          "allow_headers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed cors headers"
          },
          "expose_headers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exposed cors headers"
          }
        }
      },
      "otoroshi.models.ServiceDescriptor" : {
        "description" : "The otoroshi model for a service (handles routing)",
        "type" : "object",
        "properties" : {
          "buildMode" : {
            "description" : "Display a construction page when a user try to use the service",
            "type" : "boolean"
          },
          "hosts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possible hosts for the service"
          },
          "privateApp" : {
            "description" : "When enabled, user will be allowed to use the service (UI) only if they are registered users of the private apps domain",
            "type" : "boolean"
          },
          "localScheme" : {
            "description" : "The scheme used localy, mainly http",
            "type" : "string"
          },
          "authConfigRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "A reference to a global auth module config"
          },
          "issueCertCA" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "CA for cert issuance"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of your service. Only for debug and human readability purposes",
            "type" : "string"
          },
          "additionalHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client request. Useful to add authentication"
          },
          "domain" : {
            "description" : "The domain on which the service is available.",
            "type" : "string"
          },
          "clientConfig" : {
            "description" : "Http client settings",
            "$ref" : "#/components/schemas/otoroshi.models.ClientConfig"
          },
          "matchingRoot" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The root path on which the service is available"
          },
          "forceHttps" : {
            "description" : "Will force redirection to https:// if not present",
            "type" : "boolean"
          },
          "localHost" : {
            "description" : "The host used localy, mainly localhost:xxxx",
            "type" : "string"
          },
          "sendOtoroshiHeadersBack" : {
            "description" : "When enabled, Otoroshi will send headers to consumer like request id, client latency, overhead, etc ...",
            "type" : "boolean"
          },
          "healthCheck" : {
            "description" : "Healthcheck settings",
            "$ref" : "#/components/schemas/otoroshi.models.HealthCheck"
          },
          "strictlyPrivate" : {
            "description" : "When strictly private, private app session will not pass apikey filters",
            "type" : "boolean"
          },
          "detectApiKeySooner" : {
            "description" : "Detect if an apikey is present but do not fail if not",
            "type" : "boolean"
          },
          "allowHttp10" : {
            "description" : "Allow HTTP/1.0 requests",
            "type" : "boolean"
          },
          "subdomain" : {
            "description" : "The subdomain on which the service is available",
            "type" : "string"
          },
          "paths" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Matching paths on request"
          },
          "stripPath" : {
            "description" : "Strip matching path in the forwarded request path",
            "type" : "boolean"
          },
          "secComAlgoChallengeOtoToBack" : {
            "description" : "Algorithm to sign challenge token to the backend",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "apiKeyConstraints" : {
            "description" : "Routing and extraction constraints for the apikeyh",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKeyConstraints"
          },
          "env" : {
            "description" : "The line on which the service is available. Based on that value, the name of the line will be appended to the subdomain. For line prod, nothing will be appended. For example, if the subdomain is 'foo' and line is 'preprod', then the exposed service will be available at 'foo.preprod.mydomain'",
            "type" : "string"
          },
          "xForwardedHeaders" : {
            "description" : "Send X-Forwarded-* headers",
            "type" : "boolean"
          },
          "transformerRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled transformer plugins"
          },
          "enabled" : {
            "description" : "Activate or deactivate your service. Once disabled, users will get an error page saying the service does not exist",
            "type" : "boolean"
          },
          "gzip" : {
            "description" : "GZIP settings",
            "$ref" : "#/components/schemas/otoroshi.utils.gzip.GzipConfig"
          },
          "sendInfoToken" : {
            "description" : "Should otoroshi send info token",
            "type" : "boolean"
          },
          "tcpUdpTunneling" : {
            "description" : "Enabled TCP/UDP tunneling through websocket connection",
            "type" : "boolean"
          },
          "removeHeadersOut" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client response"
          },
          "useAkkaHttpClient" : {
            "description" : "Use akka http client for this service",
            "type" : "boolean"
          },
          "maintenanceMode" : {
            "description" : "Display a maintainance page when a user try to use the service",
            "type" : "boolean"
          },
          "id" : {
            "description" : "A unique random string to identify your service",
            "type" : "string"
          },
          "removeHeadersIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove headers on client request"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "secComAlgoInfoToken" : {
            "description" : "Algorithm to verify/sign challenge token coming from/to the backend",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "userFacing" : {
            "description" : "The fact that this service will be seen by users and cannot be impacted by the Snow Monkey",
            "type" : "boolean"
          },
          "transformerConfig" : {
            "description" : "Transformer plugins configuration",
            "type" : "object"
          },
          "clientValidatorRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "A reference to validation authority"
          },
          "securityExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Exclude some paths"
          },
          "ipFiltering" : {
            "description" : "Ip filtering settings",
            "$ref" : "#/components/schemas/otoroshi.models.IpFiltering"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Target"
            },
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
          },
          "redirection" : {
            "description" : "Redirection settings",
            "$ref" : "#/components/schemas/otoroshi.models.RedirectionSettings"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "restrictions" : {
            "description" : "Restriction settings",
            "$ref" : "#/components/schemas/otoroshi.models.Restrictions"
          },
          "overrideHost" : {
            "description" : "Host header will be overriden with Host of the target",
            "type" : "boolean"
          },
          "accessValidator" : {
            "description" : "Service access validatiors",
            "$ref" : "#/components/schemas/otoroshi.script.AccessValidatorRef"
          },
          "sendStateChallenge" : {
            "description" : "Should otoroshi send challenge token",
            "type" : "boolean"
          },
          "chaosConfig" : {
            "description" : "Chaos engineering settings",
            "$ref" : "#/components/schemas/otoroshi.models.ChaosConfig"
          },
          "secComInfoTokenVersion" : {
            "description" : "Version of the info token",
            "$ref" : "#/components/schemas/otoroshi.models.SecComInfoTokenVersion"
          },
          "additionalHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be added to each client response"
          },
          "secComHeaders" : {
            "description" : "Header names for sec. com. protocol",
            "$ref" : "#/components/schemas/otoroshi.models.SecComHeaders"
          },
          "matchingHeaders" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that MUST be present on client request to route it. Useful to implement versioning"
          },
          "secComAlgoChallengeBackToOto" : {
            "description" : "Algorithm to verify challenge token coming from the backend",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "secComUseSameAlgo" : {
            "description" : "Use the same algo for info token, challenge token signing, challenge token verification",
            "type" : "boolean"
          },
          "useNewWSClient" : {
            "description" : "Use akka http client for this service on websocket calls",
            "type" : "boolean"
          },
          "secComExcludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URI patterns excluded from secured communications"
          },
          "redirectToLocal" : {
            "description" : "If you work locally with Otoroshi, you may want to use that feature to redirect one particuliar service to a local host. For example, you can relocate https://foo.preprod.bar.com to http://localhost:8080 to make some tests",
            "type" : "boolean"
          },
          "enforceSecureCommunication" : {
            "description" : "When enabled, Otoroshi will try to exchange headers with backend service to ensure no one else can use the service from outside",
            "type" : "boolean"
          },
          "missingOnlyHeadersOut" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client response if they are not present"
          },
          "secComSettings" : {
            "description" : "Sec. com. settings",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "handleLegacyDomain" : {
            "description" : "Use 'domain', 'subdomain', 'env' and 'matchingRoot' for routing in addition to hosts, or just use hosts.",
            "type" : "boolean"
          },
          "canary" : {
            "description" : "Canary settings",
            "$ref" : "#/components/schemas/otoroshi.models.Canary"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "plugins" : {
            "description" : "Plugins enabled for this service. will replace separate plugins fields in a near future",
            "$ref" : "#/components/schemas/otoroshi.script.plugins.Plugins"
          },
          "secComTtl" : {
            "description" : "TTL for the info token",
            "type" : "number"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "secComVersion" : {
            "description" : "Version of the sec. com.",
            "$ref" : "#/components/schemas/otoroshi.models.SecComVersion"
          },
          "preRouting" : {
            "description" : "Pre routing plugin settings",
            "$ref" : "#/components/schemas/otoroshi.script.PreRoutingRef"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Each service descriptor is attached to groups. A group can have one or more services. Each API key is linked to a group and allow access to every service in the group"
          },
          "readOnly" : {
            "description" : "Service only accepts GET, HEAD and OPTIONS requests",
            "type" : "boolean"
          },
          "privatePatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "If you define a public pattern that is a little bit too much, you can make some of public URL private again"
          },
          "targetsLoadBalancing" : {
            "description" : "Loadbalancing strategy",
            "$ref" : "#/components/schemas/otoroshi.models.LoadBalancing"
          },
          "cors" : {
            "description" : "CORS settings",
            "$ref" : "#/components/schemas/otoroshi.models.CorsSettings"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Just a bunch of random properties"
          },
          "publicPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "By default, every services are private only and you'll need an API key to access it. However, if you want to expose a public UI, you can define one or more public patterns (regex) to allow access to anybody. For example if you want to allow anybody on any URL, just use '/.*'"
          },
          "api" : {
            "description" : "Api exposition settings",
            "$ref" : "#/components/schemas/otoroshi.models.ApiDescriptor"
          },
          "missingOnlyHeadersIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Add header on client request if they are not present"
          },
          "issueCert" : {
            "description" : "Flag to automatically issue a cert for this service",
            "type" : "boolean"
          },
          "headersVerification" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Specify headers that will be verified after routing."
          },
          "jwtVerifier" : {
            "description" : "JWT verifiers settings",
            "$ref" : "#/components/schemas/otoroshi.models.JwtVerifier"
          },
          "letsEncrypt" : {
            "description" : "Flag to automatically issue a let's encrypt (ACME) cert for this service",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.UdpTunnel" : {
        "description" : "Plugin to have udp tunnels over websockets",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.izanami.IzanamiCanaryConfig" : {
        "description" : "Configuration for IzanamiCanary",
        "type" : "object",
        "properties" : {
          "izanamiClientId" : {
            "description" : "Izanami client id",
            "type" : "string"
          },
          "configId" : {
            "description" : "Id of the target izanami configuration",
            "type" : "string"
          },
          "experimentId" : {
            "description" : "Id of the target izanami experiment",
            "type" : "string"
          },
          "mtls" : {
            "description" : "Izanami server tls config",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "izanamiUrl" : {
            "description" : "Izanami server url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when talking to the izanami server",
            "type" : "number"
          },
          "izanamiClientSecret" : {
            "description" : "Izanami client secret",
            "type" : "string"
          },
          "routeConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "The actual routing config"
          }
        }
      },
      "otoroshi.next.plugins.RemoveHeadersIn" : {
        "description" : "Plugin to remove headers from request",
        "type" : "object",
        "properties" : {
          "names" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Name of removed headers in request"
          }
        }
      },
      "otoroshi.next.plugins.RobotConfig" : {
        "description" : "Configuration for Robots",
        "type" : "object",
        "properties" : {
          "robot_txt_content" : {
            "description" : "Content of /robots.txt",
            "type" : "string"
          },
          "meta_content" : {
            "description" : "content of the <meta name='robots' /> tag",
            "type" : "string"
          },
          "robot_enabled" : {
            "description" : "/robots.txt enabled",
            "type" : "boolean"
          },
          "header_content" : {
            "description" : "Content of the X-Robots-Tag headers",
            "type" : "string"
          },
          "header_enabled" : {
            "description" : "Header enabled",
            "type" : "boolean"
          },
          "meta_enabled" : {
            "description" : "Meta tag enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesSupport" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.metrics.PrometheusEndpoint" : {
        "description" : "Plugin to expose metrics collected by PrometheusServiceMetrics",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.wrappers.PreRoutingWrapper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.TeamAccess" : {
        "description" : "Access rights for teams",
        "type" : "object",
        "properties" : {
          "canRead" : {
            "description" : "Can this access right read data",
            "type" : "boolean"
          },
          "value" : {
            "description" : "Access pattern",
            "type" : "string"
          },
          "canWrite" : {
            "description" : "Can this access right write data",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.OtoroshiAdminType" : {
        "type" : "string",
        "enum" : [ "SIMPLE", "WEBAUTHN" ],
        "description" : "Admin kind"
      },
      "otoroshi.plugins.log4j.Log4jExpressionParser" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.ssl.Cert" : {
        "description" : "The otoroshi model for X509 certificates",
        "type" : "object",
        "properties" : {
          "certType" : {
            "type" : "string",
            "description" : "the kind of certificate",
            "enum" : [ "client", "ca", "letsEncrypt", "keypair", "selfSigned", "certificate" ]
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "subject" : {
            "description" : "Certificate subject",
            "type" : "string"
          },
          "letsEncrypt" : {
            "description" : "Let's encrypt (ACME) generated",
            "type" : "boolean"
          },
          "keypair" : {
            "description" : "Is cert used for its keypair only ?",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "revoked" : {
            "description" : "Certificate is revoked",
            "type" : "boolean"
          },
          "valid" : {
            "description" : "Is cert valid",
            "type" : "boolean"
          },
          "password" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Certificate password"
          },
          "autoRenew" : {
            "description" : "Auto renew cert",
            "type" : "boolean"
          },
          "exposed" : {
            "description" : "Is the cert exposed (public key exposed in jwks.json)",
            "type" : "boolean"
          },
          "client" : {
            "description" : "Is cert a client cert ?",
            "type" : "boolean"
          },
          "from" : {
            "description" : "Start date",
            "type" : "number"
          },
          "selfSigned" : {
            "description" : "Is cert self signed",
            "type" : "boolean"
          },
          "id" : {
            "description" : "Entity id",
            "type" : "string"
          },
          "ca" : {
            "description" : "Is cert a CA ?",
            "type" : "boolean"
          },
          "chain" : {
            "description" : "Certicates chain (PEM encoded)",
            "type" : "string"
          },
          "sans" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificate SANs"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "privateKey" : {
            "description" : "Certificate private key (PEM encoded)",
            "type" : "string"
          },
          "caRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Reference to the CA (if any)"
          },
          "domain" : {
            "description" : "Certificate domain",
            "type" : "string"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "to" : {
            "description" : "Stop date",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.AlgoSettings" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.ESAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ESKPAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.HSAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.JWKSAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.KidAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RSAKPAlgoSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RSAlgoSettings"
        } ]
      },
      "otoroshi.tcp.TcpRule" : {
        "description" : "Associate targets for a domain (SNI)",
        "type" : "object",
        "properties" : {
          "domain" : {
            "description" : "match on SNI domain",
            "type" : "string"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.tcp.TcpTarget"
            },
            "description" : "TCP targets"
          }
        }
      },
      "otoroshi.plugins.geoloc.MaxMindGeolocationHelper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.IngressSupport" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.utils.TypedMap" : {
        "description" : "A map with typed keys",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.CleverCloudSettings" : {
        "description" : "Settings for connection to the clever-cloud api",
        "type" : "object",
        "properties" : {
          "consumerSecret" : {
            "description" : "Clever-Cloud oauth consumer secret",
            "type" : "string"
          },
          "consumerKey" : {
            "description" : "Clever-Cloud oauth consumer key",
            "type" : "string"
          },
          "secret" : {
            "description" : "Clever-Cloud oauth secret",
            "type" : "string"
          },
          "token" : {
            "description" : "Clever-Cloud oauth token",
            "type" : "string"
          },
          "orgaId" : {
            "description" : "Clever-Cloud organization id",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.hmac.HMACCallerPlugin" : {
        "description" : "Plugin that can call an hmac protected backend",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.AllowHttpMethods" : {
        "description" : "Plugin that only allow calls with specific http methods",
        "type" : "object",
        "properties" : {
          "allowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of allowed methods"
          },
          "forbidden" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of forbidden methods"
          }
        }
      },
      "otoroshi.plugins.apikeys.ClientCredentialFlow" : {
        "description" : "Plugin that provide the OAuth2 client_credentials flow",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.JsonTransform" : {
        "description" : "Plugin to transform json response",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.OtoroshiResourcesContext" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "routes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
            },
            "description" : "template for entities routes"
          },
          "apiKeys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
            },
            "description" : "template for entities apiKeys"
          },
          "backends" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgBackend"
            },
            "description" : "template for entities backends"
          },
          "scripts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.script.Script"
            },
            "description" : "template for entities scripts"
          },
          "jwtVerifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
            },
            "description" : "template for entities jwtVerifiers"
          },
          "tenants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Tenant"
            },
            "description" : "template for entities tenants"
          },
          "dataExporters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfig"
            },
            "description" : "template for entities dataExporters"
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Team"
            },
            "description" : "template for entities teams"
          },
          "services" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgService"
            },
            "description" : "template for entities services"
          },
          "serviceDescriptors" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
            },
            "description" : "template for entities serviceDescriptors"
          },
          "globalConfigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.GlobalConfig"
            },
            "description" : "template for entities globalConfigs"
          },
          "authModules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.AuthModuleConfig"
            },
            "description" : "template for entities authModules"
          },
          "tcpServices" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.tcp.TcpService"
            },
            "description" : "template for entities tcpServices"
          },
          "certificates" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.ssl.Cert"
            },
            "description" : "template for entities certificates"
          },
          "simpleAdmins" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
            },
            "description" : "template for entities simpleAdmins"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.StoredNgTarget"
            },
            "description" : "template for entities targets"
          },
          "serviceGroups" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.ServiceGroup"
            },
            "description" : "template for entities serviceGroups"
          }
        }
      },
      "otoroshi.models.Canary" : {
        "description" : "Settings for canary routing",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Use canary mode for this service",
            "type" : "boolean"
          },
          "traffic" : {
            "format" : "double",
            "description" : "Ratio of traffic that will be sent to canary targets.",
            "type" : "number"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Target"
            },
            "description" : "The list of target that Otoroshi will proxy and expose through the subdomain defined before. Otoroshi will do round-robin load balancing between all those targets with circuit breaker mecanism to avoid cascading failures"
          },
          "root" : {
            "description" : "Otoroshi will append this root to any target choosen. If the specified root is '/api/foo', then a request to https://yyyyyyy/bar will actually hit https://xxxxxxxxx/api/foo/bar",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.models.NgRouteDomainAndPathWrapper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "route" : {
            "description" : "The current route",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
          },
          "domain" : {
            "description" : "The current domain of the route",
            "type" : "string"
          },
          "path" : {
            "description" : "The current of the route",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.biscuit.BiscuitToken" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.BadResponse" : {
        "description" : "Settings for a bad response return (chaos engineering)",
        "type" : "object",
        "properties" : {
          "status" : {
            "format" : "int32",
            "description" : "The HTTP status for the response",
            "type" : "integer"
          },
          "body" : {
            "description" : "The body of the HTTP response",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The HTTP headers of the response"
          }
        }
      },
      "otoroshi.next.plugins.wrappers.RequestSinkWrapper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.CanaryMode" : {
        "description" : "Plugin for canary mode",
        "type" : "object",
        "properties" : {
          "traffic" : {
            "format" : "double",
            "description" : "Which percentage of the traffic goes to the canary target",
            "type" : "number"
          },
          "root" : {
            "description" : "The root path for target",
            "type" : "string"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgTarget"
            },
            "description" : "The canary targets"
          }
        }
      },
      "otoroshi.plugins.clientcert.HasClientCertMatchingApikeyValidator" : {
        "description" : "Plugin that validates client certificates",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.authcallers.BasicAuthCallerConfig" : {
        "description" : "Configuration for BasicAuthCaller",
        "type" : "object",
        "properties" : {
          "username" : {
            "description" : "Expected username",
            "type" : "string"
          },
          "password" : {
            "description" : "Expected password",
            "type" : "string"
          },
          "headerName" : {
            "description" : "Expected header name",
            "type" : "string"
          },
          "headerValueFormat" : {
            "description" : "Expected header format (to handle 'Basic ')",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.RemoveHeadersOut" : {
        "description" : "Plugin to remove headers from response",
        "type" : "object",
        "properties" : {
          "names" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Name of removed headers in response"
          }
        }
      },
      "otoroshi.env.Env" : {
        "description" : "The main otoroshi technical context containing everything to make otoroshi work",
        "type" : "object",
        "properties" : {
          "circuitBeakersHolder" : {
            "description" : "The current instance of circuit breakers holder",
            "$ref" : "#/components/schemas/otoroshi.gateway.CircuitBreakersHolder"
          }
        }
      },
      "otoroshi.plugins.jwt.JwtUserExtractor" : {
        "description" : "Plugin to extract user from jwt token",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgRoute" : {
        "description" : "A routing primitive representing how a request is matched and where the request is forwarded",
        "type" : "object",
        "properties" : {
          "debug_flow" : {
            "description" : "Enable report debugging",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Is the route enabled",
            "type" : "boolean"
          },
          "name" : {
            "description" : "The name of the route",
            "type" : "string"
          },
          "id" : {
            "description" : "The ud of the route",
            "type" : "string"
          },
          "export_reporting" : {
            "description" : "Export the execution reporting through standard data exporter",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the route"
          },
          "frontend" : {
            "description" : "The frontend of the route",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgFrontend"
          },
          "_loc" : {
            "description" : "The location of the route",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The tags of the route"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The groups of the route"
          },
          "backend_ref" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The backend id of the route (if one)"
          },
          "description" : {
            "description" : "The description of the route",
            "type" : "string"
          },
          "backend" : {
            "description" : "The backend of the route",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgBackend"
          }
        }
      },
      "otoroshi.auth.SAMLSignatureAlgorithm" : {
        "description" : "Algorithm to sign SAML requests",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.ForceHttpsTraffic" : {
        "description" : "Plugin to force https",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.GlobalConfig" : {
        "description" : "The global config (dynamic) for otoroshi",
        "type" : "object",
        "properties" : {
          "geolocationSettings" : {
            "description" : "Settings for geolocation extraction",
            "$ref" : "#/components/schemas/otoroshi.models.GeolocationSettings"
          },
          "alertsEmails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Email addresses that will receive all Otoroshi alert events"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second globally, measured on 10 seconds",
            "type" : "integer"
          },
          "maxWebhookSize" : {
            "format" : "int32",
            "description" : "Max number of items in webhooks",
            "type" : "integer"
          },
          "maxConcurrentRequests" : {
            "format" : "int64",
            "description" : "The number of authorized request processed at the same time",
            "type" : "integer"
          },
          "cleverSettings" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.CleverCloudSettings"
            } ],
            "description" : "Optional CleverCloud configuration"
          },
          "templates" : {
            "description" : "The otoroshi default templates for entities",
            "$ref" : "#/components/schemas/otoroshi.models.DefaultTemplates"
          },
          "endlessIpAddresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "IP addresses for which any request to Otoroshi will respond with 128 Gb of zeros"
          },
          "plugins" : {
            "description" : "global plugins settings",
            "$ref" : "#/components/schemas/otoroshi.script.plugins.Plugins"
          },
          "kafkaConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.events.KafkaConfig"
            } ],
            "description" : "Global kafka settings. deprecated"
          },
          "maxLogsSize" : {
            "format" : "int32",
            "description" : "Number of events kept locally",
            "type" : "integer"
          },
          "proxies" : {
            "description" : "Web proxies settings",
            "$ref" : "#/components/schemas/otoroshi.models.Proxies"
          },
          "enableEmbeddedMetrics" : {
            "description" : "Enable embedded metrics",
            "type" : "boolean"
          },
          "elasticReadsConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
            } ],
            "description" : "Config. for elastic reads"
          },
          "trustXForwarded" : {
            "description" : "Use X-Forwarded-* headers for routing",
            "type" : "boolean"
          },
          "quotasSettings" : {
            "description" : "Settings to generate alert when an apikey almost exceeded or exceeded its quotas",
            "$ref" : "#/components/schemas/otoroshi.models.QuotasAlmostExceededSettings"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "limitConcurrentRequests" : {
            "description" : "If enabled, Otoroshi will reject new request if too much at the same time",
            "type" : "boolean"
          },
          "useAkkaHttpClient" : {
            "description" : "Globally use akka http client for everything",
            "type" : "boolean"
          },
          "elasticWritesConfigs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.ElasticAnalyticsConfig"
            },
            "description" : "Configs. for Elastic writes"
          },
          "logAnalyticsOnServer" : {
            "description" : "Log analytics event on the server",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "apiReadOnly" : {
            "description" : "If enabled, Admin API won't be able to write/update/delete entities",
            "type" : "boolean"
          },
          "backOfficeAuthRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Id of the auth module used for otoroshi-ui login"
          },
          "streamEntityOnly" : {
            "description" : "HTTP will be streamed only. Doesn't work with old browsers",
            "type" : "boolean"
          },
          "otoroshiId" : {
            "description" : "Unique id for this otoroshi instance",
            "type" : "string"
          },
          "mailerSettings" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailerSettings"
            } ],
            "description" : "Optional mailer configuration"
          },
          "lines" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Possibles lines for Otoroshi"
          },
          "middleFingers" : {
            "description" : "Use middle finger emoji as a response character for endless HTTP responses",
            "type" : "boolean"
          },
          "analyticsWebhooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Webhook"
            },
            "description" : "Webhook that will receive all internal Otoroshi events"
          },
          "autoCert" : {
            "description" : "Auto certs settings",
            "$ref" : "#/components/schemas/otoroshi.models.AutoCert"
          },
          "maintenanceMode" : {
            "description" : "Global maintenant mode",
            "type" : "boolean"
          },
          "letsEncryptSettings" : {
            "description" : "Let's encrypt (ACME) settings",
            "$ref" : "#/components/schemas/otoroshi.utils.letsencrypt.LetsEncryptSettings"
          },
          "snowMonkeyConfig" : {
            "description" : "Snowmonky settings",
            "$ref" : "#/components/schemas/otoroshi.models.SnowMonkeyConfig"
          },
          "scripts" : {
            "description" : "global plugins settings. will be deprecated soon",
            "$ref" : "#/components/schemas/otoroshi.models.GlobalScripts"
          },
          "perIpThrottlingQuota" : {
            "format" : "int64",
            "description" : "Authorized number of calls per second globally per IP address, measured on 10 seconds",
            "type" : "integer"
          },
          "useCircuitBreakers" : {
            "description" : "If enabled, services will be authorized to use circuit breakers",
            "type" : "boolean"
          },
          "maxHttp10ResponseSize" : {
            "format" : "int64",
            "description" : "The max size in bytes of an HTTP 1.0 response",
            "type" : "integer"
          },
          "tlsSettings" : {
            "description" : "TLS settings",
            "$ref" : "#/components/schemas/otoroshi.models.TlsSettings"
          },
          "statsdConfig" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.events.StatsdConfig"
            } ],
            "description" : "Statsd settings (agent connection)"
          },
          "autoLinkToDefaultGroup" : {
            "description" : "If not defined, every new service descriptor will be added to the default group",
            "type" : "boolean"
          },
          "alertsWebhooks" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.Webhook"
            },
            "description" : "Webhook that will receive all Otoroshi alert events"
          },
          "ipFiltering" : {
            "description" : "Global ip filtering settings",
            "$ref" : "#/components/schemas/otoroshi.models.IpFiltering"
          },
          "u2fLoginOnly" : {
            "description" : "If enabled, login to backoffice through Auth0 will be disabled",
            "type" : "boolean"
          },
          "userAgentSettings" : {
            "description" : "Settings for useragent extraction",
            "$ref" : "#/components/schemas/otoroshi.models.UserAgentSettings"
          }
        }
      },
      "otoroshi.next.plugins.BuildMode" : {
        "description" : "Plugin for build more",
        "type" : "object",
        "properties" : { }
      },
      "StringList" : {
        "type" : "array",
        "items" : {
          "type" : "string"
        }
      },
      "otoroshi.plugins.discovery.DiscoverySelfRegistrationSink" : {
        "description" : "Plugin that add services discovery to otoroshi",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.ExporterRef" : {
        "description" : "Reference to a data exporter",
        "type" : "object",
        "properties" : {
          "ref" : {
            "description" : "Script id",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "config" : {
            "description" : "Script config",
            "type" : "object"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenKeyPairQuery" : {
        "description" : "Settings for generating a keypair",
        "type" : "object",
        "properties" : {
          "algo" : {
            "description" : "Keypair algorithm",
            "type" : "string"
          },
          "size" : {
            "format" : "int32",
            "description" : "Keypair size",
            "type" : "integer"
          }
        }
      },
      "otoroshi.next.plugins.NgRestrictionPath" : {
        "description" : "Configuration for NgRestrictions",
        "type" : "object",
        "properties" : {
          "method" : {
            "description" : "The http method (can be *)",
            "type" : "string"
          },
          "path" : {
            "description" : "The request path (can include domain)",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.NgFaultConfig" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : { }
      },
      "HealthCheckEventList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.events.HealthCheckEvent"
        }
      },
      "otoroshi.next.plugins.ReadOnlyCalls" : {
        "description" : "Plugin for readonly calls",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.QueryTransformerConfig" : {
        "description" : "Configuration for QueryTransformer",
        "type" : "object",
        "properties" : {
          "remove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove query params"
          },
          "rename" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Rename query params to"
          }
        }
      },
      "otoroshi.next.models.NgFrontend" : {
        "description" : "Representation of how a request will be matched to a route",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "the headers that will be matched"
          },
          "query" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "the query params that will be matched"
          },
          "domains" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgDomainAndPath"
            },
            "description" : "The domain and path that will be matched"
          },
          "methods" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "the http methods that will be matched"
          },
          "exact" : {
            "description" : "Match on exact path ?",
            "type" : "boolean"
          },
          "strip_path" : {
            "description" : "Is path stripped from backend request",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.models.StoredNgTargetDataStore" : {
        "description" : "The datastore for targets",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.OutageStrategy" : {
        "type" : "string",
        "enum" : [ "AllServicesPerGroup", "OneServicePerGroup" ]
      },
      "otoroshi.next.plugins.MockResponsesConfig" : {
        "description" : "Configuration for MockResponses",
        "type" : "object",
        "properties" : {
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.MockResponse"
            },
            "description" : "Possible responses"
          },
          "pass_through" : {
            "description" : "Pass the call if no mocked response found",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.ClientIdAuthConstraints" : {
        "description" : "Settings to extract apikey (using client_id only) from a header or query param",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "headerName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to find client_id"
          },
          "queryName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Query param name to find client_id"
          }
        }
      },
      "otoroshi.auth.BasicAuthUser" : {
        "description" : "A user model for the BasicAuthModuleConfig module",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "description" : "User metadata",
            "type" : "object"
          },
          "password" : {
            "description" : "User password (bcrypt hashed)",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "User tags"
          },
          "email" : {
            "description" : "User email",
            "type" : "string"
          },
          "webauthn" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.auth.WebAuthnDetails"
            } ],
            "description" : "Webauthn details"
          },
          "rights" : {
            "description" : "User rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "name" : {
            "description" : "User name",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.ClientConfig" : {
        "description" : "Settings for the http client when http request is forwarded",
        "type" : "object",
        "properties" : {
          "connectionTimeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          },
          "useCircuitBreaker" : {
            "description" : "Use a circuit breaker to avoid cascading failure when calling chains of services. Highly recommended !",
            "type" : "boolean"
          },
          "retryInitialDelay" : {
            "format" : "int64",
            "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "type" : "integer"
          },
          "cacheConnectionSettings" : {
            "description" : "Cached connection settings",
            "$ref" : "#/components/schemas/otoroshi.utils.http.CacheConnectionSettings"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy settings for http client"
          },
          "callTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "callAndStreamTimeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "globalTimeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "maxErrors" : {
            "format" : "int32",
            "description" : "Specify how many errors can pass before opening the circuit breaker",
            "type" : "integer"
          },
          "retries" : {
            "format" : "int32",
            "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "type" : "integer"
          },
          "backoffFactor" : {
            "format" : "int64",
            "description" : "Specify the factor to multiply the delay for each retry",
            "type" : "integer"
          },
          "customTimeouts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.CustomTimeouts"
            },
            "description" : "Custom timeouts per path"
          },
          "idleTimeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "sampleInterval" : {
            "format" : "int64",
            "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "type" : "integer"
          }
        }
      },
      "otoroshi.next.plugins.ContextValidator" : {
        "description" : "Plugin for context validation",
        "type" : "object",
        "properties" : {
          "path" : {
            "description" : "The path being tested on the current context",
            "type" : "string"
          },
          "value" : {
            "description" : "The expected value",
            "type" : "object"
          }
        }
      },
      "otoroshi.next.plugins.NgBadResponse" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : {
          "status" : {
            "format" : "int32",
            "description" : "status of the response",
            "type" : "integer"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "headers of the response"
          },
          "body" : {
            "description" : "Body of the response",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.useragent.UserAgentInfoEndpoint" : {
        "description" : "Plugin that return user-agent infos on an endpoint",
        "type" : "object",
        "properties" : { }
      },
      "LiveStats" : {
        "type" : "object",
        "description" : "Service live stats"
      },
      "otoroshi.models.ApiKeyConstraints" : {
        "description" : "Settings used to extract apikeys from http requests and routing traffic",
        "type" : "object",
        "properties" : {
          "customHeadersAuth" : {
            "description" : "Settings to extract apikey from custom headers",
            "$ref" : "#/components/schemas/otoroshi.models.CustomHeadersAuthConstraints"
          },
          "routing" : {
            "description" : "Routing settings for this apikey",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKeyRouteMatcher"
          },
          "clientIdAuth" : {
            "description" : "Settings to extract client_id only apikey",
            "$ref" : "#/components/schemas/otoroshi.models.ClientIdAuthConstraints"
          },
          "jwtAuth" : {
            "description" : "Settings to extract apikey from jwt token",
            "$ref" : "#/components/schemas/otoroshi.models.JwtAuthConstraints"
          },
          "basicAuth" : {
            "description" : "Settings to extract basic auth style apikey",
            "$ref" : "#/components/schemas/otoroshi.models.BasicAuthConstraints"
          }
        }
      },
      "otoroshi.plugins.metrics.ServiceMetrics" : {
        "description" : "Plugin to collect service metrics",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.core.apikeys.BasicAuthApikeyExtractor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.izanami.IzanamiCanary" : {
        "description" : "Plugin that can route on different target paths based on an izanami experiment",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgOtoroshiChallengeConfig" : {
        "description" : "Configuration for OtoroshiChallenge",
        "type" : "object",
        "properties" : {
          "version" : {
            "description" : "The version of the jwt",
            "$ref" : "#/components/schemas/otoroshi.models.SecComVersion"
          },
          "ttl" : {
            "description" : "The ttl of the generated jwt in milliseconds",
            "type" : "number"
          },
          "request_header_name" : {
            "description" : "The header name to inject the jwt",
            "type" : "string"
          },
          "response_header_name" : {
            "description" : "The header name to read the jwt",
            "type" : "string"
          },
          "algo_to_backend" : {
            "description" : "The jwt signing algorithm when writing",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "algo_from_backend" : {
            "description" : "The jwt signing algorithm when reading",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "state_resp_leeway" : {
            "description" : "the number of seconds acceptable between client and server time",
            "type" : "number"
          }
        }
      },
      "otoroshi.plugins.mirror.MirroringPlugin" : {
        "description" : "Plugin to mirror calls",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgOtoroshiInfoConfig" : {
        "description" : "Configuration for OtoroshiInfos",
        "type" : "object",
        "properties" : {
          "version" : {
            "description" : "The version of the jwt",
            "$ref" : "#/components/schemas/otoroshi.models.SecComInfoTokenVersion"
          },
          "secComTtl" : {
            "description" : "The ttl of the generated jwt in milliseconds",
            "type" : "number"
          },
          "headerName" : {
            "description" : "The header name to inject the jwt",
            "type" : "string"
          },
          "algo" : {
            "description" : "The jwt signing algorithm",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          }
        }
      },
      "otoroshi.utils.http.DN" : {
        "type" : "string",
        "description" : "A string representation of a Distinguished Name"
      },
      "Any" : {
        "oneOf" : [ {
          "type" : "object"
        }, {
          "type" : "array"
        }, {
          "type" : "string"
        }, {
          "type" : "boolean"
        }, {
          "type" : "number"
        }, {
          "type" : "integer"
        } ]
      },
      "otoroshi.ssl.ClientAuth" : {
        "type" : "string",
        "enum" : [ "Need", "None", "Want" ],
        "description" : "Client authentication mode"
      },
      "otoroshi.models.SimpleOtoroshiAdmin" : {
        "description" : "An otoroshi admin user",
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "description" : "User creation date",
            "type" : "number"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "password" : {
            "description" : "User password (bcrypt hashed)",
            "type" : "string"
          },
          "rights" : {
            "description" : "User rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "typ" : {
            "description" : "Type of user",
            "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdminType"
          },
          "label" : {
            "description" : "User label",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of admin",
            "type" : "string",
            "enum" : [ "simple", "webauthn" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "username" : {
            "description" : "User username",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.models.EntityIdentifier" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptorIdentifier"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.ServiceGroupIdentifier"
        } ]
      },
      "otoroshi.next.plugins.ContextValidation" : {
        "description" : "Plugin for context validation",
        "type" : "object",
        "properties" : {
          "validators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.ContextValidator"
            },
            "description" : "The validators to pass on the current context"
          }
        }
      },
      "otoroshi.plugins.izanami.IzanamiCanaryRoutingConfig" : {
        "description" : "Configuration for IzanamiCanary",
        "type" : "object",
        "properties" : {
          "routes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.plugins.izanami.IzanamiCanaryRoutingConfigRoute"
            },
            "description" : "Possible routes"
          }
        }
      },
      "otoroshi.next.plugins.NgApikeyExtractorBasic" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          },
          "header_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the header to extract"
          },
          "query_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the query param to extract"
          }
        }
      },
      "otoroshi.ssl.pki.models.SignCertResponse" : {
        "description" : "Response for a certificate signing operation",
        "type" : "object",
        "properties" : {
          "cert" : {
            "description" : "Cert (PEM encoded)",
            "type" : "string"
          },
          "csr" : {
            "description" : "CSR (PEM encoded)",
            "type" : "string"
          },
          "ca" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string",
              "description" : "pem encoded X509 certificate"
            } ],
            "description" : "Ca cert (PEM encoded)"
          }
        }
      },
      "otoroshi.plugins.discovery.DiscoveryTargetsSelector" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgDomainAndPath" : {
        "type" : "string",
        "description" : "A string representing a domain and an optional path"
      },
      "otoroshi.next.plugins.JQ" : {
        "description" : "Plugin to transform body with JQ filters",
        "type" : "object",
        "properties" : {
          "request" : {
            "description" : "JQ filter for request",
            "type" : "string"
          },
          "response" : {
            "description" : "JQ filter for response",
            "type" : "string"
          }
        }
      },
      "otoroshi.events.KafkaConfig" : {
        "description" : "Settings for connection to a kafka cluster",
        "type" : "object",
        "properties" : {
          "hostValidation" : {
            "description" : "Enabled TLS hostname validation",
            "type" : "boolean"
          },
          "servers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "URLs of the kafka servers"
          },
          "keyPass" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional keypass"
          },
          "mtlsConfig" : {
            "description" : "TLS config to access the cluster",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "topic" : {
            "description" : "Optional kafka topic (otoroshi-events by default)",
            "type" : "string"
          },
          "truststore" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional truststore"
          },
          "keystore" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional keystore"
          },
          "sendEvents" : {
            "description" : "Send events to it, or just connect",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          }
        }
      },
      "otoroshi.next.plugins.SnowMonkeyChaos" : {
        "description" : "Plugin to induce chaos",
        "type" : "object",
        "properties" : {
          "large_request_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgLargeRequestFaultConfig"
            } ],
            "description" : "Config. for large request body faults"
          },
          "large_response_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgLargeResponseFaultConfig"
            } ],
            "description" : "Config. for large response faults"
          },
          "latency_injection_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgLatencyInjectionFaultConfig"
            } ],
            "description" : "Config. for latency injection faults"
          },
          "bad_responses_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgBadResponsesFaultConfig"
            } ],
            "description" : "Config. for bad responses faults"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesIngressSyncJob" : {
        "description" : "Plugin to sync kubernetes ingresses with otoroshi",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.UserRights" : {
        "description" : "Represent a list of user rights",
        "type" : "object",
        "properties" : {
          "rights" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRight"
            },
            "description" : "Access rights of a user"
          }
        }
      },
      "otoroshi.next.plugins.JsonTransformConfig" : {
        "description" : "Configuration for JsonTransform",
        "type" : "object",
        "properties" : {
          "filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter for transformation"
          }
        }
      },
      "otoroshi.plugins.biscuit.vavr_implicits" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.IndexSettingsInterval" : {
        "description" : "Elasticseach indexation interval",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jq.JqBodyTransformer" : {
        "description" : "Plugin to transform http body using jq filters",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.discovery.DiscoveryJobServiceId" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "A registration id",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.NgHeaderValuesConfig" : {
        "description" : "Configuration for headers plugins",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Value of the headers"
          }
        }
      },
      "otoroshi.next.plugins.wrappers.AccessValidatorWrapper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.MaintenanceMode" : {
        "description" : "Plugin for maintainance mode",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesConfig" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "endpoint" : {
            "description" : "Kube API endpoint",
            "type" : "string"
          },
          "templates" : {
            "description" : "Templates for created entities",
            "type" : "object"
          },
          "token" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Kube API access token"
          },
          "restartDependantDeployments" : {
            "description" : "If enabled, deployments dependant to otoroshi managed secrets (apikeys, certs) will be automatically restarted as secrets are updated",
            "type" : "boolean"
          },
          "watchGracePeriodSeconds" : {
            "format" : "int32",
            "description" : "The number of second to wait between receiving a change event and the actual sync",
            "type" : "integer"
          },
          "crds" : {
            "description" : "Enabled crds integration",
            "type" : "boolean"
          },
          "watch" : {
            "description" : "Enabled resources watch",
            "type" : "boolean"
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Kubernetes entities with those labels will be query"
          },
          "openshiftDnsOperatorCoreDnsName" : {
            "description" : "DNS operator name",
            "type" : "string"
          },
          "syncIntervalSeconds" : {
            "format" : "int64",
            "description" : "Number of seconds between syncs",
            "type" : "integer"
          },
          "kubeDnsOperatorCoreDnsName" : {
            "description" : "Kube dns name",
            "type" : "string"
          },
          "defaultGroup" : {
            "description" : "Otoroshi groups where ingress services will be created",
            "type" : "string"
          },
          "kubeDnsOperatorCoreDnsNamespace" : {
            "description" : "Kube dns namespace",
            "type" : "string"
          },
          "triggerKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "--"
          },
          "otoroshiNamespace" : {
            "description" : "The namespace where otoroshi is deployed",
            "type" : "string"
          },
          "watchTimeoutSeconds" : {
            "format" : "int32",
            "description" : "The timeout to call a watch resources",
            "type" : "integer"
          },
          "openshiftDnsOperatorCleanupDomains" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Cleanup DNS operator based on domains"
          },
          "namespaces" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Kubernetes namespaces that will be query"
          },
          "openshiftDnsOperatorCoreDnsPort" : {
            "format" : "int32",
            "description" : "DNS operator port number",
            "type" : "integer"
          },
          "coreDnsEnv" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Domain name prefix"
          },
          "triggerPath" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "--"
          },
          "image" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Sidecar image"
          },
          "coreDnsConfigMapName" : {
            "description" : "The name of the coredns config-map",
            "type" : "string"
          },
          "clusterDomain" : {
            "description" : "The current kubernetes cluster domain",
            "type" : "string"
          },
          "caCert" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The kubernetes cacert"
          },
          "trust" : {
            "description" : "Trust Kube CA",
            "type" : "boolean"
          },
          "ingressClasses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Ingress classes watched by otoroshi ingress controller"
          },
          "userPassword" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional username/password to access kube api"
          },
          "syncDaikokuApikeysOnly" : {
            "description" : "Sync only daikoku apikeys",
            "type" : "boolean"
          },
          "openshiftDnsOperatorCleanup" : {
            "description" : "Cleanup DNS operator",
            "type" : "boolean"
          },
          "kubeSystemNamespace" : {
            "description" : "The namespace containing coredns",
            "type" : "string"
          },
          "ingressEndpointIp" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "--"
          },
          "namespacesLabels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Kubernetes namespaces with those labels that will be query"
          },
          "openshiftDnsOperatorCleanupNames" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Cleanup DNS operator based on names"
          },
          "kubeDnsOperatorCoreDnsPort" : {
            "format" : "int32",
            "description" : "Kube dns port number",
            "type" : "integer"
          },
          "mutatingWebhookName" : {
            "description" : "Sidecar webhook name",
            "type" : "string"
          },
          "kubeLeader" : {
            "description" : "Use kubernetes to select a leader",
            "type" : "boolean"
          },
          "ingressEndpointHostname" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "--"
          },
          "openshiftDnsOperatorIntegration" : {
            "description" : "Enable the openshift operator integration",
            "type" : "boolean"
          },
          "validatingWebhookName" : {
            "description" : "The name of the validating webhook",
            "type" : "string"
          },
          "coreDnsDeploymentName" : {
            "description" : "The name of the coredns deployment",
            "type" : "string"
          },
          "ingresses" : {
            "description" : "Enable ingress controller",
            "type" : "boolean"
          },
          "useProxyState" : {
            "description" : "Use proxy state instead of loading everything from datastore",
            "type" : "boolean"
          },
          "coreDnsIntegrationDryRun" : {
            "description" : "Do not modify coredns config automatically",
            "type" : "boolean"
          },
          "ingressEndpointPublishedService" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "--"
          },
          "corednsPort" : {
            "format" : "int32",
            "description" : "Port of coredns",
            "type" : "integer"
          },
          "coreDnsIntegration" : {
            "description" : "Enable coredns integration",
            "type" : "boolean"
          },
          "otoroshiServiceName" : {
            "description" : "The service name for otoroshi",
            "type" : "string"
          },
          "meshDomain" : {
            "description" : "The domain used for service mesh",
            "type" : "string"
          },
          "kubeDnsOperatorIntegration" : {
            "description" : "Enable the legacy kubedns operator integration",
            "type" : "boolean"
          },
          "triggerHost" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "--"
          },
          "openshiftDnsOperatorCoreDnsNamespace" : {
            "description" : "DNS operator namespace",
            "type" : "string"
          }
        }
      },
      "otoroshi.script.plugins.Plugins" : {
        "description" : "Settings for plugins (of any kind)",
        "type" : "object",
        "properties" : {
          "config" : {
            "description" : "Plugins configuration",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Plugins enabled",
            "type" : "boolean"
          },
          "excluded" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          }
        }
      },
      "otoroshi.plugins.cache.ResponseCacheFilterConfig" : {
        "description" : "Configuration for ResponseCache",
        "type" : "object",
        "properties" : {
          "json" : {
            "description" : "Config for response cache filter",
            "type" : "object"
          }
        }
      },
      "otoroshi.next.models.NgMinimalBackend" : {
        "description" : "A backend representation with it's minimal attributes",
        "type" : "object",
        "properties" : {
          "root" : {
            "description" : "The root path of the backend or the full rewrite path",
            "type" : "string"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgTarget"
            },
            "description" : "The targets of the backend"
          },
          "load_balancing" : {
            "description" : "Loadbalancing config og the backend",
            "$ref" : "#/components/schemas/otoroshi.models.LoadBalancing"
          },
          "target_refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of NgStoredBackend ids"
          },
          "rewrite" : {
            "description" : "Does the backend performs a full url rewrite ?",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.workflow.WorkflowJob" : {
        "description" : "Experimental plugin",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.apikeys.ClientCredentialService" : {
        "description" : "Plugin that provide the OAuth2 client_credentials flow",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.DisableHttp10" : {
        "description" : "Plugin to disable HTTP/1.0",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.loggers.RequestBodyEvent" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "ua" : {
            "description" : "The user agent",
            "type" : "string"
          },
          "reqId" : {
            "description" : "The request id",
            "type" : "string"
          },
          "url" : {
            "description" : "The request url",
            "type" : "string"
          },
          "from" : {
            "description" : "The incoming request ip address",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The request headers"
          },
          "method" : {
            "description" : "The request method",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.WebAuthnDetails" : {
        "description" : "Handle and credentials for a webauthn user",
        "type" : "object",
        "properties" : {
          "handle" : {
            "description" : "Webauthn user handle",
            "type" : "string"
          },
          "credentials" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "Webauthn credentials"
          }
        }
      },
      "otoroshi.tcp.TcpTarget" : {
        "description" : "Target for a TCP proxy",
        "type" : "object",
        "properties" : {
          "host" : {
            "description" : "Target host",
            "type" : "string"
          },
          "ip" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Target ip"
          },
          "port" : {
            "format" : "int32",
            "description" : "Target port",
            "type" : "integer"
          },
          "tls" : {
            "description" : "Use tls",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.GeoPositionRadius" : {
        "description" : "Geolocation radius",
        "type" : "object",
        "properties" : {
          "latitude" : {
            "format" : "double",
            "description" : "Latitude of the position",
            "type" : "number"
          },
          "longitude" : {
            "format" : "double",
            "description" : "Longitude of the position",
            "type" : "number"
          },
          "radius" : {
            "format" : "double",
            "description" : "Radius of the circle in meters",
            "type" : "number"
          }
        }
      },
      "otoroshi.models.InCookie" : {
        "description" : "JWT token location (cookie)",
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Cookie name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          }
        }
      },
      "otoroshi.plugins.oidc.OIDCHeaders" : {
        "description" : "Plugin to pass OIDC related info as headers",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.apikeys.ApiKeyAllowedOnThisServiceValidator" : {
        "description" : "Plugin that validates apikey for specific services",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.RSAlgoSettings" : {
        "description" : "Settings to use RSA signing algorithm",
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Private key (for signing)"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "Public key (for verification)",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.tcp.TcpService" : {
        "description" : "Model for a TCP proxy",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Service enabled",
            "type" : "boolean"
          },
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "port" : {
            "format" : "int32",
            "description" : "network port",
            "type" : "integer"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.tcp.TcpRule"
            },
            "description" : "Routing rules"
          },
          "clientAuth" : {
            "description" : "Use client authentication",
            "$ref" : "#/components/schemas/otoroshi.ssl.ClientAuth"
          },
          "interface" : {
            "description" : "Network interface",
            "type" : "string"
          },
          "sni" : {
            "description" : "SNI settings",
            "$ref" : "#/components/schemas/otoroshi.tcp.SniSettings"
          },
          "id" : {
            "description" : "Entity id",
            "type" : "string"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "tls" : {
            "description" : "TLS mode",
            "$ref" : "#/components/schemas/otoroshi.tcp.TlsMode"
          }
        }
      },
      "WebAuthnRegistrationFinishBody" : {
        "type" : "object",
        "description" : ""
      },
      "otoroshi.models.LocalJwtVerifier" : {
        "description" : "Local jwt verifier (deprecated)",
        "type" : "object",
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Verifier excluded paths"
          },
          "algoSettings" : {
            "description" : "Algo settings",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "source" : {
            "description" : "Token source",
            "$ref" : "#/components/schemas/otoroshi.models.JwtTokenLocation"
          },
          "type" : {
            "description" : "the kind of verifier",
            "type" : "string",
            "enum" : [ "global", "local", "ref" ]
          },
          "strict" : {
            "description" : "Strict token verification",
            "type" : "boolean"
          },
          "strategy" : {
            "description" : "Token strategy",
            "$ref" : "#/components/schemas/otoroshi.models.VerifierStrategy"
          },
          "enabled" : {
            "description" : "Verifier enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.utils.gzip.GzipConfig" : {
        "description" : "Settings for gzip support",
        "type" : "object",
        "properties" : {
          "compressionLevel" : {
            "format" : "int32",
            "description" : "Compression level (0 - 9)",
            "type" : "integer"
          },
          "blackList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "blocklisted content types"
          },
          "chunkedThreshold" : {
            "format" : "int32",
            "description" : "Chunk size",
            "type" : "integer"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "bufferSize" : {
            "format" : "int32",
            "description" : "Buffer size in bytes",
            "type" : "integer"
          },
          "whiteList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "allow listed content types"
          },
          "enabled" : {
            "description" : "Gzip enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.useragent.UserAgentExtractor" : {
        "description" : "Plugin that extract user-agent related infos",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.Webhook" : {
        "description" : "Settings for webhook call",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers to authorize the call or whatever"
          },
          "mtlsConfig" : {
            "description" : "TLS config when calling webhook",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "url" : {
            "description" : "The URL where events are posted",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.models.NgCustomTimeouts" : {
        "description" : "Custom timeouts per path",
        "type" : "object",
        "properties" : {
          "connection_timeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          },
          "call_and_stream_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "path" : {
            "description" : "path on which this configuration works",
            "type" : "string"
          },
          "call_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "idle_timeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "global_timeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.VerifierStrategy" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.DefaultToken"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.PassThrough"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.Sign"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.Transform"
        } ]
      },
      "otoroshi.next.plugins.TcpTunnel" : {
        "description" : "Plugin to have tcp tunnels over websockets",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.DefaultToken" : {
        "description" : "Default jwt token when no other token validated",
        "type" : "object",
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          },
          "strict" : {
            "description" : "If the token already exists in the request, then fail",
            "type" : "boolean"
          },
          "token" : {
            "description" : "The default token",
            "type" : "object"
          }
        }
      },
      "otoroshi.models.RemainingQuotas" : {
        "description" : "Remaining quotas for an apikey",
        "type" : "object",
        "properties" : {
          "currentCallsPerSec" : {
            "format" : "int64",
            "description" : "Current number of call per second",
            "type" : "integer"
          },
          "remainingCallsPerSec" : {
            "format" : "int64",
            "description" : "Remaining number of call per second",
            "type" : "integer"
          },
          "currentCallsPerDay" : {
            "format" : "int64",
            "description" : "Current number of call per day",
            "type" : "integer"
          },
          "authorizedCallsPerDay" : {
            "format" : "int64",
            "description" : "Number of authorized call per day",
            "type" : "integer"
          },
          "currentCallsPerMonth" : {
            "format" : "int64",
            "description" : "Current number of call per month",
            "type" : "integer"
          },
          "remainingCallsPerMonth" : {
            "format" : "int64",
            "description" : "Remaining number of call per month",
            "type" : "integer"
          },
          "authorizedCallsPerSec" : {
            "format" : "int64",
            "description" : "Number of authorized call per second",
            "type" : "integer"
          },
          "authorizedCallsPerMonth" : {
            "format" : "int64",
            "description" : "Number of authorized call per month",
            "type" : "integer"
          },
          "remainingCallsPerDay" : {
            "format" : "int64",
            "description" : "Remaining number of call per day",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.GlobalScripts" : {
        "description" : "Settings to apply plugins globally",
        "type" : "object",
        "properties" : {
          "jobConfig" : {
            "description" : "jobs enabled",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Global scripts enabled",
            "type" : "boolean"
          },
          "transformersConfig" : {
            "description" : "transformers config",
            "type" : "object"
          },
          "transformersRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "transformers enabled"
          },
          "preRouteRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "pre-route plugins enabled"
          },
          "sinkConfig" : {
            "description" : "sinks config",
            "type" : "object"
          },
          "jobRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "running jobs"
          },
          "validatorRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "validator enabled"
          },
          "sinkRefs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "sinks enabled"
          },
          "preRouteConfig" : {
            "description" : "pre-route config",
            "type" : "object"
          },
          "validatorConfig" : {
            "description" : "validator config",
            "type" : "object"
          }
        }
      },
      "ErrorResponse" : {
        "type" : "object",
        "description" : "Typical error returned by otoroshi",
        "properties" : {
          "error" : {
            "type" : "string",
            "description" : "the error name"
          },
          "error_description" : {
            "type" : "string",
            "description" : "A short description of the error if one"
          },
          "Otoroshi-Error" : {
            "type" : "string",
            "description" : "sometimes, the error name is here"
          },
          "Otoroshi-Error-Msg" : {
            "type" : "string",
            "description" : "sometimes, the error description is here"
          }
        }
      },
      "otoroshi.plugins.cache.ResponseCacheConfig" : {
        "description" : "Configuration for ResponseCache",
        "type" : "object",
        "properties" : {
          "json" : {
            "description" : "Config for response cache",
            "type" : "object"
          }
        }
      },
      "otoroshi.plugins.biscuit.BiscuitValidator" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.JwtAuthConstraints" : {
        "description" : "Settings to extract apikey from a jwt token",
        "type" : "object",
        "properties" : {
          "keyPairSigned" : {
            "description" : "The jwt token is signed by a keypair from a cert found from its id in apikey meta. 'jwt-sign-keypair'",
            "type" : "boolean"
          },
          "cookieName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Cookie name to extract jwt token"
          },
          "queryName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Query param name to extract jwt token"
          },
          "headerName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to extract jwt token"
          },
          "secretSigned" : {
            "description" : "Jwt token signed with the client_secret",
            "type" : "boolean"
          },
          "maxJwtLifespanSecs" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "integer",
              "format" : "int64"
            } ],
            "description" : "Check if token does not have a long lifespan"
          },
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "includeRequestAttributes" : {
            "description" : "Jwt token should include verb and path",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.apikeys.ClientCredentialFlowExtractor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.log4j.Log4ShellFilter" : {
        "description" : "Plugin to mitigate Log4Shell attacks",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.StoredNgBackend" : {
        "description" : "A backend that can be stored in the otoroshi datastore",
        "type" : "object",
        "properties" : {
          "description" : {
            "description" : "The description of the backend",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The tags of the backend"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the backend"
          },
          "backend" : {
            "description" : "The actual backend",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgBackend"
          },
          "name" : {
            "description" : "The name of the backend",
            "type" : "string"
          },
          "_loc" : {
            "description" : "The location of the backend",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "id" : {
            "description" : "The id of the backend",
            "type" : "string"
          }
        }
      },
      "Empty" : {
        "type" : "object",
        "description" : "an empty body. Useful for RPC like endpoints"
      },
      "otoroshi.models.ServiceGroupIdentifier" : {
        "type" : "string",
        "description" : "the id of a group prefixed by 'group_'"
      },
      "otoroshi.script.AccessValidatorRef" : {
        "description" : "References to access validation plugins",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Access validator plugins enabled",
            "type" : "boolean"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          },
          "config" : {
            "description" : "Access validator plugins configuration",
            "type" : "object"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenCertResponse" : {
        "description" : "Response for a certificate generation operation",
        "type" : "object",
        "properties" : {
          "ca" : {
            "description" : "Ca cert (PEM encoded)",
            "type" : "string"
          },
          "caChain" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "description" : "pem encoded X509 certificate"
            },
            "description" : "Ca chain (PEM encoded)"
          },
          "csrQuery" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.ssl.pki.models.GenCsrQuery"
            } ],
            "description" : "JSON generation query"
          },
          "cert" : {
            "description" : "Cert (PEM encoded)",
            "type" : "string"
          },
          "serial" : {
            "format" : "int64",
            "description" : "Certificate serial number",
            "type" : "integer"
          },
          "key" : {
            "description" : "Private key (PEM encoded)",
            "type" : "string"
          },
          "csr" : {
            "description" : "CSR (PEM encoded)",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.models.NgPluginInstanceConfig" : {
        "description" : "The current configuration for a plugin",
        "type" : "object"
      },
      "otoroshi.models.PrivateAppsUser" : {
        "description" : "User session for private apps",
        "type" : "object",
        "properties" : {
          "realm" : {
            "description" : "Session realm name",
            "type" : "string"
          },
          "token" : {
            "description" : "Session tokens (from OAuth)",
            "type" : "object"
          },
          "expiredAt" : {
            "description" : "Session expiration date",
            "type" : "number"
          },
          "profile" : {
            "description" : "Session user profile",
            "type" : "object"
          },
          "lastRefresh" : {
            "description" : "Session last refresh (if OAuth refresh_token supported)",
            "type" : "number"
          },
          "randomId" : {
            "description" : "Session random id",
            "type" : "string"
          },
          "email" : {
            "description" : "Session user email",
            "type" : "string"
          },
          "createdAt" : {
            "description" : "Creation date of the session",
            "type" : "number"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "authConfigId" : {
            "description" : "Auth module id that created the session",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "otoroshiData" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "object"
            } ],
            "description" : "Otoroshi oriented metadata"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          }
        }
      },
      "otoroshi.plugins.geoloc.GeolocationInfoEndpoint" : {
        "description" : "Plugin that send geolocation infos to the client through an endpoint",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgTreeNodePath" : {
        "description" : "A node of the tree router",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.QueryTransformer" : {
        "description" : "Plugin to transform query string",
        "type" : "object",
        "properties" : {
          "remove" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Remove query params"
          },
          "rename" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Rename query params to"
          }
        }
      },
      "HostMetrics" : {
        "type" : "object",
        "description" : "Host metrics"
      },
      "otoroshi.next.models.NgService" : {
        "description" : "A composition of multiple routes with the same plugins",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the service"
          },
          "client" : {
            "description" : "The client config of the service",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgClientConfig"
          },
          "name" : {
            "description" : "The name of the service",
            "type" : "string"
          },
          "id" : {
            "description" : "The id of the service",
            "type" : "string"
          },
          "description" : {
            "description" : "The description of the service",
            "type" : "string"
          },
          "routes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgMinimalRoute"
            },
            "description" : "The routes of the service"
          },
          "debug_flow" : {
            "description" : "Enable report debugging",
            "type" : "boolean"
          },
          "export_reporting" : {
            "description" : "Export the execution reporting through standard data exporter",
            "type" : "boolean"
          },
          "_loc" : {
            "description" : "The location of the service",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "enabled" : {
            "description" : "Is the service enabled",
            "type" : "boolean"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The tags of the service"
          },
          "groups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The groups of the service"
          }
        }
      },
      "AlertEventList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.events.AlertEvent"
        }
      },
      "otoroshi.models.HealthCheck" : {
        "description" : "Healthcheck settings for a service",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether or not healthcheck is enabled on the current service descriptor",
            "type" : "boolean"
          },
          "url" : {
            "description" : "The URL to check",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.core.apikeys.ClientIdApikeyExtractor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.StaticResponseConfig" : {
        "description" : "Configuration for StaticResponse",
        "type" : "object",
        "properties" : {
          "status" : {
            "format" : "int32",
            "description" : "Status of the response",
            "type" : "integer"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers of the response"
          },
          "body" : {
            "description" : "Body of the response",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.useragent.UserAgentInfoHeader" : {
        "description" : "Plugin that pass user-agent infos in headers",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.HeadersValidation" : {
        "description" : "Plugin to validate headers",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The headers value being checked"
          }
        }
      },
      "otoroshi.models.SnowMonkeyConfig" : {
        "description" : "Settings for the snow monkey (chaos engineering)",
        "type" : "object",
        "properties" : {
          "dryRun" : {
            "description" : "Whether or not outages will actualy impact requests",
            "type" : "boolean"
          },
          "outageDurationTo" : {
            "description" : "End of outage duration range",
            "type" : "number"
          },
          "chaosConfig" : {
            "description" : "Chaos settings",
            "$ref" : "#/components/schemas/otoroshi.models.ChaosConfig"
          },
          "timesPerDay" : {
            "format" : "int32",
            "description" : "Number of time per day each service will be outage",
            "type" : "integer"
          },
          "outageDurationFrom" : {
            "description" : "Start of outage duration range",
            "type" : "number"
          },
          "startTime" : {
            "description" : "Start time of Snow Monkey each day",
            "type" : "string"
          },
          "includeUserFacingDescriptors" : {
            "description" : "Whether or not user facing apps. will be impacted by Snow Monkey",
            "type" : "boolean"
          },
          "targetGroups" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Groups impacted by Snow Monkey. If empty, all groups will be impacted"
          },
          "enabled" : {
            "description" : "Whether or not this config is enabled",
            "type" : "boolean"
          },
          "stopTime" : {
            "description" : "Stop time of Snow Monkey each day",
            "type" : "string"
          },
          "outageStrategy" : {
            "description" : "",
            "$ref" : "#/components/schemas/otoroshi.models.OutageStrategy"
          }
        }
      },
      "otoroshi.models.IndexSettings" : {
        "description" : "Elasticseach indexation settings",
        "type" : "object",
        "properties" : {
          "clientSide" : {
            "description" : "Enable index splitting on client side",
            "type" : "boolean"
          },
          "interval" : {
            "description" : "Index splitting interval",
            "$ref" : "#/components/schemas/otoroshi.models.IndexSettingsInterval"
          }
        }
      },
      "otoroshi.auth.NameIDFormat" : {
        "description" : "The name ID Format to use for the subject",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.ZoneMatch" : {
        "description" : "Match a target if in the same zone",
        "type" : "object",
        "properties" : {
          "zone" : {
            "description" : "Zone name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "otoroshi.next.models.NgPlugins" : {
        "description" : "A set of NgPluginInstance",
        "type" : "object",
        "properties" : {
          "slots" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgPluginInstance"
            },
            "description" : "All the NgPluginInstance"
          }
        }
      },
      "otoroshi.next.plugins.Http2Caller" : {
        "description" : "Experimental plugin",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesOtoroshiCRDsControllerJob" : {
        "description" : "Plugin to import entities from kubernetes CRDs",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.auth.GroupFilter" : {
        "description" : "Filter for a LDAP group",
        "type" : "object",
        "properties" : {
          "group" : {
            "description" : "The LDAP group",
            "type" : "string"
          },
          "tenant" : {
            "description" : "The tenant associated with this group",
            "$ref" : "#/components/schemas/otoroshi.models.TenantAccess"
          },
          "team" : {
            "description" : "The team associated with this group",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.mirror.RequestContext" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "descriptor" : {
            "description" : "Current descriptor",
            "$ref" : "#/components/schemas/otoroshi.models.ServiceDescriptor"
          },
          "id" : {
            "description" : "The id of the request",
            "type" : "string"
          },
          "config" : {
            "description" : "Current plugin config",
            "$ref" : "#/components/schemas/otoroshi.plugins.mirror.MirroringPluginConfig"
          }
        }
      },
      "otoroshi.plugins.biscuit.PreRoutingVerifierContext" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "ctx" : {
            "description" : "Current context",
            "$ref" : "#/components/schemas/otoroshi.script.PreRoutingContext"
          },
          "apk" : {
            "description" : "Current apikey",
            "$ref" : "#/components/schemas/otoroshi.models.ApiKey"
          }
        }
      },
      "CodeBody" : {
        "type" : "string",
        "description" : "Plugin scala code"
      },
      "otoroshi.models.AutoCert" : {
        "description" : "Settings to generate certificates on the fly",
        "type" : "object",
        "properties" : {
          "allowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "allowed domains"
          },
          "enabled" : {
            "description" : "Enable auto cert",
            "type" : "boolean"
          },
          "replyNicely" : {
            "description" : "Reply TLS error with an auto generated certificate for the domain",
            "type" : "boolean"
          },
          "notAllowed" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "not allowed domains"
          },
          "caRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Generate cert from the following CA"
          }
        }
      },
      "CertValidResponse" : {
        "type" : "object",
        "description" : "Is certificate valid",
        "properties" : {
          "valid" : {
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.RestrictionPath" : {
        "description" : "Represent an http request on which restrictions will apply",
        "type" : "object",
        "properties" : {
          "method" : {
            "description" : "Method of the http request",
            "type" : "string"
          },
          "path" : {
            "description" : "Path of the http request",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.loggers.BodyLoggerFilterConfig" : {
        "description" : "Configuration for BodyLogger",
        "type" : "object",
        "properties" : {
          "json" : {
            "description" : "The current config",
            "type" : "object"
          }
        }
      },
      "otoroshi.plugins.external.ExternalHttpValidator" : {
        "description" : "Plugin that validates call based on an external http service",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgClientConfig" : {
        "description" : "Settings for the http client when http request is forwarded",
        "type" : "object",
        "properties" : {
          "idle_timeout" : {
            "format" : "int64",
            "description" : "Timeout on idle connection",
            "type" : "integer"
          },
          "sample_interval" : {
            "format" : "int64",
            "description" : "Specify the sliding window time for the circuit breaker in milliseconds, after this time, error count will be reseted",
            "type" : "integer"
          },
          "cache_connection_settings" : {
            "description" : "Cached connection settings",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgCacheConnectionSettings"
          },
          "call_and_stream_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (hard timeout, connection will be closed after that duration)",
            "type" : "integer"
          },
          "custom_timeouts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgCustomTimeouts"
            },
            "description" : "Custom timeouts per path"
          },
          "connection_timeout" : {
            "format" : "int64",
            "description" : "Timeout at connection",
            "type" : "integer"
          },
          "call_timeout" : {
            "format" : "int64",
            "description" : "Specify how long each call should last at most in milliseconds (soft timeout as it's enforced by the circuit breaker)",
            "type" : "integer"
          },
          "global_timeout" : {
            "format" : "int64",
            "description" : "Specify how long the global call (with retries) should last at most in milliseconds",
            "type" : "integer"
          },
          "retry_initial_delay" : {
            "format" : "int64",
            "description" : "Specify the delay between two retries. Each retry, the delay is multiplied by the backoff factor",
            "type" : "integer"
          },
          "backoff_factor" : {
            "format" : "int64",
            "description" : "Specify the factor to multiply the delay for each retry",
            "type" : "integer"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy settings for http client"
          },
          "retries" : {
            "format" : "int32",
            "description" : "Specify how many times the client will try to fetch the result of the request after an error before giving up.",
            "type" : "integer"
          },
          "max_errors" : {
            "format" : "int32",
            "description" : "Specify how many errors can pass before opening the circuit breaker",
            "type" : "integer"
          }
        }
      },
      "otoroshi.plugins.composite.CompositePlugin" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.wrappers.CompositeWrapper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.GeolocationMatch" : {
        "description" : "Match a target if in the same geo location radius",
        "type" : "object",
        "properties" : {
          "positions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.GeoPositionRadius"
            },
            "description" : "Possible positions"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "BulkResponseBody" : {
        "type" : "array",
        "items" : {
          "type" : "object",
          "properties" : {
            "id" : {
              "type" : "string",
              "description" : "the id of the entity"
            },
            "status" : {
              "type" : "integer",
              "description" : "operation status"
            },
            "error" : {
              "type" : "string",
              "description" : "the error of the operation if one"
            }
          },
          "required" : [ "uid", "status" ]
        }
      },
      "otoroshi.models.BadResponsesFaultConfig" : {
        "description" : "List of bad response settings",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.BadResponse"
            },
            "description" : "The possibles responses"
          }
        }
      },
      "otoroshi.next.plugins.SOAPActionConfig" : {
        "description" : "Configuration for SOAPAction",
        "type" : "object",
        "properties" : {
          "jq_response_filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter to transform response body"
          },
          "jq_request_filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter to transform request body"
          },
          "preserve_query" : {
            "description" : "Preserve query params",
            "type" : "boolean"
          },
          "convert_request_body_to_xml" : {
            "description" : "Convert json body to xml",
            "type" : "boolean"
          },
          "charset" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The body charset"
          },
          "url" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "SOAP endpoint"
          },
          "action" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The soap action if one"
          },
          "envelope" : {
            "description" : "The soap envelope to call",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.Target" : {
        "description" : "A target model for a service (destination for forwarded requests)",
        "type" : "object",
        "properties" : {
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Tags for this target"
          },
          "host" : {
            "description" : "The host on which the HTTP call will be forwarded. Can be a domain name, or an IP address. Can also have a port",
            "type" : "string"
          },
          "weight" : {
            "format" : "int32",
            "description" : "The weight of the target when choosing",
            "type" : "integer"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata for this target"
          },
          "protocol" : {
            "description" : "Protocol for the target",
            "type" : "string"
          },
          "predicate" : {
            "description" : "Predicate to choose this target",
            "$ref" : "#/components/schemas/otoroshi.models.TargetPredicate"
          },
          "ipAddress" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI"
          },
          "mtlsConfig" : {
            "description" : "TLS settings to contact this target",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "scheme" : {
            "description" : "The protocol used for communication. Can be http or https",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.Redirection" : {
        "description" : "Plugin to perform redirections",
        "type" : "object",
        "properties" : {
          "code" : {
            "format" : "int32",
            "description" : "Redirection status code used",
            "type" : "integer"
          },
          "to" : {
            "description" : "The redirection url",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.discovery.DiscoveryJobRegistrationId" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "id" : {
            "description" : "A service id",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.ContextValidationConfig" : {
        "description" : "Configuration for ContextValidation",
        "type" : "object",
        "properties" : {
          "validators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.ContextValidator"
            },
            "description" : "The validators to pass on the current context"
          }
        }
      },
      "SimpleAdminList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
        }
      },
      "otoroshi.models.Proxies" : {
        "description" : "Various web proxy settings for http client",
        "type" : "object",
        "properties" : {
          "elastic" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call elastic"
          },
          "eventsWebhooks" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call webhooks"
          },
          "jwk" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to fetch jwks"
          },
          "auth" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call OAuth providers"
          },
          "clevercloud" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to call clevercloud"
          },
          "alertEmails" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to send alert emails"
          },
          "authority" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to check authorities"
          },
          "services" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy used to access services targets"
          }
        }
      },
      "otoroshi.next.plugins.GlobalThrottling" : {
        "description" : "Plugin for throttling",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.ApiKeyRotation" : {
        "description" : "Settings for automatic apikey rotation with grace period",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Rotation enabled",
            "type" : "boolean"
          },
          "rotationEvery" : {
            "format" : "int64",
            "description" : "Rotate every n hours",
            "type" : "integer"
          },
          "gracePeriod" : {
            "format" : "int64",
            "description" : "period (in hours) during which both secrets works",
            "type" : "integer"
          },
          "nextSecret" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Next client_secret value"
          }
        }
      },
      "otoroshi.utils.http.CacheConnectionSettings" : {
        "description" : "The settings for http cached connection at host level",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Enable Cached connections at host tevel",
            "type" : "boolean"
          },
          "queueSize" : {
            "format" : "int32",
            "description" : "The size for the request queue",
            "type" : "integer"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesAdmissionWebhookSidecarInjector" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.tcp.SniSettings" : {
        "description" : "SNI settings for a TCP proxy",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "SNI extraction enabled",
            "type" : "boolean"
          },
          "forwardIfNoMatch" : {
            "description" : "",
            "type" : "boolean"
          },
          "forwardsTo" : {
            "description" : "forwards call to",
            "$ref" : "#/components/schemas/otoroshi.tcp.TcpTarget"
          }
        }
      },
      "otoroshi.plugins.clientcert.HasClientCertMatchingValidator" : {
        "description" : "Plugin that validates client certificates",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.LoadBalancing" : {
        "type" : "object",
        "description" : "Loadbalancing strategy",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "BestResponseTime", "IpAddressHash", "Random", "RoundRobin", "Sticky", "WeightedBestResponseTime" ]
          },
          "ratio" : {
            "type" : "number",
            "format" : "double"
          }
        }
      },
      "otoroshi.models.RedirectionSettings" : {
        "description" : "Settings for routing redirection",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Whether or not redirection is enabled",
            "type" : "boolean"
          },
          "code" : {
            "format" : "int32",
            "description" : "The http redirect code",
            "type" : "integer"
          },
          "to" : {
            "description" : "The location for redirection",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.NgOtoroshiChallengeKeys" : {
        "description" : "Configuration for OtoroshiChallenge",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.wrappers.RequestTransformerWrapper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.OtoroshiAdmin" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.SimpleOtoroshiAdmin"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.WebAuthnOtoroshiAdmin"
        } ]
      },
      "otoroshi.models.JwtVerifier" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.GlobalJwtVerifier"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.LocalJwtVerifier"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.RefJwtVerifier"
        } ]
      },
      "otoroshi.plugins.jsoup.HtmlPatcher" : {
        "description" : "Plugin to transform html response body",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.apikeys.ClientCredentialFlowBody" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "scope" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Scope of the request"
          },
          "clientId" : {
            "description" : "The request client id",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The request client secret",
            "type" : "string"
          },
          "grantType" : {
            "description" : "The grand type (client_credentials)",
            "type" : "string"
          },
          "bearerKind" : {
            "description" : "The kind of bearer",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.BasicAuthModuleConfig" : {
        "description" : "Authentication module that let you use otoroshi as the identity provider",
        "type" : "object",
        "properties" : {
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "metadata of the module"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "basicAuth" : {
            "description" : "Use standard basic auth or web login form",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "userValidators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.UserValidator"
            },
            "description" : "Validators that will check if the current user is authorized after successful login"
          },
          "_loc" : {
            "description" : "location of the module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "users" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.BasicAuthUser"
            },
            "description" : "Users attached to the module"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "max age for the session cookie in seconds",
            "type" : "integer"
          },
          "name" : {
            "description" : "name of the module",
            "type" : "string"
          },
          "webauthn" : {
            "description" : "Use webauthn for login",
            "type" : "boolean"
          },
          "id" : {
            "description" : "id of the module",
            "type" : "string"
          },
          "desc" : {
            "description" : "description of the module",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.metrics.PrometheusSupport" : {
        "description" : "Plugin to collect service metrics",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.izanami.IzanamiProxyConfig" : {
        "description" : "Configuration for IzanamiProxy",
        "type" : "object",
        "properties" : {
          "izanamiClientId" : {
            "description" : "Izanami client id",
            "type" : "string"
          },
          "path" : {
            "description" : "Izanami server path",
            "type" : "string"
          },
          "mtls" : {
            "description" : "Izanami server tls config",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "featuresEnabled" : {
            "description" : "Is features proxy enabled",
            "type" : "boolean"
          },
          "featuresWithContextEnabled" : {
            "description" : "Is contextual features enabled ?",
            "type" : "boolean"
          },
          "izanamiClientSecret" : {
            "description" : "Izanami client secret",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when talking to the izanami server",
            "type" : "number"
          },
          "configurationEnabled" : {
            "description" : "Is configuration proxy enabled",
            "type" : "boolean"
          },
          "featurePattern" : {
            "description" : "the searched pattern for features",
            "type" : "string"
          },
          "izanamiUrl" : {
            "description" : "Izanami server url",
            "type" : "string"
          },
          "autoContext" : {
            "description" : "Automatically pass the current user and/or apikey as context",
            "type" : "boolean"
          },
          "configPattern" : {
            "description" : "the searched pattern for config",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.NgBadResponsesFaultConfig" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "bad response ratio",
            "type" : "number"
          },
          "responses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgBadResponse"
            },
            "description" : "possible response"
          }
        }
      },
      "otoroshi.plugins.accesslog.KafkaAccessLog" : {
        "description" : "Plugin that log access in a kafka topic",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.AdditionalHeadersOut" : {
        "description" : "Plugin that add headers on a response",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The headers added to the response"
          }
        }
      },
      "otoroshi.plugins.core.apikeys.CustomHeadersApikeyExtractor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.utils.mailer.EmailLocation" : {
        "description" : "Email location settings",
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Destination name",
            "type" : "string"
          },
          "email" : {
            "description" : "Email address",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.envoy.EnvoyControlPlane" : {
        "description" : "Experimental plugin",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.RackMatch" : {
        "description" : "Match a target if in the same rack",
        "type" : "object",
        "properties" : {
          "rack" : {
            "description" : "Rack name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          }
        }
      },
      "otoroshi.plugins.oidc.ThirdPartyApiKeyConfig" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.ESAlgoSettings" : {
        "description" : "Settings to use elliptic curve signing algorithm",
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The EC private key. If used for verification, can be null"
          },
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "publicKey" : {
            "description" : "The EC private key. If used for signing, can be null",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfig" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "deprecated"
          },
          "headerName" : {
            "description" : "deprecated",
            "type" : "string"
          },
          "localVerificationOnly" : {
            "description" : "deprecated",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "deprecated",
            "type" : "boolean"
          },
          "ttl" : {
            "format" : "int64",
            "description" : "deprecated",
            "type" : "integer"
          },
          "uniqueApiKey" : {
            "description" : "deprecated",
            "type" : "boolean"
          },
          "rolesPath" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "deprecated"
          },
          "mode" : {
            "description" : "deprecated",
            "$ref" : "#/components/schemas/otoroshi.plugins.oidc.OIDCThirdPartyApiKeyConfigMode"
          },
          "quotasEnabled" : {
            "description" : "deprecated",
            "type" : "boolean"
          },
          "monthlyQuota" : {
            "format" : "int64",
            "description" : "deprecated",
            "type" : "integer"
          },
          "scopes" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "deprecated"
          },
          "roles" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "deprecated"
          },
          "throttlingQuota" : {
            "format" : "int64",
            "description" : "deprecated",
            "type" : "integer"
          },
          "dailyQuota" : {
            "format" : "int64",
            "description" : "deprecated",
            "type" : "integer"
          },
          "oidcConfigRef" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "deprecated"
          }
        }
      },
      "otoroshi.plugins.geoloc.GeolocationInfoHeader" : {
        "description" : "Plugin that send geolocation infos to the backend through a header",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.NoneGeolocationSettings" : {
        "type" : "object",
        "description" : "No geolocation extraction",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "none" ]
          }
        }
      },
      "otoroshi.next.models.NgServiceDataStore" : {
        "description" : "The datastore for services",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.NgPluginInstance" : {
        "description" : "The current configuration and target for a plugin",
        "type" : "object",
        "properties" : {
          "debug" : {
            "description" : "Is the plugin in debug mode",
            "type" : "boolean"
          },
          "config" : {
            "description" : "The config. of the plugin",
            "type" : "object"
          },
          "exclude" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "include" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Included paths"
          },
          "plugin" : {
            "description" : "The id of the plugin",
            "type" : "string"
          },
          "enabled" : {
            "description" : "Is the plugin enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.JQRequestConfig" : {
        "description" : "Configuration for JQRequest",
        "type" : "object",
        "properties" : {
          "filter" : {
            "description" : "JQ filter for request",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.hmac.HMACValidator" : {
        "description" : "Plugin that can validate an hmac call",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgRestrictions" : {
        "description" : "Plugin to apply routing restrictions",
        "type" : "object",
        "properties" : {
          "allow_last" : {
            "description" : "Evaluates allowed paths after forbidden and not found",
            "type" : "boolean"
          },
          "allowed" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgRestrictionPath"
            },
            "description" : "Allowed paths"
          },
          "forbidden" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgRestrictionPath"
            },
            "description" : "Forbidden paths"
          },
          "not_found" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgRestrictionPath"
            },
            "description" : "Not found paths"
          }
        }
      },
      "WebAuthnRegistrationStartBody" : {
        "type" : "object",
        "description" : ""
      },
      "PatchDocument" : {
        "type" : "object",
        "description" : "A JSONPatch document as defined by RFC 6902",
        "required" : [ "op", "path" ],
        "properties" : {
          "op" : {
            "type" : "string",
            "description" : "The operation to be performed",
            "enum" : [ "add", "remove", "replace", "move", "copy", "test" ]
          },
          "path" : {
            "type" : "string",
            "description" : "A JSON-Pointer"
          },
          "value" : {
            "type" : "object",
            "description" : "The value to be used within the operations."
          },
          "from" : {
            "type" : "string",
            "description" : "A string containing a JSON Pointer value."
          }
        }
      },
      "otoroshi.next.plugins.SendOtoroshiHeadersBack" : {
        "description" : "Plugin to enrich response header with otoroshi infos",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.accesslog.AccessLogJson" : {
        "description" : "Plugin that log access in json",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.Tenant" : {
        "description" : "An otoroshi model for an organization (otoroshi-ui)",
        "type" : "object",
        "properties" : {
          "description" : {
            "description" : "Entity description",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "name" : {
            "description" : "Entity name",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "id" : {
            "description" : "Entity id",
            "$ref" : "#/components/schemas/otoroshi.models.TenantId"
          }
        }
      },
      "otoroshi.models.BackOfficeUser" : {
        "description" : "User session for otoroshi-ui admins",
        "type" : "object",
        "properties" : {
          "randomId" : {
            "description" : "Session user random id",
            "type" : "string"
          },
          "profile" : {
            "description" : "Session user profile",
            "type" : "object"
          },
          "authConfigId" : {
            "description" : "Session created from auth module id",
            "type" : "string"
          },
          "rights" : {
            "description" : "Session user rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "createdAt" : {
            "description" : "Creation date for the session",
            "type" : "number"
          },
          "token" : {
            "description" : "Session tokens (only if OAuth/OIDC)",
            "type" : "object"
          },
          "name" : {
            "description" : "Session user name",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "email" : {
            "description" : "User email",
            "type" : "string"
          },
          "simpleLogin" : {
            "description" : "Session generated from a simple login module (like basic or ldap)",
            "type" : "boolean"
          },
          "expiredAt" : {
            "description" : "Expiration date for the session",
            "type" : "number"
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "lastRefresh" : {
            "description" : "Last refresh of the session (OAuth with refresh tokens)",
            "type" : "number"
          }
        }
      },
      "otoroshi.next.plugins.NoopSpanExporter" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.GeolocationSettings" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.IpStackGeolocationSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.MaxmindGeolocationSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.NoneGeolocationSettings"
        } ]
      },
      "otoroshi.events.AlertEvent" : {
        "type" : "object",
        "description" : "Alert trail event"
      },
      "otoroshi.models.ApiDescriptor" : {
        "description" : "Represent if a service exposes an API with an optional url to an openapi descriptor",
        "type" : "object",
        "properties" : {
          "exposeApi" : {
            "description" : "Is this an API",
            "type" : "boolean"
          },
          "openApiDescriptorUrl" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "openapi descriptor url"
          }
        }
      },
      "otoroshi.auth.SessionCookieValues" : {
        "description" : "The configuration for session cookie",
        "type" : "object",
        "properties" : {
          "httpOnly" : {
            "description" : "Is cookie accessible on server side only",
            "type" : "boolean"
          },
          "secure" : {
            "description" : "Is cookie for https only",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesIngressToDescriptor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.RBAC" : {
        "description" : "Plugin to apply RBAC",
        "type" : "object",
        "properties" : {
          "roles" : {
            "description" : "roles field name",
            "type" : "string"
          },
          "allow" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed roles"
          },
          "allow_all" : {
            "description" : "Needs to have all allowed roles",
            "type" : "boolean"
          },
          "role_prefix" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional value that will prefix roles in tokens"
          },
          "jwt_path" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Where to find role field in jwt token user"
          },
          "apikey_path" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Where to find role field in an apikey"
          },
          "deny" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Denied roles"
          },
          "user_path" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Where to find role field in a user"
          },
          "deny_all" : {
            "description" : "Needs to have all denied roles",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.utils.letsencrypt.LetsEncryptSettings" : {
        "description" : "Settings for connection to a let's encrypt (or ACME) server",
        "type" : "object",
        "properties" : {
          "privateKey" : {
            "description" : "Let's encrypt (ACME) private key",
            "type" : "string"
          },
          "contacts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Let's encrypt (ACME) contacts"
          },
          "emails" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Let's encrypt (ACME) contact emails"
          },
          "enabled" : {
            "description" : "Let's encrypt (ACME) enabled",
            "type" : "boolean"
          },
          "publicKey" : {
            "description" : "Let's encrypt (ACME) public key",
            "type" : "string"
          },
          "server" : {
            "description" : "Let's encrypt (ACME) server",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.models.NgTlsConfig" : {
        "description" : "TLS settings for the http client",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Enabled",
            "type" : "boolean"
          },
          "certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          },
          "loose" : {
            "description" : "Loose verification",
            "type" : "boolean"
          },
          "trust_all" : {
            "description" : "Trust any certificate",
            "type" : "boolean"
          },
          "trusted_certs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Trusted cert. ids"
          }
        }
      },
      "otoroshi.models.ApiKeyRouteMatcher" : {
        "description" : "Routing settings based on apikeys metadata and tags",
        "type" : "object",
        "properties" : {
          "oneTagIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "outing if one tag presents in apikey"
          },
          "noneMetaKeysIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if none meta keys presents in apikey"
          },
          "oneMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if one meta presents in apikey"
          },
          "oneMetaKeyIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if one meta key presents in apikey"
          },
          "allMetaKeysIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if all meta keys presents in apikey"
          },
          "noneTagIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if none tags presents in apikey"
          },
          "allTagsIn" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Routing if all tags presents in apikey"
          },
          "allMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if all meta presents in apikey"
          },
          "noneMetaIn" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Routing if none meta presents in apikey"
          }
        }
      },
      "otoroshi.next.plugins.SOAPAction" : {
        "description" : "Plugin to call SOAP service",
        "type" : "object",
        "properties" : {
          "jq_response_filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter to transform response body"
          },
          "jq_request_filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter to transform request body"
          },
          "preserve_query" : {
            "description" : "Preserve query params",
            "type" : "boolean"
          },
          "convert_request_body_to_xml" : {
            "description" : "Convert json body to xml",
            "type" : "boolean"
          },
          "charset" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The body charset"
          },
          "url" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "SOAP endpoint"
          },
          "action" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The soap action if one"
          },
          "envelope" : {
            "description" : "The soap envelope to call",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.models.StoredNgBackendDataStore" : {
        "description" : "The datastore for backend",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgApikeyExtractorJwt" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "cookie_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the cookies to extract"
          },
          "key_pair_signed" : {
            "description" : "Is it asymmetricaly signed",
            "type" : "boolean"
          },
          "query_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the query param to extract"
          },
          "secret_signed" : {
            "description" : "Is it symmetricaly signed",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          },
          "include_request_attrs" : {
            "description" : "Does the jwt token need to include current request attributes to work",
            "type" : "boolean"
          },
          "header_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the header to extract"
          }
        }
      },
      "otoroshi.models.Outage" : {
        "description" : "A snowmonkey outage model",
        "type" : "object",
        "properties" : {
          "descriptorName" : {
            "description" : "Service descriptor name",
            "type" : "string"
          },
          "descriptorId" : {
            "description" : "Service descriptor id",
            "type" : "string"
          },
          "until" : {
            "description" : "Outage ending date",
            "type" : "string"
          },
          "duration" : {
            "description" : "Outage duration",
            "type" : "number"
          },
          "startedAt" : {
            "description" : "Outage starting date",
            "type" : "number"
          }
        }
      },
      "otoroshi.next.plugins.XForwardedHeaders" : {
        "description" : "Plugin to add X-Forwarded headers in a request",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.utils.ConcurrentMutableTypedMap" : {
        "description" : "A concurrent map with typed keys",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.biscuit.PubKeyBiscuitToken" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "token" : {
            "description" : "the current token",
            "type" : "string"
          }
        }
      },
      "otoroshi.utils.mailer.SendgridSettings" : {
        "description" : "Settings for the sendgrid mailer",
        "type" : "object",
        "properties" : {
          "apiKey" : {
            "description" : "Sendgrid apikey",
            "type" : "string"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.gateway.CircuitBreakersHolder" : {
        "description" : "Internal component to hold current circuit breakers and their configuration",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgAuthModuleConfig" : {
        "description" : "Configuration for AuthModule",
        "type" : "object",
        "properties" : {
          "module" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The id of the auth. module"
          },
          "pass_with_apikey" : {
            "description" : "Pass the request if an apikey is present",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.NgChaosConfig" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : {
          "large_request_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgLargeRequestFaultConfig"
            } ],
            "description" : "Config. for large request body faults"
          },
          "large_response_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgLargeResponseFaultConfig"
            } ],
            "description" : "Config. for large response faults"
          },
          "latency_injection_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgLatencyInjectionFaultConfig"
            } ],
            "description" : "Config. for latency injection faults"
          },
          "bad_responses_fault_config" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgBadResponsesFaultConfig"
            } ],
            "description" : "Config. for bad responses faults"
          }
        }
      },
      "ByteStreamBody" : {
        "type" : "string",
        "description" : ""
      },
      "play.api.libs.ws.DefaultWSProxyServer" : {
        "type" : "object",
        "properties" : {
          "host" : {
            "type" : "string",
            "description" : "The hostname of the proxy server."
          },
          "port" : {
            "type" : "string",
            "description" : "The port of the proxy server."
          },
          "protocol" : {
            "type" : "string",
            "description" : "The protocol of the proxy server.  Use \"http\" or \"https\".  Defaults to \"http\" if not specified."
          },
          "principal" : {
            "type" : "string",
            "description" : "The principal (aka username) of the credentials for the proxy server."
          },
          "password" : {
            "type" : "string",
            "description" : "The password for the credentials for the proxy server."
          },
          "ntlmDomain" : {
            "type" : "string",
            "description" : "The ntlm domain for the proxy server."
          },
          "encoding" : {
            "type" : "string",
            "description" : "The realm's charset."
          },
          "nonProxyHosts" : {
            "type" : "string",
            "description" : "The non proxied hosts"
          }
        },
        "description" : "Proxy server"
      },
      "otoroshi.plugins.loggers.BodyLogger" : {
        "description" : "Plugin to log http bodies",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.biscuit.AccessValidatorContext" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "ctx" : {
            "description" : "Current context",
            "$ref" : "#/components/schemas/otoroshi.script.AccessContext"
          }
        }
      },
      "otoroshi.next.plugins.MockResponse" : {
        "description" : "Plugin to mock responses",
        "type" : "object",
        "properties" : {
          "path" : {
            "description" : "The path for the response",
            "type" : "string"
          },
          "body" : {
            "description" : "The body of the response",
            "type" : "string"
          },
          "status" : {
            "format" : "int32",
            "description" : "The status of the response",
            "type" : "integer"
          },
          "method" : {
            "description" : "The method for the response",
            "type" : "string"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The headers of the response"
          }
        }
      },
      "PemCertificateBody" : {
        "type" : "string",
        "description" : "PEM encoded certificate"
      },
      "otoroshi.next.plugins.GlobalMaintenanceMode" : {
        "description" : "Plugin for maintainance mode",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.LargeRequestFaultConfig" : {
        "description" : "Settings for a large request fault (chaos engineering)",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "additionalRequestSize" : {
            "format" : "int32",
            "description" : "The size added to the request body in bytes. Added payload will be spaces only.",
            "type" : "integer"
          }
        }
      },
      "otoroshi.next.models.NgBackend" : {
        "description" : "A backend representation with it's targets, load balancing and general settings",
        "type" : "object",
        "properties" : {
          "root" : {
            "description" : "The root path of the backend or the full rewrite path",
            "type" : "string"
          },
          "health_check" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/otoroshi.models.HealthCheck"
            } ],
            "description" : "Healthcheck config og the backend"
          },
          "client" : {
            "description" : "Client config. of the backend",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgClientConfig"
          },
          "load_balancing" : {
            "description" : "Loadbalancing config og the backend",
            "$ref" : "#/components/schemas/otoroshi.models.LoadBalancing"
          },
          "rewrite" : {
            "description" : "Does the backend performs a full url rewrite ?",
            "type" : "boolean"
          },
          "target_refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List of NgStoredBackend ids"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgTarget"
            },
            "description" : "The targets of the backend"
          }
        }
      },
      "ExperimentalFormResponse" : {
        "type" : "object",
        "description" : "The representation of a form to configure a plugin or an entity"
      },
      "otoroshi.next.plugins.NgApikeyExtractorClientId" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "header_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the header to extract"
          },
          "query_name" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "The name of the query param to extract"
          },
          "enabled" : {
            "description" : "Is it enabled",
            "type" : "boolean"
          }
        }
      },
      "OutagesList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.Outage"
        }
      },
      "otoroshi.plugins.mirror.MirroringPluginConfig" : {
        "description" : "Configuration for MirroringPlugin",
        "type" : "object",
        "properties" : {
          "conf" : {
            "description" : "Current conf",
            "type" : "object"
          }
        }
      },
      "PluginDescriptionsResponse" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PluginDescription"
        }
      },
      "otoroshi.script.PreRoutingRef" : {
        "description" : "References to pre-routing plugins",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "pre-routing plugins enabled",
            "type" : "boolean"
          },
          "excludedPatterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Excluded paths"
          },
          "refs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Enabled plugins"
          },
          "config" : {
            "description" : "pre-routing plugins configuration",
            "type" : "object"
          }
        }
      },
      "otoroshi.plugins.biscuit.BiscuitConfig" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "facts" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit facts"
          },
          "publicKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Biscuit public key for validation"
          },
          "resources" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit resources"
          },
          "enforce" : {
            "description" : "Enforce biscuit validation",
            "type" : "boolean"
          },
          "extractorName" : {
            "description" : "The name for the location",
            "type" : "string"
          },
          "checks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit checks"
          },
          "extractor" : {
            "description" : "Biscuit location (header, cookie, query)",
            "type" : "string"
          },
          "revocation_ids" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Ids of revoked tokens"
          },
          "rules" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Biscuit rules"
          }
        }
      },
      "otoroshi.next.plugins.NgJwtVerificationConfig" : {
        "description" : "Configuration for JwtVerification",
        "type" : "object",
        "properties" : {
          "verifiers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Id of the jwt verifiers"
          }
        }
      },
      "otoroshi.next.plugins.W3CTracingConfig" : {
        "description" : "Configuration for W3CTracing",
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "Kind of distributed tracing collector (jaeger, zipkin)",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.W3CTracingConfigKind"
          },
          "endpoint" : {
            "description" : "Endpoint of distributed tracing collection",
            "type" : "string"
          },
          "timeout" : {
            "format" : "int64",
            "description" : "Request timeout",
            "type" : "integer"
          },
          "baggage" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Support baggage"
          }
        }
      },
      "otoroshi.next.models.NgCacheConnectionSettings" : {
        "description" : "The settings for http cached connection at host level",
        "type" : "object",
        "properties" : {
          "queue_size" : {
            "format" : "int32",
            "description" : "How much request can be queue before dropping it",
            "type" : "integer"
          },
          "enabled" : {
            "description" : "Is cached connection enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.geoloc.IpStackGeolocationHelper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.DataExporterConfig" : {
        "description" : "Module to export otoroshi specific events to whatever destination you want",
        "type" : "object",
        "properties" : {
          "desc" : {
            "description" : "Description",
            "type" : "string"
          },
          "_loc" : {
            "description" : "location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "bufferSize" : {
            "format" : "int32",
            "description" : "buffer size",
            "type" : "integer"
          },
          "jsonWorkers" : {
            "format" : "int32",
            "description" : "nb workers",
            "type" : "integer"
          },
          "groupDuration" : {
            "description" : "duration",
            "type" : "number"
          },
          "groupSize" : {
            "format" : "int32",
            "description" : "Group size",
            "type" : "integer"
          },
          "type" : {
            "description" : "Type of data exporter",
            "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfigType"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          },
          "sendWorkers" : {
            "format" : "int32",
            "description" : "send workers",
            "type" : "integer"
          },
          "id" : {
            "description" : "Id",
            "type" : "string"
          },
          "name" : {
            "description" : "Name",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata"
          },
          "config" : {
            "description" : "Data Exporter config",
            "$ref" : "#/components/schemas/otoroshi.models.Exporter"
          },
          "projection" : {
            "description" : "projection",
            "type" : "object"
          },
          "enabled" : {
            "description" : "Boolean",
            "type" : "boolean"
          },
          "filtering" : {
            "description" : "filtering",
            "$ref" : "#/components/schemas/otoroshi.models.DataExporterConfigFiltering"
          }
        }
      },
      "otoroshi.next.plugins.NgEndlessHttpResponseConfig" : {
        "description" : "Configuration for EndlessHttpResponse",
        "type" : "object",
        "properties" : {
          "finger" : {
            "description" : "Using emoji instead of 0 in the response",
            "type" : "boolean"
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "IP address that will get endless responses"
          }
        }
      },
      "otoroshi.ssl.pki.models.GenKeyPairResponse" : {
        "description" : "Response for a keypair generation operation",
        "type" : "object",
        "properties" : {
          "publicKey" : {
            "description" : "Public key (PEM encoded)",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (PEM encoded)",
            "type" : "string"
          }
        }
      },
      "BulkBody" : {
        "type" : "string",
        "description" : "Body composed of stringified JSON lines, each one representing an entity"
      },
      "otoroshi.plugins.discovery.DiscoveryJob" : {
        "description" : "Plugin that add services discovery to otoroshi",
        "type" : "object",
        "properties" : { }
      },
      "PemCsrBody" : {
        "type" : "string",
        "description" : "PEM encoded csr"
      },
      "Unknown" : {
        "type" : "object",
        "description" : "value used by the openapi generator when no matching type found. Should be fixed in a near future."
      },
      "otoroshi.plugins.authcallers.OAuth2CallerConfig" : {
        "description" : "Configuration for OAuth2Caller",
        "type" : "object",
        "properties" : {
          "method" : {
            "description" : "Http method to talk with the id server",
            "type" : "string"
          },
          "url" : {
            "description" : "Url of the id server",
            "type" : "string"
          },
          "tlsConfig" : {
            "description" : "Current tls config to talk to the id server",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "kind" : {
            "description" : "client_credentials or password",
            "$ref" : "#/components/schemas/otoroshi.plugins.authcallers.OAuth2Kind"
          },
          "password" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional password for password flow"
          },
          "cacheTokenSeconds" : {
            "description" : "How long will the token be cached before reaching out to the id server",
            "type" : "number"
          },
          "headerValueFormat" : {
            "description" : "The header format to pass the token",
            "type" : "string"
          },
          "user" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional user for password flow"
          },
          "headerName" : {
            "description" : "The header name to pass the token",
            "type" : "string"
          },
          "clientSecret" : {
            "description" : "The client secret",
            "type" : "string"
          },
          "scope" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional request scope"
          },
          "jsonPayload" : {
            "description" : "Use a json payload instead of a urlformencoded one",
            "type" : "boolean"
          },
          "clientId" : {
            "description" : "The client id",
            "type" : "string"
          },
          "audience" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "An optional audiance"
          }
        }
      },
      "otoroshi.next.plugins.MissingHeadersOut" : {
        "description" : "Plugin to add headers to a response",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers added to the response if missing"
          }
        }
      },
      "otoroshi.plugins.oidc.ThirdPartyApiKeyConfigType" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.authcallers.BasicAuthCaller" : {
        "description" : "Plugin that can call a basic auth. backend",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.Keys" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.CustomHeadersAuthConstraints" : {
        "description" : "Settings to extract apikey from a custom headers",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Constraint enabled",
            "type" : "boolean"
          },
          "clientIdHeaderName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to find client_id"
          },
          "clientSecretHeaderName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Header name to find client_secret"
          }
        }
      },
      "otoroshi.models.TlsSettings" : {
        "description" : "Global TLS settings. The default domain that will be picked if no certificate matches the current request",
        "type" : "object",
        "properties" : {
          "trustedCAsServer" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "List for CAs trusted by otoroshi when performing TLS termination"
          },
          "includeJdkCaClient" : {
            "description" : "Use known JDK CAs to build trust when performing request from otoroshi to backends",
            "type" : "boolean"
          },
          "randomIfNotFound" : {
            "description" : "Use a random one",
            "type" : "boolean"
          },
          "defaultDomain" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Default domain to choose if not found from current certificates"
          },
          "includeJdkCaServer" : {
            "description" : "Use known JDK CAs to build trust for incoming request",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.models.MetricsSettings" : {
        "description" : "Settings for metrics labels",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "labels" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Exposed labels"
          }
        }
      },
      "otoroshi.models.Sign" : {
        "description" : "jwt token re-sign policy settings",
        "type" : "object",
        "properties" : {
          "algoSettings" : {
            "description" : "Re-signing jwt token settings",
            "$ref" : "#/components/schemas/otoroshi.models.AlgoSettings"
          },
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          }
        }
      },
      "otoroshi.plugins.mirror.MirroringEvent" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "ctx" : {
            "description" : "Current request context",
            "$ref" : "#/components/schemas/otoroshi.plugins.mirror.RequestContext"
          }
        }
      },
      "otoroshi.models.PassThrough" : {
        "description" : "jwt token validation policicy that just validate the token",
        "type" : "object",
        "properties" : {
          "verificationSettings" : {
            "description" : "Verification settings",
            "$ref" : "#/components/schemas/otoroshi.models.VerificationSettings"
          },
          "type" : {
            "description" : "the kind of strategy",
            "type" : "string",
            "enum" : [ "PassThrough", "Sign", "Transform", "DefaultToken" ]
          }
        }
      },
      "otoroshi.plugins.external.ExternalHttpValidatorConfig" : {
        "description" : "Configuration for ExternalHttpValidator",
        "type" : "object",
        "properties" : {
          "config" : {
            "description" : "Configuration for external http validation",
            "type" : "object"
          }
        }
      },
      "otoroshi.plugins.geoloc.MaxMindGeolocationInfoExtractor" : {
        "description" : "Plugin that extracts geolocation based on maxmind db",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgHeaderNamesConfig" : {
        "description" : "Configuration for headers plugins",
        "type" : "object",
        "properties" : {
          "names" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Name of the headers"
          }
        }
      },
      "otoroshi.events.PulsarConfig" : {
        "description" : "Settings for connection to a pulsar cluster",
        "type" : "object",
        "properties" : {
          "mtlsConfig" : {
            "description" : "TLS config to access the cluster",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          },
          "tlsTrustCertsFilePath" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Trusted cert path"
          },
          "namespace" : {
            "description" : "Pulsar namespace",
            "type" : "string"
          },
          "topic" : {
            "description" : "Pulsar topic",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of exporter",
            "type" : "string",
            "enum" : [ "elastic", "webhook", "kafka", "pulsar", "file", "mailer", "custom", "console", "metrics" ]
          },
          "uri" : {
            "description" : "Pulsar cluster url",
            "type" : "string"
          },
          "tenant" : {
            "description" : "Pulsar tenant",
            "type" : "string"
          }
        }
      },
      "otoroshi.auth.SamlAuthModuleConfig" : {
        "description" : "Configuration of SAML Authentication module",
        "type" : "object",
        "properties" : {
          "validateSignature" : {
            "description" : "Indicates if SAML response signature has to be validate when otoroshi got SAML responses from identity provider",
            "type" : "boolean"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Metadata of the SAML module"
          },
          "ssoProtocolBinding" : {
            "description" : "Protocol binding used to send login request to identity provider",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLProtocolBinding"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "validatingCertificates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Certificates used to validate SAML response signature"
          },
          "signature" : {
            "description" : "Algorithm and canonicalization method to sign SAML documents",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLSignature"
          },
          "credentials" : {
            "description" : "Certificates and private keys to sign and encrypt SAML documents/assertions",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLCredentials"
          },
          "validateAssertions" : {
            "description" : "Indicates if assertions have to be validate when otoroshi got SAML responses from identity provider",
            "type" : "boolean"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "userValidators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.UserValidator"
            },
            "description" : "Validators that will check if the current user is authorized after successful login"
          },
          "_loc" : {
            "description" : "Location of the SAML module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "issuer" : {
            "description" : "Issuer of the SAML requests",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "SAML module tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "Max age of the session",
            "type" : "integer"
          },
          "usedNameIDAsEmail" : {
            "description" : "Is name ID used as email ?",
            "type" : "boolean"
          },
          "singleLogoutUrl" : {
            "description" : "URL used by otoroshi to disconnect users from identity provider",
            "type" : "string"
          },
          "name" : {
            "description" : "Name of the SAML module",
            "type" : "string"
          },
          "emailAttributeName" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Field name to find email in user profile returned by identity provider"
          },
          "singleSignOnUrl" : {
            "description" : "URL used by otoroshi to redirect users to identity provider login page",
            "type" : "string"
          },
          "nameIDFormat" : {
            "description" : "Format of the name ID",
            "$ref" : "#/components/schemas/otoroshi.auth.NameIDFormat"
          },
          "singleLogoutProtocolBinding" : {
            "description" : "Protocol binding used by identity provider to logout users",
            "$ref" : "#/components/schemas/otoroshi.auth.SAMLProtocolBinding"
          },
          "id" : {
            "description" : "Id of the SAML Auth module",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the SAML Auth module",
            "type" : "string"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesCRDsJob" : {
        "description" : "Plugin to import entities from kubernetes CRDs",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.Restrictions" : {
        "description" : "Http requests restrictions for a service or an apikey",
        "type" : "object",
        "properties" : {
          "forbidden" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.RestrictionPath"
            },
            "description" : "Forbidden paths (return 403)"
          },
          "allowed" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.RestrictionPath"
            },
            "description" : "Allowed paths"
          },
          "notFound" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.RestrictionPath"
            },
            "description" : "Not found paths (return 404)"
          },
          "allowLast" : {
            "description" : "Evalute allowed paths after everything else",
            "type" : "boolean"
          },
          "enabled" : {
            "description" : "Restrictions enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.NgLargeRequestFaultConfig" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of requests impacted",
            "type" : "number"
          },
          "additional_request_size" : {
            "format" : "int32",
            "description" : "Amount of bytes added of the request body",
            "type" : "integer"
          }
        }
      },
      "otoroshi.auth.PKCEConfig" : {
        "description" : "Settings for PKCE challenge (OAuth 2.1)",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "Is PKCE challenge enabled",
            "type" : "boolean"
          },
          "algorithm" : {
            "description" : "Hashing algorithm used in PKCE challenge",
            "type" : "string"
          }
        }
      },
      "otoroshi.events.StatsdConfig" : {
        "description" : "Settings for connection to a statsd agent",
        "type" : "object",
        "properties" : {
          "datadog" : {
            "description" : "Datadog agent",
            "type" : "boolean"
          },
          "host" : {
            "description" : "The host of the StatsD agent",
            "type" : "string"
          },
          "port" : {
            "format" : "int32",
            "description" : "The port of the StatsD agent",
            "type" : "integer"
          }
        }
      },
      "otoroshi.next.plugins.RBACConfig" : {
        "description" : "Configuration for RBAC",
        "type" : "object",
        "properties" : {
          "roles" : {
            "description" : "roles field name",
            "type" : "string"
          },
          "allow" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Allowed roles"
          },
          "allow_all" : {
            "description" : "Needs to have all allowed roles",
            "type" : "boolean"
          },
          "role_prefix" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Optional value that will prefix roles in tokens"
          },
          "jwt_path" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Where to find role field in jwt token user"
          },
          "apikey_path" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Where to find role field in an apikey"
          },
          "deny" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Denied roles"
          },
          "user_path" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Where to find role field in a user"
          },
          "deny_all" : {
            "description" : "Needs to have all denied roles",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.biscuit.VerificationContext" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgCanarySettings" : {
        "description" : "Configuration for CanaryMode",
        "type" : "object",
        "properties" : {
          "traffic" : {
            "format" : "double",
            "description" : "Traffic ratio for canary targets",
            "type" : "number"
          },
          "root" : {
            "description" : "Root for canary targets",
            "type" : "string"
          },
          "targets" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.models.NgTarget"
            },
            "description" : "Canary targets"
          }
        }
      },
      "otoroshi.models.JWKSAlgoSettings" : {
        "description" : "Settings to use keypair from JWKS for verification",
        "type" : "object",
        "properties" : {
          "kty" : {
            "description" : "Key type",
            "type" : "string"
          },
          "proxy" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "$ref" : "#/components/schemas/play.api.libs.ws.WSProxyServer"
            } ],
            "description" : "Web proxy for http client"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Http header when fetching JWKS"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          },
          "ttl" : {
            "description" : "Cache ttl",
            "type" : "number"
          },
          "url" : {
            "description" : "JWKS url",
            "type" : "string"
          },
          "timeout" : {
            "description" : "Timeout when fetching JWKS",
            "type" : "number"
          },
          "tlsConfig" : {
            "description" : "TLS config",
            "$ref" : "#/components/schemas/otoroshi.utils.http.MtlsConfig"
          }
        }
      },
      "otoroshi.plugins.hmac.HMACUtils" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.authcallers.ForceRetryException" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.models.RoutingStrategy" : {
        "description" : "The routing strategy",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.IpAddressBlockList" : {
        "description" : "Plugin to block only some ip addresses",
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "The list of blocked ip addresses of cidr blocks"
          }
        }
      },
      "otoroshi.plugins.biscuit.SealedBiscuitToken" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "token" : {
            "description" : "the current token",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.IpFiltering" : {
        "description" : "Settings for ip address filtering for a service or globally",
        "type" : "object",
        "properties" : {
          "whitelist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Whitelisted IP addresses"
          },
          "blacklist" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Blacklisted IP addresses"
          }
        }
      },
      "otoroshi.plugins.quotas.ServiceQuotas" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.jobs.kubernetes.KubernetesCertSyncJob" : {
        "description" : "Plugin to sync kubernetes certificates with otoroshi",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.ssl.pki.models.GenCsrResponse" : {
        "description" : "Response for a csr generation operation",
        "type" : "object",
        "properties" : {
          "csr" : {
            "description" : "CSR (PEM encoded)",
            "type" : "string"
          },
          "publicKey" : {
            "description" : "Public key (PEM encoded)",
            "type" : "string"
          },
          "privateKey" : {
            "description" : "Private key (PEM encoded)",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.models.NgMatchedRoute" : {
        "description" : "A matched route in the new router",
        "type" : "object",
        "properties" : {
          "route" : {
            "description" : "Current matched route",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgRoute"
          },
          "path" : {
            "description" : "Current matched path",
            "type" : "string"
          },
          "no_more_segments" : {
            "description" : "Is the path fully matched",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.auth.SAMLProtocolBinding" : {
        "description" : "Protocol binding used during SAML requests",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.MaxmindGeolocationSettings" : {
        "description" : "Settings for connection to a maxmind db",
        "type" : "object",
        "properties" : {
          "path" : {
            "description" : "Maxmlind db file path",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of geolocation",
            "type" : "string",
            "enum" : [ "none", "maxmind", "ipstack" ]
          },
          "enabled" : {
            "description" : "Geolocation using maxmind db enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.NgLargeResponseFaultConfig" : {
        "description" : "Configuration for SnowMonkeyChaos",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The ratio of responses impacted",
            "type" : "number"
          },
          "additional_response_size" : {
            "format" : "int32",
            "description" : "Amount of bytes added of the response body",
            "type" : "integer"
          }
        }
      },
      "otoroshi.models.LatencyInjectionFaultConfig" : {
        "description" : "Settings for a latency injection fault (chaos engineering)",
        "type" : "object",
        "properties" : {
          "ratio" : {
            "format" : "double",
            "description" : "The percentage of requests affected by this fault. Value should be between 0.0 and 1.0",
            "type" : "number"
          },
          "from" : {
            "description" : "The start range of latency added to the request",
            "type" : "number"
          },
          "to" : {
            "description" : "The end range of latency added to the request",
            "type" : "number"
          }
        }
      },
      "otoroshi.plugins.oidc.OIDCAccessTokenAsApikey" : {
        "description" : "Plugin to use OIDC token as apikey",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.auth.UserValidator" : {
        "description" : "Validate if a user is valid or not (for auth) based on a JsonPath and an expected value",
        "type" : "object",
        "properties" : {
          "path" : {
            "description" : "The JSON Path that will be checked",
            "type" : "string"
          },
          "value" : {
            "description" : "The expected value at the previously defined path",
            "type" : "object"
          }
        }
      },
      "otoroshi.next.plugins.NgIpAddressesConfig" : {
        "description" : "Configuration for ip address related plugins",
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Ip addresses targeted"
          }
        }
      },
      "otoroshi.models.RSAKPAlgoSettings" : {
        "description" : "Settings to use RSA signing algorithm from a certificate keypair",
        "type" : "object",
        "properties" : {
          "size" : {
            "format" : "int32",
            "description" : "SHA function size",
            "type" : "integer"
          },
          "certId" : {
            "description" : "Certificate id",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.utils.mailer.MailerSettings" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.ConsoleMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.GenericMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailgunSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.MailjetSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.NoneMailerSettings"
        }, {
          "$ref" : "#/components/schemas/otoroshi.utils.mailer.SendgridSettings"
        } ]
      },
      "otoroshi.auth.Oauth1ModuleConfig" : {
        "description" : "Configuration of OAuth 1.0 module",
        "type" : "object",
        "properties" : {
          "profileURL" : {
            "description" : "URL fetch by otoroshi to get user information from identity provider",
            "type" : "string"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "The metadata of the OAuth 1 module"
          },
          "authorizeURL" : {
            "description" : "The authorize URL used to initiates the authorization flow that authenticates the user with the Identity Provider",
            "type" : "string"
          },
          "requestTokenURL" : {
            "description" : "URL fetch to get a request token during the first step of the authorization OAuth 1 flow",
            "type" : "string"
          },
          "sessionCookieValues" : {
            "description" : "Settings for the session cookie",
            "$ref" : "#/components/schemas/otoroshi.auth.SessionCookieValues"
          },
          "type" : {
            "description" : "the type of the module",
            "type" : "string",
            "enum" : [ "saml", "oauth1", "oauth2", "ldap", "basic" ]
          },
          "httpMethod" : {
            "description" : "Method used to fetch access and request token",
            "$ref" : "#/components/schemas/otoroshi.auth.OAuth1Provider"
          },
          "userValidators" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.auth.UserValidator"
            },
            "description" : "Validators that will check if the current user is authorized after successful login"
          },
          "_loc" : {
            "description" : "The location of the OAuth 1 module",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "OAuth module tags"
          },
          "sessionMaxAge" : {
            "format" : "int32",
            "description" : "Max age of the session",
            "type" : "integer"
          },
          "consumerSecret" : {
            "description" : "Client secret obtained from identity provider configuration",
            "type" : "string"
          },
          "accessTokenURL" : {
            "description" : "Endpoint requested by otoroshi to get access token during the authorization OAuth1 flow",
            "type" : "string"
          },
          "name" : {
            "description" : "The name of the OAuth 1 module",
            "type" : "string"
          },
          "rightsOverride" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/otoroshi.models.UserRights"
            },
            "description" : "Overrides user rights of users connected by OAuth1 module"
          },
          "callbackURL" : {
            "description" : "The location where the identity provider returns a browser after the user finishes authenticating with their IDP",
            "type" : "string"
          },
          "id" : {
            "description" : "Id of the module",
            "type" : "string"
          },
          "consumerKey" : {
            "description" : "Client ID obtained on identity provider",
            "type" : "string"
          },
          "desc" : {
            "description" : "Description of the oauth 1 module",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.JsonToXmlRequest" : {
        "description" : "Plugin to transform json body to xml",
        "type" : "object",
        "properties" : {
          "filter" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "JQ filter for request"
          }
        }
      },
      "otoroshi.plugins.defer.DeferPlugin" : {
        "description" : "Plugin that defers http responses",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.StaticResponse" : {
        "description" : "Plugin to return static responses",
        "type" : "object",
        "properties" : {
          "status" : {
            "format" : "int32",
            "description" : "Status of the response",
            "type" : "integer"
          },
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Headers of the response"
          },
          "body" : {
            "description" : "Body of the response",
            "type" : "string"
          }
        }
      },
      "otoroshi.next.plugins.OverrideHost" : {
        "description" : "Plugin to override backend host header",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgPublicPrivatePathsConfig" : {
        "description" : "Configuration for PublicPrivatePaths",
        "type" : "object",
        "properties" : {
          "strict" : {
            "description" : "apikey only",
            "type" : "boolean"
          },
          "public_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Paths that should not have user or apikey to pass"
          },
          "private_patterns" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Paths that should have user or apikey to pass"
          }
        }
      },
      "otoroshi.models.InQueryParam" : {
        "description" : "JWT token location (query param)",
        "type" : "object",
        "properties" : {
          "name" : {
            "description" : "Query param name",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of location",
            "type" : "string",
            "enum" : [ "InQueryParam", "InHeader", "InCookie" ]
          }
        }
      },
      "otoroshi.plugins.clientcert.ClientCertChainHeader" : {
        "description" : "Plugin that can pass client certificates as header to the backends",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.security.SecurityTxt" : {
        "description" : "Plugin that serves /.well-known/security.txt resources",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.EntityLocation" : {
        "description" : "Location of any entity (teams and organization)",
        "type" : "object",
        "properties" : {
          "tenant" : {
            "description" : "Organization of the current entity",
            "$ref" : "#/components/schemas/otoroshi.models.TenantId"
          },
          "teams" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.models.TeamId"
            },
            "description" : "Teams of the current entity"
          }
        }
      },
      "otoroshi.next.plugins.RoutingRestrictions" : {
        "description" : "Configuration for NgRestrictions",
        "type" : "object",
        "properties" : {
          "allow_last" : {
            "description" : "Evaluates allowed paths after forbidden and not found",
            "type" : "boolean"
          },
          "allowed" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgRestrictionPath"
            },
            "description" : "Allowed paths"
          },
          "forbidden" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgRestrictionPath"
            },
            "description" : "Forbidden paths"
          },
          "not_found" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.next.plugins.NgRestrictionPath"
            },
            "description" : "Not found paths"
          }
        }
      },
      "otoroshi.next.plugins.GlobalPerIpAddressThrottling" : {
        "description" : "Plugin for ip address throttling",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.events.AuditEvent" : {
        "type" : "object",
        "description" : "Audit trail event"
      },
      "otoroshi.plugins.izanami.IzanamiProxy" : {
        "description" : "Plugin to proxy izanami",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.ErrorTemplate" : {
        "description" : "Service descriptor error template",
        "type" : "object",
        "properties" : {
          "template50x" : {
            "description" : "The 50x error html template",
            "type" : "string"
          },
          "templateMaintenance" : {
            "description" : "The maintenance html template",
            "type" : "string"
          },
          "templateBuild" : {
            "description" : "The build html template",
            "type" : "string"
          },
          "serviceId" : {
            "description" : "Service id for this template",
            "type" : "string"
          },
          "messages" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Map of messages"
          },
          "template40x" : {
            "description" : "The 40x error html template",
            "type" : "string"
          }
        }
      },
      "otoroshi.utils.mailer.NoneMailerSettings" : {
        "description" : "Settings for the /dev/null mailer",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          }
        }
      },
      "otoroshi.next.plugins.EndlessHttpResponse" : {
        "description" : "Plugin for endless response",
        "type" : "object",
        "properties" : {
          "finger" : {
            "description" : "Using emoji instead of 0 in the response",
            "type" : "boolean"
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "IP address that will get endless responses"
          }
        }
      },
      "otoroshi.models.SecComInfoTokenVersion" : {
        "type" : "string",
        "enum" : [ "Legacy", "Latest" ],
        "description" : "Version of the info token"
      },
      "otoroshi.plugins.biscuit.BiscuitHelper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "BulkPatchBody" : {
        "type" : "array",
        "description" : "Body composed of stringified JSON-Patch lines, each one representing updates to an entity",
        "items" : {
          "$ref" : "#/components/schemas/PatchDocument"
        }
      },
      "otoroshi.next.plugins.W3CTracing" : {
        "description" : "Plugin to have distributed tracing",
        "type" : "object",
        "properties" : {
          "kind" : {
            "description" : "Kind of distributed tracing collector (jaeger, zipkin)",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.W3CTracingConfigKind"
          },
          "endpoint" : {
            "description" : "Endpoint of distributed tracing collection",
            "type" : "string"
          },
          "timeout" : {
            "format" : "int64",
            "description" : "Request timeout",
            "type" : "integer"
          },
          "baggage" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Support baggage"
          }
        }
      },
      "otoroshi.next.models.NgSelectedBackendTarget" : {
        "description" : "The current target",
        "type" : "object",
        "properties" : {
          "target" : {
            "description" : "The current target",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgTarget"
          },
          "attempts" : {
            "format" : "int32",
            "description" : "Circuit breaker attemps",
            "type" : "integer"
          },
          "cb_start" : {
            "format" : "int64",
            "description" : "Time start of circuit breaker usage",
            "type" : "integer"
          }
        }
      },
      "GlobalConfigImportBody" : {
        "type" : "object",
        "description" : ""
      },
      "otoroshi.auth.AuthModuleConfig" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.auth.BasicAuthModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.GenericOauth2ModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.LdapAuthModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.Oauth1ModuleConfig"
        }, {
          "$ref" : "#/components/schemas/otoroshi.auth.SamlAuthModuleConfig"
        } ]
      },
      "otoroshi.next.plugins.Robots" : {
        "description" : "Plugin to handle search engine bots",
        "type" : "object",
        "properties" : {
          "robot_txt_content" : {
            "description" : "Content of /robots.txt",
            "type" : "string"
          },
          "meta_content" : {
            "description" : "content of the <meta name='robots' /> tag",
            "type" : "string"
          },
          "robot_enabled" : {
            "description" : "/robots.txt enabled",
            "type" : "boolean"
          },
          "header_content" : {
            "description" : "Content of the X-Robots-Tag headers",
            "type" : "string"
          },
          "header_enabled" : {
            "description" : "Header enabled",
            "type" : "boolean"
          },
          "meta_enabled" : {
            "description" : "Meta tag enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.utils.mailer.GenericMailerSettings" : {
        "description" : "Settings for the generic mailer (http requests)",
        "type" : "object",
        "properties" : {
          "headers" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Sender headers"
          },
          "to" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/otoroshi.utils.mailer.EmailLocation"
            },
            "description" : "Destination email address"
          },
          "type" : {
            "description" : "the kind of mailer",
            "type" : "string",
            "enum" : [ "none", "console", "generic", "mailgun", "mailjet", "sendgrid" ]
          },
          "url" : {
            "description" : "Sender URL",
            "type" : "string"
          }
        }
      },
      "Null" : {
        "type" : "object",
        "description" : "no value object, used to represent a None option value"
      },
      "otoroshi.next.plugins.NgApikeyExtractors" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "basic" : {
            "description" : "basic auth extractor config.",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyExtractorBasic"
          },
          "custom_headers" : {
            "description" : "custom headers extractor config.",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyExtractorCustomHeaders"
          },
          "client_id" : {
            "description" : "client id only extractor config.",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyExtractorClientId"
          },
          "jwt" : {
            "description" : "jwt extractor config.",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyExtractorJwt"
          }
        }
      },
      "TargetsList" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/otoroshi.models.Target"
        }
      },
      "otoroshi.auth.Credential" : {
        "description" : "Pair of raw certificate, private key and certId for SAML protocol",
        "type" : "object",
        "properties" : {
          "certificate" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "PEM certificate used to sign SAML requests send to identity provider"
          },
          "privateKey" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Private key of the certificate used to sign SAML requests send to identity provider"
          },
          "certId" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Id of the certificate used to sign SAML requests send to identity provider"
          },
          "useOtoroshiCertificate" : {
            "description" : "Indicates if SAML requests are signed with otoroshi certificate or a PEM certificate",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.next.plugins.NgRedirectionSettings" : {
        "description" : "Configuration for Redirection",
        "type" : "object",
        "properties" : {
          "code" : {
            "format" : "int32",
            "description" : "Redirection status code used",
            "type" : "integer"
          },
          "to" : {
            "description" : "The redirection url",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.WebAuthnOtoroshiAdmin" : {
        "description" : "An otoroshi admin user that uses webauthn at login",
        "type" : "object",
        "properties" : {
          "createdAt" : {
            "description" : "User creation date",
            "type" : "number"
          },
          "metadata" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Entity metadata"
          },
          "password" : {
            "description" : "User password",
            "type" : "string"
          },
          "credentials" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            },
            "description" : "User webauthn credentials"
          },
          "rights" : {
            "description" : "User rights",
            "$ref" : "#/components/schemas/otoroshi.models.UserRights"
          },
          "typ" : {
            "description" : "User type",
            "$ref" : "#/components/schemas/otoroshi.models.OtoroshiAdminType"
          },
          "handle" : {
            "description" : "User webauthn handle",
            "type" : "string"
          },
          "label" : {
            "description" : "User label",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of admin",
            "type" : "string",
            "enum" : [ "simple", "webauthn" ]
          },
          "_loc" : {
            "description" : "Entity location",
            "$ref" : "#/components/schemas/otoroshi.models.EntityLocation"
          },
          "username" : {
            "description" : "User username",
            "type" : "string"
          },
          "tags" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            },
            "description" : "Entity tags"
          }
        }
      },
      "otoroshi.plugins.jobs.kubernetes.OtoroshiToKubernetesCertSyncJob" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.plugins.biscuit.BiscuitExtractor" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "PatchBody" : {
        "type" : "array",
        "items" : {
          "$ref" : "#/components/schemas/PatchDocument"
        }
      },
      "otoroshi.plugins.jobs.kubernetes.OtoAnnotationConfig" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : {
          "annotations" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            },
            "description" : "Internal api"
          }
        }
      },
      "otoroshi.plugins.accesslog.AccessLog" : {
        "description" : "Plugin that log access",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.models.DataCenterMatch" : {
        "description" : "Match a target if in the same datacenter",
        "type" : "object",
        "properties" : {
          "type" : {
            "description" : "the kind of predicate",
            "type" : "string",
            "enum" : [ "AlwaysMatch", "NetworkLocationMatch", "GeolocationMatch" ]
          },
          "dc" : {
            "description" : "DC name",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.JwtTokenLocation" : {
        "oneOf" : [ {
          "$ref" : "#/components/schemas/otoroshi.models.InCookie"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.InHeader"
        }, {
          "$ref" : "#/components/schemas/otoroshi.models.InQueryParam"
        } ]
      },
      "otoroshi.models.HSAlgoSettings" : {
        "description" : "Settings to use HMAC-SHA signing algorithm",
        "type" : "object",
        "properties" : {
          "size" : {
            "format" : "int32",
            "description" : "Size for SHA function",
            "type" : "integer"
          },
          "base64" : {
            "description" : "The secret is base64 encoded",
            "type" : "boolean"
          },
          "secret" : {
            "description" : "HMAC secret",
            "type" : "string"
          },
          "type" : {
            "description" : "the kind of algosettings",
            "type" : "string",
            "enum" : [ "HSAlgoSettings", "RSAlgoSettings", "ESAlgoSettings", "JWKSAlgoSettings", "RSAKPAlgoSettings", "ESKPAlgoSettings", "KidAlgoSettings" ]
          }
        }
      },
      "otoroshi.next.models.NgTarget" : {
        "description" : "A target where incoming requests will be forwarded",
        "type" : "object",
        "properties" : {
          "ip_address" : {
            "oneOf" : [ {
              "$ref" : "#/components/schemas/Null"
            }, {
              "type" : "string"
            } ],
            "description" : "Target ip address. Usefull to make manual DNS resolution without breaking SNI"
          },
          "protocol" : {
            "description" : "Protocol for the target",
            "type" : "string"
          },
          "predicate" : {
            "description" : "Predicate to choose this target",
            "$ref" : "#/components/schemas/otoroshi.models.TargetPredicate"
          },
          "tls_config" : {
            "description" : "TLS settings to contact this target",
            "$ref" : "#/components/schemas/otoroshi.next.models.NgTlsConfig"
          },
          "tls" : {
            "description" : "Does the target uses TLS",
            "type" : "boolean"
          },
          "port" : {
            "format" : "int32",
            "description" : "port of the target",
            "type" : "integer"
          },
          "id" : {
            "description" : "id of the target",
            "type" : "string"
          },
          "weight" : {
            "format" : "int32",
            "description" : "The weight of the target when choosing",
            "type" : "integer"
          },
          "hostname" : {
            "description" : "hostname of the target",
            "type" : "string"
          }
        }
      },
      "otoroshi.models.UserAgentSettings" : {
        "description" : "Settings to extract informations about user agent (for otoroshi events)",
        "type" : "object",
        "properties" : {
          "enabled" : {
            "description" : "User agent extraction enabled",
            "type" : "boolean"
          }
        }
      },
      "otoroshi.plugins.useragent.UserAgentHelper" : {
        "description" : "Internal api",
        "type" : "object",
        "properties" : { }
      },
      "otoroshi.next.plugins.NgApikeyCallsConfig" : {
        "description" : "Configuration for ApikeyCalls",
        "type" : "object",
        "properties" : {
          "extractors" : {
            "description" : "Configuration of the apikey extraction modes",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyExtractors"
          },
          "pass_with_user" : {
            "description" : "Let the request pass if a user is connected",
            "type" : "boolean"
          },
          "wipe_backend_request" : {
            "description" : "Removes the apikeys from the request to not forward it to the backend",
            "type" : "boolean"
          },
          "validate" : {
            "description" : "Enabled quotas validation",
            "type" : "boolean"
          },
          "routing" : {
            "description" : "Use apikey for routing",
            "$ref" : "#/components/schemas/otoroshi.next.plugins.NgApikeyMatcher"
          }
        }
      }
    },
    "securitySchemes" : {
      "otoroshi_auth" : {
        "type" : "http",
        "scheme" : "basic"
      }
    }
  }
}
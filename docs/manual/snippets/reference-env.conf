app {
  storage = ${?APP_STORAGE}
  storageRoot = ${?APP_STORAGE_ROOT}
  eventsName = ${?APP_EVENTS_NAME}
  importFrom = ${?APP_IMPORT_FROM}
  env = ${?APP_ENV}
  domain = ${?APP_DOMAIN}
  commitId = ${?COMMIT_ID}
  rootScheme = ${?APP_ROOT_SCHEME}
  middleFingers = ${?APP_MIDDLE_FINGERS}
  workers = ${?APP_WORKERS}
  throttlingWindow = ${?THROTTLING_WINDOW}
  checkForUpdates = ${?CHECK_FOR_UPDATES}
  overheadThreshold = ${?OVERHEAD_THRESHOLD}
  adminLogin = ${?OTOROSHI_INITIAL_ADMIN_LOGIN}
  adminPassword = ${?OTOROSHI_INITIAL_ADMIN_PASSWORD}
  initialCustomization = ${?OTOROSHI_INITIAL_CUSTOMIZATION}
  boot {
    globalWait = ${?OTOROSHI_BOOT_GLOBAL_WAIT}
    globalWaitTimeout = ${?OTOROSHI_BOOT_GLOBAL_WAIT_TIMEOUT}
    waitForPluginsSearch = ${?OTOROSHI_BOOT_WAIT_FOR_PLUGINS_SEARCH}
    waitForPluginsSearchTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_PLUGINS_SEARCH_TIMEOUT}
    waitForScriptsCompilation = ${?OTOROSHI_BOOT_WAIT_FOR_SCRIPTS_COMPILATION}
    waitForScriptsCompilationTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_SCRIPTS_COMPILATION_TIMEOUT}
    waitForTlsInit = ${?OTOROSHI_BOOT_WAIT_FOR_TLS_INIT}
    waitForTlsInitTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_TLS_INIT_TIMEOUT}
    waitForFirstClusterFetch = ${?OTOROSHI_BOOT_WAIT_FOR_FIRST_CLUSTER_FETCH}
    waitForFirstClusterFetchTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_FIRST_CLUSTER_TIMEOUT}
  }
  instance {
    instanceId = ${?OTOROSHI_INSTANCE_ID}
    number =  ${?OTOROSHI_INSTANCE_NUMBER}
    number =  ${?INSTANCE_NUMBER}
    name = ${?OTOROSHI_INSTANCE_NAME}
    zone = ${?OTOROSHI_INSTANCE_ZONE}
    region = ${?OTOROSHI_INSTANCE_REGION}
    dc = ${?OTOROSHI_INSTANCE_DATACENTER}
    provider = ${?OTOROSHI_INSTANCE_PROVIDER}
    rack = ${?OTOROSHI_INSTANCE_RACK}
    title = ${?OTOROSHI_INSTANCE_TITLE}
  }
  proxy {
    keepAlive = ${?PROXY_KEEPALIVE}
    compressionEnabled = ${?PROXY_COMPRESSION_ENABLED}
    idleTimeout = ${?PROXY_IDLE_TIMEOUT}
    connectionTimeout = ${?PROXY_CONNECTION_TIMEOUT}
    requestTimeout = ${?PROXY_REQUEST_TIMEOUT}
    useAkkaClient = ${?PROXY_USE_AKKA_CLIENT}
  }
  sidecar {
    serviceId = ${?SIDECAR_SERVICE_ID}
    target = ${?SIDECAR_TARGET}
    from = ${?SIDECAR_FROM}
    strict = ${?SIDECAR_STRICT}
    apikey {
      clientId = ${?SIDECAR_APIKEY_CLIENT_ID}
    }
  }
  health {
    limit = ${?HEALTH_LIMIT}
    accessKey = ${?HEALTH_ACCESS_KEY}
  }
  snowflake {
    seed = ${?INSTANCE_NUMBER}
    seed = ${?SNOWFLAKE_SEED}
  }
  events {
    maxSize = ${?MAX_EVENTS_SIZE}
  }
  exposed-ports {
    http = ${?APP_EXPOSED_PORTS_HTTP}
    http = ${?OTOROSHI_EXPOSED_PORTS_HTTP}
    https = ${?APP_EXPOSED_PORTS_HTTPS}
    https = ${?OTOROSHI_EXPOSED_PORTS_HTTPS}
  }
  backoffice {
    exposed = ${?APP_BACKOFFICE_EXPOSED}
    subdomain = ${?APP_BACKOFFICE_SUBDOMAIN}
    domainsStr = ${?APP_BACKOFFICE_DOMAINS}
    domainsStr = ${?OTOROSHI_BACKOFFICE_DOMAINS}
    session {
      exp = ${?APP_BACKOFFICE_SESSION_EXP}
    }
  }
  privateapps {
    subdomain = ${?APP_PRIVATEAPPS_SUBDOMAIN}
    # port = ${?APP_PRIVATEAPPS_PORT}
    domainsStr = ${?APP_PRIVATEAPPS_DOMAINS}
    domainsStr = ${?OTOROSHI_PRIVATEAPPS_DOMAINS}
    session {
      exp = ${?APP_PRIVATEAPPS_SESSION_EXP}
    }
  }
  adminapi {
    exposed = ${?ADMIN_API_EXPOSED}
    targetSubdomain = ${?ADMIN_API_TARGET_SUBDOMAIN}
    exposedSubdomain = ${?ADMIN_API_EXPOSED_SUBDOMAIN}
    additionalExposedDomain = ${?ADMIN_API_ADDITIONAL_EXPOSED_DOMAIN}
    domainsStr = ${?ADMIN_API_DOMAINS}
    domainsStr = ${?OTOROSHI_ADMIN_API_DOMAINS}
    exposedDomainsStr = ${?ADMIN_API_EXPOSED_DOMAINS}
    exposedDomainsStr = ${?OTOROSHI_ADMIN_API_EXPOSED_DOMAINS}
    defaultValues {
      backOfficeGroupId = ${?ADMIN_API_GROUP}
      backOfficeApiKeyClientId = ${?ADMIN_API_CLIENT_ID}
      backOfficeApiKeyClientSecret = ${?otoroshi.admin-api-secret}
      backOfficeApiKeyClientSecret = ${?ADMIN_API_CLIENT_SECRET}
      backOfficeServiceId = ${?ADMIN_API_SERVICE_ID}
    }
    proxy {
      https = ${?ADMIN_API_HTTPS}
      local = ${?ADMIN_API_LOCAL}
    }
  }
  claim {
    sharedKey = ${?CLAIM_SHAREDKEY}
  }
  webhooks {
    size = ${?WEBHOOK_SIZE}
  }
  redis {
    host = ${?REDIS_HOST}
    port = ${?REDIS_PORT}
    password = ${?REDIS_PASSWORD}
    windowSize = ${?REDIS_WINDOW_SIZE}
    slavesStr = ${?REDIS_SLAVES}
    slavesStr = ${?REDIS_MEMBERS}
    useScan =  ${?REDIS_USE_SCAN}
    pool {
      members = ${?REDIS_POOL_MEMBERS}
    }
    mpool {
      membersStr = ${?REDIS_MPOOL_MEMBERS}
    }
    lf {
      master {
        host = ${?REDIS_LF_HOST}
        port = ${?REDIS_LF_PORT}
        password = ${?REDIS_LF_PASSWORD}
      }
      slavesStr = ${?REDIS_LF_SLAVES}
      slavesStr = ${?REDIS_LF_MEMBERS}
    }
    sentinels {
      master = ${?REDIS_SENTINELS_MASTER}
      password = ${?REDIS_SENTINELS_PASSWORD}
      db = ${?REDIS_SENTINELS_DB}
      name = ${?REDIS_SENTINELS_NAME}
      membersStr = ${?REDIS_SENTINELS_MEMBERS}
      lf {
        master = ${?REDIS_SENTINELS_LF_MASTER}
        membersStr = ${?REDIS_SENTINELS_LF_MEMBERS}
      }
    }
    cluster {
      membersStr = ${?REDIS_CLUSTER_MEMBERS}
    }
    lettuce {
      connection = ${?REDIS_LETTUCE_CONNECTION}
      uri =  ${?REDIS_LETTUCE_URI}
      uri =  ${?REDIS_URL}
      urisStr = ${?REDIS_LETTUCE_URIS}
      readFrom = ${?REDIS_LETTUCE_READ_FROM}
      startTLS = ${?REDIS_LETTUCE_START_TLS}
      verifyPeers = ${?REDIS_LETTUCE_VERIFY_PEERS}
    }
  }
  inmemory {
    windowSize = ${?INMEMORY_WINDOW_SIZE}
    experimental = ${?INMEMORY_EXPERIMENTAL_STORE}
    optimized = ${?INMEMORY_OPTIMIZED}
  }
  leveldb {
    windowSize = ${?LEVELDB_WINDOW_SIZE}
    path = ${?LEVELDB_PATH}
  }
  filedb {
    windowSize = ${?FILEDB_WINDOW_SIZE}
    path = ${?FILEDB_PATH}
  }
  httpdb {
    headers = {}
  }
  s3db {
    bucket = ${?OTOROSHI_DB_S3_BUCKET}
    endpoint = ${?OTOROSHI_DB_S3_ENDPOINT}
    region = ${?OTOROSHI_DB_S3_REGION}
    access = ${?OTOROSHI_DB_S3_ACCESS}
    secret = ${?OTOROSHI_DB_S3_SECRET}
    key = ${?OTOROSHI_DB_S3_KEY}
    chunkSize = ${?OTOROSHI_DB_S3_CHUNK_SIZE}
    v4auth = ${?OTOROSHI_DB_S3_V4_AUTH}
    writeEvery = ${?OTOROSHI_DB_S3_WRITE_EVERY}
    acl = ${?OTOROSHI_DB_S3_ACL}
  }
  pg {
    uri = ${?PG_URI}
    uri = ${?POSTGRESQL_ADDON_URI}
    poolSize = ${?PG_POOL_SIZE}
    port = ${?PG_PORT}
    host = ${?PG_HOST}
    database = ${?PG_DATABASE}
    user = ${?PG_USER}
    password = ${?PG_PASSWORD}
    logQueries = ${?PG_DEBUG_QUERIES}
    avoidJsonPath = ${?PG_AVOID_JSON_PATH}
    optimized = ${?PG_OPTIMIZED}
    connect-timeout = ${?PG_CONNECT_TIMEOUT}
    idle-timeout = ${?PG_IDLE_TIMEOUT}
    log-activity = ${?PG_LOG_ACTIVITY}
    pipelining-limit = ${?PG_PIPELINING_LIMIT}
    ssl {
      enabled = ${?PG_SSL_ENABLED}
      mode = ${?PG_SSL_MODE}
      trusted-cert-path = ${?PG_SSL_TRUSTED_CERT_PATH}
      trusted-cert = ${?PG_SSL_TRUSTED_CERT}
      client-cert-path = ${?PG_SSL_CLIENT_CERT_PATH}
      client-cert = ${?PG_SSL_CLIENT_CERT}
      trust-all = ${?PG_SSL_TRUST_ALL}
    }
  }
  cassandra {
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
    host = ${?CASSANDRA_HOST}
    port = ${?CASSANDRA_PORT}
    replicationFactor = ${?CASSANDRA_REPLICATION_FACTOR}
    replicationOptions = ${?CASSANDRA_REPLICATION_OPTIONS}
    durableWrites = ${?CASSANDRA_DURABLE_WRITES}
    basic.contact-points = [ ${app.cassandra.host}":"${app.cassandra.port} ]
    basic.session-name = ${?OTOROSHI_CASSANDRA_SESSION_NAME}
    basic.session-keyspace = ${?OTOROSHI_CASSANDRA_SESSION_KEYSPACE}
    basic.request {
      consistency = ${?OTOROSHI_CASSANDRA_CONSISTENCY}
      page-size = ${?OTOROSHI_CASSANDRA_PAGE_SIZE}
      serial-consistency = ${?OTOROSHI_CASSANDRA_SERIAL_CONSISTENCY}
      default-idempotence = ${?OTOROSHI_CASSANDRA_DEFAULT_IDEMPOTENCE}
    }
    basic.load-balancing-policy {
      local-datacenter = ${?OTOROSHI_CASSANDRA_LOCAL_DATACENTER}
    }
    basic.cloud {
    }
    basic.application {
    }
    basic.graph {
    }
    advanced.connection {
      set-keyspace-timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      pool {
        local {
        }
        remote {
        }
      }
    }
    advanced.reconnection-policy {
    }
    advanced.retry-policy {
    }
    advanced.speculative-execution-policy {
    }
    advanced.auth-provider {
      username = ${?CASSANDRA_USERNAME}
      username = ${?OTOROSHI_CASSANDRA_USERNAME}
      password = ${?CASSANDRA_PASSWORD}
      password = ${?OTOROSHI_CASSANDRA_PASSWORD}
      authorization-id = ${?OTOROSHI_CASSANDRA_AUTHORIZATION_ID}
      // login-configuration {
      // }
      // sasl-properties {
      // }
    }
    advanced.ssl-engine-factory {
    }
    advanced.timestamp-generator {
      drift-warning {
      }
    }
    advanced.request-tracker {
      logs {
        slow {
        }
      }
    }
    advanced.throttler {
    }
    advanced.address-translator {
    }
    advanced.protocol {
      version = ${?OTOROSHI_CASSANDRA_PROTOCOL_VERSION}
      compression = ${?OTOROSHI_CASSANDRA_PROTOCOL_COMPRESSION}
    }
    advanced.request {
      trace {
      }
    }
    advanced.graph {
      paging-options {
        page-size = ${datastax-java-driver.advanced.continuous-paging.page-size}
        max-pages = ${datastax-java-driver.advanced.continuous-paging.max-pages}
        max-pages-per-second = ${datastax-java-driver.advanced.continuous-paging.max-pages-per-second}
        max-enqueued-pages = ${datastax-java-driver.advanced.continuous-paging.max-enqueued-pages}
      }
    }
    advanced.continuous-paging {
      page-size = ${datastax-java-driver.basic.request.page-size}
      timeout {
      }
    }
    advanced.monitor-reporting {
    }
    advanced.metrics {
      session {
        cql-requests {
        }
        throttling.delay {
        }
        continuous-cql-requests {
        }
        graph-requests {
        }
      }
      node {
        cql-messages {
        }
        graph-messages {
        }
      }
    }
    advanced.socket {
    }
    advanced.heartbeat {
      timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
    }
    advanced.metadata {
      topology-event-debouncer {
      }
      schema {
        request-timeout = ${datastax-java-driver.basic.request.timeout}
        request-page-size = ${datastax-java-driver.basic.request.page-size}
        debouncer {
        }
      }
    }
    advanced.control-connection {
      timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      schema-agreement {
      }
    }
    advanced.prepared-statements {
      reprepare-on-up {
        timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      }
    }
    advanced.netty {
      io-group {
        shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
      }
      admin-group {
        shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
      }
      timer {
      }
    }
    advanced.coalescer {
    }
  }
  mongo {
    uri = ${?MONGO_URI}
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
  }
  kafka {
    host = ${?KAFKA_HOST}
    port = ${?KAFKA_PORT}
    servers = ${app.kafka.host}":"${app.kafka.port}
    servers = ${?KAFKA_HOSTS_AND_PORTS}
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
  }
  actorsystems {
    otoroshi {
      akka {
        default-dispatcher {
          fork-join-executor {
          }
        }
        http {
          parsing {
            max-chunk-size             = ${?AKKA_HTTP_CLIENT_MAX_CHUNK_SIZE}
            max-content-length         = ${?AKKA_HTTP_CLIENT_MAX_CONTENT_LENGHT}
            max-to-strict-bytes        = ${?AKKA_HTTP_CLIENT_MAX_TO_STRICT_BYTES}
          }
        }
      }
    }
    datastore {
      akka {
        default-dispatcher {
          fork-join-executor {
          }
        }
      }
    }
  }
}
otoroshi {
  instance = ${app.instance}
  maintenanceMode = ${?OTOROSHI_MAINTENANCE_MODE_ENABLED}
  secret = ${?OTOROSHI_SECRET}
  admin-api-secret = ${?OTOROSHI_ADMIN_API_SECRET}
  options {
    bypassUserRightsCheck = ${?OTOROSHI_OPTIONS_BYPASSUSERRIGHTSCHECK}
    emptyContentLengthIsChunked = ${?OTOROSHI_OPTIONS_EMPTYCONTENTLENGTHISCHUNKED}
    detectApiKeySooner = ${?OTOROSHI_OPTIONS_DETECTAPIKEYSOONER}
    sendClientChainAsPem = ${?OTOROSHI_OPTIONS_SENDCLIENTCHAINASPEM}
    useOldHeadersComposition = ${?OTOROSHI_OPTIONS_USEOLDHEADERSCOMPOSITION}
    manualDnsResolve = ${?OTOROSHI_OPTIONS_MANUALDNSRESOLVE}
    useEventStreamForScriptEvents = ${?OTOROSHI_OPTIONS_USEEVENTSTREAMFORSCRIPTEVENTS}
    trustXForwarded = ${?OTOROSHI_OPTIONS_TRUST_XFORWARDED}
    disableFunnyLogos = ${?OTOROSHI_OPTIONS_DISABLE_FUNNY_LOGOS}
    staticExposedDomain = ${?OTOROSHI_OPTIONS_STATIC_EXPOSED_DOMAIN}
  }
  sessions {
    secret = ${otoroshi.secret}
    secret = ${?OTOROSHI_SESSIONS_SECRET}
  }
  cache {
    enabled = ${?USE_CACHE}
    enabled = ${?OTOROSHI_ENTITIES_CACHE_ENABLED}
    ttl = ${?OTOROSHI_ENTITIES_CACHE_TTL}
  }
  metrics {
    enabled = ${?OTOROSHI_METRICS_ENABLED}
    every = ${?OTOROSHI_METRICS_EVERY}
    accessKey = ${?app.health.accessKey}
    accessKey = ${?OTOROSHI_METRICS_ACCESS_KEY}
  }
  plugins {
    packagesStr = ${?OTOROSHI_PLUGINS_SCAN_PACKAGES}
    print = ${?OTOROSHI_PLUGINS_PRINT}
  }
  scripts {
    enabled = ${?OTOROSHI_SCRIPTS_ENABLED}
    static {
      enabled = ${?OTOROSHI_SCRIPTS_STATIC_ENABLED}
      transformersRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_TRANSFORMER_REFS}
      transformersConfig = {}
      transformersConfigStr= ${?OTOROSHI_SCRIPTS_STATIC_TRANSFORMER_CONFIG}
      validatorRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_VALIDATOR_REFS}
      validatorConfig = {}
      validatorConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_VALIDATOR_CONFIG}
      preRouteRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_PRE_ROUTE_REFS}
      preRouteConfig = {}
      preRouteConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_PRE_ROUTE_CONFIG}
      sinkRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_SINK_REFS}
      sinkConfig = {}
      sinkConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_SINK_CONFIG}
      jobsRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_JOBS_REFS}
      jobsConfig = {}
      jobsConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_JOBS_CONFIG}
    }
  }
  ssl {
    cacert {
    }
    fromOutside {
      clientAuth = ${?SSL_OUTSIDE_CLIENT_AUTH}
    }
    trust {
      all = ${?OTOROSHI_SSL_TRUST_ALL}
    }
    initialCacert = ${?CLUSTER_WORKER_INITIAL_CACERT}
    initialCacert = ${?INITIAL_CACERT}
    initialCert = ${?CLUSTER_WORKER_INITIAL_CERT}
    initialCert = ${?INITIAL_CERT}
    initialCertKey = ${?CLUSTER_WORKER_INITIAL_CERT_KEY}
    initialCertKey = ${?INITIAL_CERT_KEY}
    genWildcardCert = ${?OTOROSHI_SSL_GEN_WILDCARD_CERT}
  }
  cluster {
    mode = ${?CLUSTER_MODE}
    compression = ${?CLUSTER_COMPRESSION}
    selfAddress = ${?CLUSTER_SELF_ADDRESS}
    autoUpdateState = ${?CLUSTER_AUTO_UPDATE_STATE}
    mtls {
      enabled = ${?CLUSTER_MTLS_ENABLED}
      loose = ${?CLUSTER_MTLS_LOOSE}
      trustAll = ${?CLUSTER_MTLS_TRUST_ALL}
    }
    leader {
      name = ${?CLUSTER_LEADER_NAME}
      url = ${?CLUSTER_LEADER_URL}
      host = ${?CLUSTER_LEADER_HOST}
      clientId = ${?CLUSTER_LEADER_CLIENT_ID}
      clientSecret = ${?CLUSTER_LEADER_CLIENT_SECRET}
      groupingBy = ${?CLUSTER_LEADER_GROUP_BY}
      cacheStateFor = ${?CLUSTER_LEADER_CACHE_STATE_FOR}
      stateDumpPath = ${?CLUSTER_LEADER_DUMP_PATH}
    }
    worker {
      name = ${?CLUSTER_WORKER_NAME}
      retries = ${?CLUSTER_WORKER_RETRIES}
      timeout = ${?CLUSTER_WORKER_TIMEOUT}
      tenantsStr = ${?CLUSTER_WORKER_TENANTS}
      dbpath = ${?CLUSTER_WORKER_DB_PATH}
      dataStaleAfter = ${?CLUSTER_WORKER_DATA_STALE_AFTER}
      swapStrategy = ${?CLUSTER_WORKER_SWAP_STRATEGY}
      state {
        retries = ${otoroshi.cluster.worker.retries}
        retries = ${?CLUSTER_WORKER_STATE_RETRIES}
        pollEvery = ${?CLUSTER_WORKER_POLL_EVERY}
        timeout = ${otoroshi.cluster.worker.timeout}
        timeout = ${?CLUSTER_WORKER_POLL_TIMEOUT}
      }
      quotas {
        retries = ${otoroshi.cluster.worker.retries}
        retries = ${?CLUSTER_WORKER_QUOTAS_RETRIES}
        pushEvery = ${?CLUSTER_WORKER_PUSH_EVERY}
        timeout = ${otoroshi.cluster.worker.timeout}
        timeout = ${?CLUSTER_WORKER_PUSH_TIMEOUT}
      }
    }
    analytics {
      pressure {
        enabled = ${?OTOROSHI_ANALYTICS_PRESSURE_ENABLED}
      }
      actorsystem {
        akka {
          default-dispatcher {
            fork-join-executor {
            }
          }
          http {
            parsing {
              max-chunk-size             = ${?AKKA_HTTP_CLIENT_ANALYTICS_MAX_CHUNK_SIZE}
              max-content-length         = ${?AKKA_HTTP_CLIENT_ANALYTICS_MAX_CONTENT_LENGHT}
              max-to-strict-bytes        = ${?AKKA_HTTP_CLIENT_ANALYTICS_MAX_TO_STRICT_BYTES}
            }
          }
        }
      }
    }
  }
  headers {
  }
  requests {
    validate = ${?OTOROSHI_REQUESTS_VALIDATE}
    maxUrlLength = ${akka.http.parsing.max-uri-length}
    maxCookieLength = ${akka.http.parsing.max-header-value-length}
    maxHeaderNameLength = ${akka.http.parsing.max-header-name-length}
    maxHeaderValueLength = ${akka.http.parsing.max-header-value-length}
  }
  jmx {
    enabled = ${?OTOROSHI_JMX_ENABLED}
    port = ${?OTOROSHI_JMX_PORT}
  }
  loggers {
  }
  provider {
    dashboardUrl = ${?OTOROSHI_PROVIDER_DASHBOARD_URL}
    jsUrl = ${?OTOROSHI_PROVIDER_JS_URL}
    cssUrl = ${?OTOROSHI_PROVIDER_CSS_URL}
    secret = ${?OTOROSHI_PROVIDER_SECRET}
    title = ${?OTOROSHI_PROVIDER_TITLE}
  }
  healthcheck {
    workers = ${?OTOROSHI_HEALTHCHECK_WORKERS}
    block-on-red = ${?OTOROSHI_HEALTHCHECK_BLOCK_ON_RED}
    block-on-red = ${?OTOROSHI_HEALTHCHECK_BLOCK_ON_500}
    ttl = ${?OTOROSHI_HEALTHCHECK_TTL}
    ttl-only = ${?OTOROSHI_HEALTHCHECK_TTL_ONLY}
  }
}
http.port = ${?PORT}
play.server.http.port = ${http.port}
play.server.http.port = ${?PORT}
https.port = ${?HTTPS_PORT}
play.server.https.keyStoreDumpPath = ${?HTTPS_KEYSTORE_DUMP_PATH}
play.http.secret.key = ${otoroshi.secret}
play.http.secret.key = ${?PLAY_CRYPTO_SECRET}
http2.enabled = ${?HTTP2_ENABLED}
play.server.https.keyStore.path=${?HTTPS_KEYSTORE_PATH}
play.server.https.keyStore.type=${?HTTPS_KEYSTORE_TYPE}
play.server.https.keyStore.password=${?HTTPS_KEYSTORE_PASSWORD}
play.server.https.keyStore.algorithm=${?HTTPS_KEYSTORE_ALGO}
play.server.https.wantClientAuth = ${?HTTPS_WANT_CLIENT_AUTH}
play.server.https.needClientAuth = ${?HTTPS_NEED_CLIENT_AUTH}
play.modules {
}
play.http {
  session {
    secure = ${?SESSION_SECURE_ONLY}
    maxAge = ${?SESSION_MAX_AGE}
    domain = "."${app.domain}
    domain = ${?SESSION_DOMAIN}
    cookieName = ${?SESSION_NAME}
  }
}
# play.filters {
#   headers {
#   }
#   gzip {
#   }
# }
play.server.netty {
  transport = ${?NETTY_TRANSPORT}
  option {
    child {
    }
  }
}
play.ws {
  useragent=${?USER_AGENT}
  ssl {
    #trustManager = {
    #    { type = "JKS", path = "exampletrust.jks" }
    #}
  }
}
play.cache {
}
akka {
}
play.akka {
}
akka {
  actor {
    default-dispatcher {
      fork-join-executor {
      }
    }
  }
  http {
    server {
      socket-options {
      }
      http2 {
      }
    }
    client {
      socket-options {
      }
    }
    host-connection-pool {
      client {
        socket-options {
        }
      }
    }
    parsing {
      max-chunk-size             = ${?AKKA_HTTP_SERVER_MAX_CHUNK_SIZE}
      max-content-length         = ${?AKKA_HTTP_SERVER_MAX_CONTENT_LENGHT}
    }
  }
}
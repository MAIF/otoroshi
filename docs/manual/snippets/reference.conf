
app {
  storage = "inmemory"
  storage = ${?APP_STORAGE}
  storageRoot = "otoroshi"
  storageRoot = ${?APP_STORAGE_ROOT}
  eventsName = "otoroshi"
  eventsName = ${?APP_EVENTS_NAME}
  importFrom = ${?APP_IMPORT_FROM}
  env = "prod"
  env = ${?APP_ENV}
  liveJs = false
  redirectToDev = false
  domain = "oto.tools"
  domain = ${?APP_DOMAIN}
  commitId = "HEAD"
  commitId = ${?COMMIT_ID}
  rootScheme = "http"
  rootScheme = ${?APP_ROOT_SCHEME}
  middleFingers = false
  middleFingers = ${?APP_MIDDLE_FINGERS}
  workers = 30
  workers = ${?APP_WORKERS}
  throttlingWindow = 10
  throttlingWindow = ${?THROTTLING_WINDOW}
  checkForUpdates = true
  checkForUpdates = ${?CHECK_FOR_UPDATES}
  overheadThreshold = 500.0
  overheadThreshold = ${?OVERHEAD_THRESHOLD}
  adminLogin = ${?OTOROSHI_INITIAL_ADMIN_LOGIN}
  adminPassword = ${?OTOROSHI_INITIAL_ADMIN_PASSWORD}
  initialCustomization = ${?OTOROSHI_INITIAL_CUSTOMIZATION}
  boot {
    globalWait = true
    globalWait = ${?OTOROSHI_BOOT_GLOBAL_WAIT}
    globalWaitTimeout = 60000
    globalWaitTimeout = ${?OTOROSHI_BOOT_GLOBAL_WAIT_TIMEOUT}

    waitForPluginsSearch = true
    waitForPluginsSearch = ${?OTOROSHI_BOOT_WAIT_FOR_PLUGINS_SEARCH}
    waitForPluginsSearchTimeout = 20000
    waitForPluginsSearchTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_PLUGINS_SEARCH_TIMEOUT}

    waitForScriptsCompilation = true
    waitForScriptsCompilation = ${?OTOROSHI_BOOT_WAIT_FOR_SCRIPTS_COMPILATION}
    waitForScriptsCompilationTimeout = 30000
    waitForScriptsCompilationTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_SCRIPTS_COMPILATION_TIMEOUT}

    waitForTlsInit = true
    waitForTlsInit = ${?OTOROSHI_BOOT_WAIT_FOR_TLS_INIT}
    waitForTlsInitTimeout = 10000
    waitForTlsInitTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_TLS_INIT_TIMEOUT}

    waitForFirstClusterFetch = true
    waitForFirstClusterFetch = ${?OTOROSHI_BOOT_WAIT_FOR_FIRST_CLUSTER_FETCH}
    waitForFirstClusterFetchTimeout = 10000
    waitForFirstClusterFetchTimeout = ${?OTOROSHI_BOOT_WAIT_FOR_FIRST_CLUSTER_TIMEOUT}
  }
  instance {
    instanceId = ${?OTOROSHI_INSTANCE_ID}
    number = 0
    number =  ${?OTOROSHI_INSTANCE_NUMBER}
    number =  ${?INSTANCE_NUMBER}
    name = "otoroshi"
    name = ${?OTOROSHI_INSTANCE_NAME}
    zone = "local"
    zone = ${?OTOROSHI_INSTANCE_ZONE}
    region = "local"
    region = ${?OTOROSHI_INSTANCE_REGION}
    dc = "local"
    dc = ${?OTOROSHI_INSTANCE_DATACENTER}
    provider = "local"
    provider = ${?OTOROSHI_INSTANCE_PROVIDER}
    rack = "local"
    rack = ${?OTOROSHI_INSTANCE_RACK}
    title = ${?OTOROSHI_INSTANCE_TITLE}
  }
  proxy {
    keepAlive = true
    keepAlive = ${?PROXY_KEEPALIVE}
    compressionEnabled = false
    compressionEnabled = ${?PROXY_COMPRESSION_ENABLED}
    idleTimeout = 120000
    idleTimeout = ${?PROXY_IDLE_TIMEOUT}
    connectionTimeout = 120000
    connectionTimeout = ${?PROXY_CONNECTION_TIMEOUT}
    requestTimeout = 3600000
    requestTimeout = ${?PROXY_REQUEST_TIMEOUT}
    useAkkaClient = false
    useAkkaClient = ${?PROXY_USE_AKKA_CLIENT}
  }
  sidecar {
    serviceId = ${?SIDECAR_SERVICE_ID}
    target = ${?SIDECAR_TARGET}
    from = "127.0.0.1"
    from = ${?SIDECAR_FROM}
    strict = true
    strict = ${?SIDECAR_STRICT}
    apikey {
      clientId = ${?SIDECAR_APIKEY_CLIENT_ID}
    }
  }
  health {
    limit = 1000
    limit = ${?HEALTH_LIMIT}
    accessKey = ${?HEALTH_ACCESS_KEY}
  }
  snowflake {
    seed = 0
    seed = ${?INSTANCE_NUMBER}
    seed = ${?SNOWFLAKE_SEED}
  }
  events {
    maxSize = 1000
    maxSize = ${?MAX_EVENTS_SIZE}
  }
  exposed-ports {
    http = ${?APP_EXPOSED_PORTS_HTTP}
    http = ${?OTOROSHI_EXPOSED_PORTS_HTTP}
    https = ${?APP_EXPOSED_PORTS_HTTPS}
    https = ${?OTOROSHI_EXPOSED_PORTS_HTTPS}
  }
  backoffice {
    exposed = true
    exposed = ${?APP_BACKOFFICE_EXPOSED}
    subdomain = "otoroshi"
    subdomain = ${?APP_BACKOFFICE_SUBDOMAIN}
    domains = []
    domainsStr = ${?APP_BACKOFFICE_DOMAINS}
    domainsStr = ${?OTOROSHI_BACKOFFICE_DOMAINS}
    session {
      exp = 86400000
      exp = ${?APP_BACKOFFICE_SESSION_EXP}
    }
  }
  privateapps {
    subdomain = "privateapps"
    subdomain = ${?APP_PRIVATEAPPS_SUBDOMAIN}
    # port = ${?APP_PRIVATEAPPS_PORT}
    domains = []
    domainsStr = ${?APP_PRIVATEAPPS_DOMAINS}
    domainsStr = ${?OTOROSHI_PRIVATEAPPS_DOMAINS}
    session {
      exp = 86400000
      exp = ${?APP_PRIVATEAPPS_SESSION_EXP}
    }
  }
  adminapi {
    exposed = true
    exposed = ${?ADMIN_API_EXPOSED}
    targetSubdomain = "otoroshi-admin-internal-api"
    targetSubdomain = ${?ADMIN_API_TARGET_SUBDOMAIN}
    exposedSubdomain = "otoroshi-api"
    exposedSubdomain = ${?ADMIN_API_EXPOSED_SUBDOMAIN}
    additionalExposedDomain = ${?ADMIN_API_ADDITIONAL_EXPOSED_DOMAIN}
    domains = []
    domainsStr = ${?ADMIN_API_DOMAINS}
    domainsStr = ${?OTOROSHI_ADMIN_API_DOMAINS}
    exposedDomains = []
    exposedDomainsStr = ${?ADMIN_API_EXPOSED_DOMAINS}
    exposedDomainsStr = ${?OTOROSHI_ADMIN_API_EXPOSED_DOMAINS}
    defaultValues {
      backOfficeGroupId = "admin-api-group"
      backOfficeGroupId = ${?ADMIN_API_GROUP}
      backOfficeApiKeyClientId = "admin-api-apikey-id"
      backOfficeApiKeyClientId = ${?ADMIN_API_CLIENT_ID}
      backOfficeApiKeyClientSecret = "admin-api-apikey-secret"
      backOfficeApiKeyClientSecret = ${?otoroshi.admin-api-secret}
      backOfficeApiKeyClientSecret = ${?ADMIN_API_CLIENT_SECRET}
      backOfficeServiceId = "admin-api-service"
      backOfficeServiceId = ${?ADMIN_API_SERVICE_ID}
    }
    proxy {
      https = false
      https = ${?ADMIN_API_HTTPS}
      local = true
      local = ${?ADMIN_API_LOCAL}
    }
  }
  claim {
    sharedKey = "secret"
    sharedKey = ${?CLAIM_SHAREDKEY}
  }
  webhooks {
    size = 100
    size = ${?WEBHOOK_SIZE}
  }
  redis {
    host = "localhost"
    host = ${?REDIS_HOST}
    port = 6379
    port = ${?REDIS_PORT}
    password = ${?REDIS_PASSWORD}
    windowSize = 99
    windowSize = ${?REDIS_WINDOW_SIZE}
    slaves = []
    slavesStr = ${?REDIS_SLAVES}
    slavesStr = ${?REDIS_MEMBERS}
    useScan = false
    useScan =  ${?REDIS_USE_SCAN}

    pool {
      members = []
      members = ${?REDIS_POOL_MEMBERS}
    }

    mpool {
      members = []
      membersStr = ${?REDIS_MPOOL_MEMBERS}
    }

    lf {
      master {
        host = ${?REDIS_LF_HOST}
        port = ${?REDIS_LF_PORT}
        password = ${?REDIS_LF_PASSWORD}
      }
      slaves = []
      slavesStr = ${?REDIS_LF_SLAVES}
      slavesStr = ${?REDIS_LF_MEMBERS}
    }

    sentinels {
      master = ${?REDIS_SENTINELS_MASTER}
      password = ${?REDIS_SENTINELS_PASSWORD}
      db = ${?REDIS_SENTINELS_DB}
      name = ${?REDIS_SENTINELS_NAME}
      members = []
      membersStr = ${?REDIS_SENTINELS_MEMBERS}

      lf {
        master = ${?REDIS_SENTINELS_LF_MASTER}
        members = []
        membersStr = ${?REDIS_SENTINELS_LF_MEMBERS}
      }
    }

    cluster {
      members = []
      membersStr = ${?REDIS_CLUSTER_MEMBERS}
    }

    lettuce {
      connection = "default"
      connection = ${?REDIS_LETTUCE_CONNECTION}
      uri =  ${?REDIS_LETTUCE_URI}
      uri =  ${?REDIS_URL}
      uris = []
      urisStr = ${?REDIS_LETTUCE_URIS}
      readFrom = "MASTER_PREFERRED"
      readFrom = ${?REDIS_LETTUCE_READ_FROM}
      startTLS = false
      startTLS = ${?REDIS_LETTUCE_START_TLS}
      verifyPeers = true
      verifyPeers = ${?REDIS_LETTUCE_VERIFY_PEERS}
    }
  }
  inmemory {
    windowSize = 99
    windowSize = ${?INMEMORY_WINDOW_SIZE}
    experimental = false
    experimental = ${?INMEMORY_EXPERIMENTAL_STORE}
    optimized = false
    optimized = ${?INMEMORY_OPTIMIZED}
  }
  leveldb {
    windowSize = 99
    windowSize = ${?LEVELDB_WINDOW_SIZE}
    path = "./leveldb"
    path = ${?LEVELDB_PATH}
  }
  filedb {
    windowSize = 99
    windowSize = ${?FILEDB_WINDOW_SIZE}
    path = "./filedb/state.ndjson"
    path = ${?FILEDB_PATH}
  }
  httpdb {
    url = "http://127.0.0.1:8888/worker-0/state.json"
    headers = {}
    timeout = 10000
    pollEvery = 10000
  }
  s3db {
    bucket = "otoroshi-states"
    bucket = ${?OTOROSHI_DB_S3_BUCKET}
    endpoint = "https://otoroshi-states.foo.bar"
    endpoint = ${?OTOROSHI_DB_S3_ENDPOINT}
    region = "eu-west-1"
    region = ${?OTOROSHI_DB_S3_REGION}
    access = "secret"
    access = ${?OTOROSHI_DB_S3_ACCESS}
    secret = "secret"
    secret = ${?OTOROSHI_DB_S3_SECRET}
    key = "/otoroshi/states/state"
    key = ${?OTOROSHI_DB_S3_KEY}
    chunkSize = 8388608
    chunkSize = ${?OTOROSHI_DB_S3_CHUNK_SIZE}
    v4auth = true
    v4auth = ${?OTOROSHI_DB_S3_V4_AUTH}
    writeEvery = 60000
    writeEvery = ${?OTOROSHI_DB_S3_WRITE_EVERY}
    acl = "Private"
    acl = ${?OTOROSHI_DB_S3_ACL}
  }
  pg {
    uri = ${?PG_URI}
    uri = ${?POSTGRESQL_ADDON_URI}
    poolSize = 20
    poolSize = ${?PG_POOL_SIZE}
    port = 5432
    port = ${?PG_PORT}
    host = "localhost"
    host = ${?PG_HOST}
    database = "otoroshi"
    database = ${?PG_DATABASE}
    user = "otoroshi"
    user = ${?PG_USER}
    password = "otoroshi"
    password = ${?PG_PASSWORD}
    logQueries = ${?PG_DEBUG_QUERIES}
    avoidJsonPath = false
    avoidJsonPath = ${?PG_AVOID_JSON_PATH}
    optimized = true
    optimized = ${?PG_OPTIMIZED}
    connect-timeout = ${?PG_CONNECT_TIMEOUT}
    idle-timeout = ${?PG_IDLE_TIMEOUT}
    log-activity = ${?PG_LOG_ACTIVITY}
    pipelining-limit = ${?PG_PIPELINING_LIMIT}
    ssl {
      enabled = false
      enabled = ${?PG_SSL_ENABLED}
      mode = "verify_ca"
      mode = ${?PG_SSL_MODE}
      trusted-certs-path = []
      trusted-certs = []
      trusted-cert-path = ${?PG_SSL_TRUSTED_CERT_PATH}
      trusted-cert = ${?PG_SSL_TRUSTED_CERT}
      client-certs-path = []
      client-certs = []
      client-cert-path = ${?PG_SSL_CLIENT_CERT_PATH}
      client-cert = ${?PG_SSL_CLIENT_CERT}
      trust-all = ${?PG_SSL_TRUST_ALL}
    }
  }
  cassandra {
    windowSize = 99
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
    host = "127.0.0.1"
    host = ${?CASSANDRA_HOST}
    port = 9042
    port = ${?CASSANDRA_PORT}
    replicationFactor = 1
    replicationFactor = ${?CASSANDRA_REPLICATION_FACTOR}
    replicationOptions = ${?CASSANDRA_REPLICATION_OPTIONS}
    durableWrites = true
    durableWrites = ${?CASSANDRA_DURABLE_WRITES}
    basic.contact-points = [ ${app.cassandra.host}":"${app.cassandra.port} ]
    basic.session-name = "otoroshi"
    basic.session-name = ${?OTOROSHI_CASSANDRA_SESSION_NAME}
    basic.session-keyspace = ${?OTOROSHI_CASSANDRA_SESSION_KEYSPACE}
    basic.config-reload-interval = 5 minutes
    basic.request {
      timeout = 10 seconds
      consistency = LOCAL_ONE
      consistency = ${?OTOROSHI_CASSANDRA_CONSISTENCY}
      page-size = 5000
      page-size = ${?OTOROSHI_CASSANDRA_PAGE_SIZE}
      serial-consistency = SERIAL
      serial-consistency = ${?OTOROSHI_CASSANDRA_SERIAL_CONSISTENCY}
      default-idempotence = false
      default-idempotence = ${?OTOROSHI_CASSANDRA_DEFAULT_IDEMPOTENCE}
    }
    basic.load-balancing-policy {
      class = DefaultLoadBalancingPolicy
      local-datacenter = datacenter1
      local-datacenter = ${?OTOROSHI_CASSANDRA_LOCAL_DATACENTER}
      // filter.class=
      slow-replica-avoidance = true
    }
    basic.cloud {
      // secure-connect-bundle = /location/of/secure/connect/bundle
    }
    basic.application {
      // name =
      // version =
    }
    basic.graph {
      // name = your-graph-name
      traversal-source = "g"
      // is-system-query = false
      // read-consistency-level = LOCAL_QUORUM
      // write-consistency-level = LOCAL_ONE
      // timeout = 10 seconds
    }
    advanced.connection {
      connect-timeout = 5 seconds
      init-query-timeout = 500 milliseconds
      set-keyspace-timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      pool {
        local {
          size = 1
        }
        remote {
          size = 1
        }
      }
      max-requests-per-connection = 1024
      max-orphan-requests = 256
      warn-on-init-error = true
    }
    advanced.reconnect-on-init = false
    advanced.reconnection-policy {
      class = ExponentialReconnectionPolicy
      base-delay = 1 second
      max-delay = 60 seconds
    }
    advanced.retry-policy {
      class = DefaultRetryPolicy
    }
    advanced.speculative-execution-policy {
      class = NoSpeculativeExecutionPolicy
      // max-executions = 3
      // delay = 100 milliseconds
    }
    advanced.auth-provider {
      // class = PlainTextAuthProvider
      username = ${?CASSANDRA_USERNAME}
      username = ${?OTOROSHI_CASSANDRA_USERNAME}
      password = ${?CASSANDRA_PASSWORD}
      password = ${?OTOROSHI_CASSANDRA_PASSWORD}
      authorization-id = ${?OTOROSHI_CASSANDRA_AUTHORIZATION_ID}
      //service = "cassandra"
      // login-configuration {
      //   principal = "cassandra@DATASTAX.COM"
      //   useKeyTab = "true"
      //   refreshKrb5Config = "true"
      //   keyTab = "/path/to/keytab/file"
      // }
      // sasl-properties {
      //   javax.security.sasl.qop = "auth-conf"
      // }
    }
    advanced.ssl-engine-factory {
      // class = DefaultSslEngineFactory
      // cipher-suites = [ "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA" ]
      // hostname-validation = true
      // truststore-path = /path/to/client.truststore
      // truststore-password = password123
      // keystore-path = /path/to/client.keystore
      // keystore-password = password123
    }
    advanced.timestamp-generator {
      class = AtomicTimestampGenerator
      drift-warning {
        threshold = 1 second
        interval = 10 seconds
      }
      force-java-clock = false
    }
    advanced.request-tracker {
      class = NoopRequestTracker
      logs {
        // success.enabled = true
        slow {
          // threshold = 1 second
          // enabled = true
        }
        // error.enabled = true
        // max-query-length = 500
        // show-values = true
        // max-value-length = 50
        // max-values = 50
        // show-stack-traces = true
      }
    }
    advanced.throttler {
      class = PassThroughRequestThrottler
      // max-queue-size = 10000
      // max-concurrent-requests = 10000
      // max-requests-per-second = 10000
      // drain-interval = 10 milliseconds
    }
    advanced.node-state-listener.class = NoopNodeStateListener
    advanced.schema-change-listener.class = NoopSchemaChangeListener
    advanced.address-translator {
      class = PassThroughAddressTranslator
    }
    advanced.resolve-contact-points = true
    advanced.protocol {
      version = V4
      version = ${?OTOROSHI_CASSANDRA_PROTOCOL_VERSION}
      compression = lz4
      compression = ${?OTOROSHI_CASSANDRA_PROTOCOL_COMPRESSION}
      max-frame-length = 256 MB
    }
    advanced.request {
      warn-if-set-keyspace = false
      trace {
        attempts = 5
        interval = 3 milliseconds
        consistency = ONE
      }
      log-warnings = true
    }
    advanced.graph {
      // sub-protocol = "graphson-2.0"
      paging-enabled = "AUTO"
      paging-options {
        page-size = ${datastax-java-driver.advanced.continuous-paging.page-size}
        max-pages = ${datastax-java-driver.advanced.continuous-paging.max-pages}
        max-pages-per-second = ${datastax-java-driver.advanced.continuous-paging.max-pages-per-second}
        max-enqueued-pages = ${datastax-java-driver.advanced.continuous-paging.max-enqueued-pages}
      }
    }
    advanced.continuous-paging {
      page-size = ${datastax-java-driver.basic.request.page-size}
      page-size-in-bytes = false
      max-pages = 0
      max-pages-per-second = 0
      max-enqueued-pages = 4
      timeout {
        first-page = 2 seconds
        other-pages = 1 second
      }
    }
    advanced.monitor-reporting {
      enabled = true
    }
    advanced.metrics {
      session {
        enabled = [
          // bytes-sent,
          // bytes-received
          // connected-nodes,
          // cql-requests,
          // cql-client-timeouts,
          // cql-prepared-cache-size,
          // throttling.delay,
          // throttling.queue-size,
          // throttling.errors,
          // continuous-cql-requests,
          // graph-requests,
          // graph-client-timeouts
        ]
        cql-requests {
          highest-latency = 3 seconds
          significant-digits = 3
          refresh-interval = 5 minutes
        }
        throttling.delay {
          highest-latency = 3 seconds
          significant-digits = 3
          refresh-interval = 5 minutes
        }
        continuous-cql-requests {
          highest-latency = 120 seconds
          significant-digits = 3
          refresh-interval = 5 minutes
        }
        graph-requests {
          highest-latency = 12 seconds
          significant-digits = 3
          refresh-interval = 5 minutes
        }
      }
      node {
        enabled = [
          // pool.open-connections,
          // pool.available-streams,
          // pool.in-flight,
          // pool.orphaned-streams,
          // bytes-sent,
          // bytes-received,
          // cql-messages,
          // errors.request.unsent,
          // errors.request.aborted,
          // errors.request.write-timeouts,
          // errors.request.read-timeouts,
          // errors.request.unavailables,
          // errors.request.others,
          // retries.total,
          // retries.aborted,
          // retries.read-timeout,
          // retries.write-timeout,
          // retries.unavailable,
          // retries.other,
          // ignores.total,
          // ignores.aborted,
          // ignores.read-timeout,
          // ignores.write-timeout,
          // ignores.unavailable,
          // ignores.other,
          // speculative-executions,
          // errors.connection.init,
          // errors.connection.auth,
          // graph-messages,
        ]
        cql-messages {
          highest-latency = 3 seconds
          significant-digits = 3
          refresh-interval = 5 minutes
        }
        graph-messages {
          highest-latency = 3 seconds
          significant-digits = 3
          refresh-interval = 5 minutes
        }
      }
    }
    advanced.socket {
      tcp-no-delay = true
      //keep-alive = false
      //reuse-address = true
      //linger-interval = 0
      //receive-buffer-size = 65535
      //send-buffer-size = 65535
    }
    advanced.heartbeat {
      interval = 30 seconds
      timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
    }
    advanced.metadata {
      topology-event-debouncer {
        window = 1 second
        max-events = 20
      }
      schema {
        enabled = true
        // refreshed-keyspaces = [ "ks1", "ks2" ]
        request-timeout = ${datastax-java-driver.basic.request.timeout}
        request-page-size = ${datastax-java-driver.basic.request.page-size}
        debouncer {
          window = 1 second
          max-events = 20
        }
      }
      token-map.enabled = true
    }
    advanced.control-connection {
      timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      schema-agreement {
        interval = 200 milliseconds
        timeout = 10 seconds
        warn-on-failure = true
      }
    }
    advanced.prepared-statements {
      prepare-on-all-nodes = true
      reprepare-on-up {
        enabled = true
        check-system-table = false
        max-statements = 0
        max-parallelism = 100
        timeout = ${datastax-java-driver.advanced.connection.init-query-timeout}
      }
    }
    advanced.netty {
      daemon = false
      io-group {
        size = 0
        shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
      }
      admin-group {
        size = 2
        shutdown {quiet-period = 2, timeout = 15, unit = SECONDS}
      }
      timer {
        tick-duration = 100 milliseconds
        ticks-per-wheel = 2048
      }
    }
    advanced.coalescer {
      max-runs-with-no-work = 5
      reschedule-interval = 10 microseconds
    }
  }
  mongo {
    uri = "mongodb://localhost:27017/default"
    uri = ${?MONGO_URI}
    windowSize = 99
    windowSize = ${?CASSANDRA_WINDOW_SIZE}
  }
  kafka {
    host = "127.0.0.1"
    host = ${?KAFKA_HOST}
    port = "9092"
    port = ${?KAFKA_PORT}
    servers = ${app.kafka.host}":"${app.kafka.port}
    servers = ${?KAFKA_HOSTS_AND_PORTS}
    groupId = "otoroshi"
    nbPartitions = 3
    nbPartitions = ${?KAFKA_NB_PARTITIONS}
    keyPass = ${?KAFKA_PASSWORD}
    keystore {
      location = ${?KAFKA_KEYSTORE_LOCATION}
    }
    truststore {
      location = ${?KAFKA_TRUSTORE_LOCATION}
    }
  }
  actorsystems {
    otoroshi {
      akka {
        log-dead-letters-during-shutdown = false
        jvm-exit-on-fatal-error = false
        default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
            parallelism-factor = 4.0
            parallelism-min = 4
            parallelism-max = 64
            task-peeking-mode = "FIFO"
          }
          throughput = 1
        }
        http {
          parsing {
            max-uri-length             = 4k
            max-method-length          = 16
            max-response-reason-length = 64
            max-header-name-length     = 128
            max-header-value-length    = 16k
            max-header-count           = 128
            max-chunk-ext-length       = 256
            max-chunk-size             = 256m
            max-chunk-size             = ${?AKKA_HTTP_CLIENT_MAX_CHUNK_SIZE}
            max-content-length         = infinite
            max-content-length         = ${?AKKA_HTTP_CLIENT_MAX_CONTENT_LENGHT}
            max-to-strict-bytes        = infinite
            max-to-strict-bytes        = ${?AKKA_HTTP_CLIENT_MAX_TO_STRICT_BYTES}
          }
        }
      }
    }
    datastore {
      akka {
        log-dead-letters-during-shutdown = false
        jvm-exit-on-fatal-error = false
        default-dispatcher {
          type = Dispatcher
          executor = "fork-join-executor"
          fork-join-executor {
            parallelism-factor = 4.0
            parallelism-min = 4
            parallelism-max = 64
            task-peeking-mode = "FIFO"
          }
          throughput = 1
        }
      }
    }
  }
}

otoroshi {
  instance = ${app.instance}
  maintenanceMode = false
  maintenanceMode = ${?OTOROSHI_MAINTENANCE_MODE_ENABLED}
  secret = "verysecretvaluethatyoumustoverwrite"
  secret = ${?OTOROSHI_SECRET}
  admin-api-secret = ${?OTOROSHI_ADMIN_API_SECRET}
  options {
    bypassUserRightsCheck = false
    bypassUserRightsCheck = ${?OTOROSHI_OPTIONS_BYPASSUSERRIGHTSCHECK}
    emptyContentLengthIsChunked = true
    emptyContentLengthIsChunked = ${?OTOROSHI_OPTIONS_EMPTYCONTENTLENGTHISCHUNKED}
    detectApiKeySooner = true
    detectApiKeySooner = ${?OTOROSHI_OPTIONS_DETECTAPIKEYSOONER}
    sendClientChainAsPem = false
    sendClientChainAsPem = ${?OTOROSHI_OPTIONS_SENDCLIENTCHAINASPEM}
    useOldHeadersComposition = false
    useOldHeadersComposition = ${?OTOROSHI_OPTIONS_USEOLDHEADERSCOMPOSITION}
    manualDnsResolve = true
    manualDnsResolve = ${?OTOROSHI_OPTIONS_MANUALDNSRESOLVE}
    useEventStreamForScriptEvents = true
    useEventStreamForScriptEvents = ${?OTOROSHI_OPTIONS_USEEVENTSTREAMFORSCRIPTEVENTS}
    trustXForwarded = true
    trustXForwarded = ${?OTOROSHI_OPTIONS_TRUST_XFORWARDED}
    disableFunnyLogos = false
    disableFunnyLogos = ${?OTOROSHI_OPTIONS_DISABLE_FUNNY_LOGOS}
    staticExposedDomain = ${?OTOROSHI_OPTIONS_STATIC_EXPOSED_DOMAIN}
  }
  sessions {
    secret = ${otoroshi.secret}
    secret = ${?OTOROSHI_SESSIONS_SECRET}
  }
  cache {
    enabled = false
    enabled = ${?USE_CACHE}
    enabled = ${?OTOROSHI_ENTITIES_CACHE_ENABLED}
    ttl = 2000
    ttl = ${?OTOROSHI_ENTITIES_CACHE_TTL}
  }
  metrics {
    enabled = true
    enabled = ${?OTOROSHI_METRICS_ENABLED}
    every = 30000
    every = ${?OTOROSHI_METRICS_EVERY}
    accessKey = ${?app.health.accessKey}
    accessKey = ${?OTOROSHI_METRICS_ACCESS_KEY}
  }
  plugins {
    packages = []
    packagesStr = ${?OTOROSHI_PLUGINS_SCAN_PACKAGES}
    print = false
    print = ${?OTOROSHI_PLUGINS_PRINT}
  }
  scripts {
    enabled = true
    enabled = ${?OTOROSHI_SCRIPTS_ENABLED}
    static {
      enabled = false
      enabled = ${?OTOROSHI_SCRIPTS_STATIC_ENABLED}
      transformersRefs = []
      transformersRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_TRANSFORMER_REFS}
      transformersConfig = {}
      transformersConfigStr= ${?OTOROSHI_SCRIPTS_STATIC_TRANSFORMER_CONFIG}
      validatorRefs = []
      validatorRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_VALIDATOR_REFS}
      validatorConfig = {}
      validatorConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_VALIDATOR_CONFIG}
      preRouteRefs = []
      preRouteRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_PRE_ROUTE_REFS}
      preRouteConfig = {}
      preRouteConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_PRE_ROUTE_CONFIG}
      sinkRefs = []
      sinkRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_SINK_REFS}
      sinkConfig = {}
      sinkConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_SINK_CONFIG}
      jobsRefs = []
      jobsRefsStr = ${?OTOROSHI_SCRIPTS_STATIC_JOBS_REFS}
      jobsConfig = {}
      jobsConfigStr = ${?OTOROSHI_SCRIPTS_STATIC_JOBS_CONFIG}
    }
  }
  ssl {
    cipherSuitesJDK11 = ["TLS_AES_128_GCM_SHA256", "TLS_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_RSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", "TLS_EMPTY_RENEGOTIATION_INFO_SCSV"]
    cipherSuitesJDK8 = ["TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384", "TLS_RSA_WITH_AES_256_CBC_SHA256", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA256", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_256_CBC_SHA", "TLS_DHE_RSA_WITH_AES_256_CBC_SHA", "TLS_DHE_DSS_WITH_AES_256_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_RSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA256", "TLS_DHE_DSS_WITH_AES_128_CBC_SHA256", "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA", "TLS_ECDH_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_RSA_WITH_AES_128_CBC_SHA", "TLS_DHE_DSS_WITH_AES_128_CBC_SHA", "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_RSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384", "TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384", "TLS_DHE_RSA_WITH_AES_256_GCM_SHA384", "TLS_DHE_DSS_WITH_AES_256_GCM_SHA384", "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_RSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256", "TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_RSA_WITH_AES_128_GCM_SHA256", "TLS_DHE_DSS_WITH_AES_128_GCM_SHA256", "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA", "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA", "SSL_RSA_WITH_3DES_EDE_CBC_SHA", "TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA", "TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA", "SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA", "SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA", "TLS_EMPTY_RENEGOTIATION_INFO_SCSV"]
    cipherSuites = []
    protocolsJDK11 = ["TLSv1.3", "TLSv1.2", "TLSv1.1", "TLSv1"]
    protocolsJDK8 = ["SSLv2Hello", "TLSv1", "TLSv1.1", "TLSv1.2"]
    protocols = []
    cacert {
      path = "$JAVA_HOME/lib/security/cacerts"
      password = "changeit"
    }
    fromOutside {
      clientAuth = "None"
      clientAuth = ${?SSL_OUTSIDE_CLIENT_AUTH}
    }
    trust {
      all = false
      all = ${?OTOROSHI_SSL_TRUST_ALL}
    }
    initialCacert = ${?CLUSTER_WORKER_INITIAL_CACERT}
    initialCacert = ${?INITIAL_CACERT}
    initialCert = ${?CLUSTER_WORKER_INITIAL_CERT}
    initialCert = ${?INITIAL_CERT}
    initialCertKey = ${?CLUSTER_WORKER_INITIAL_CERT_KEY}
    initialCertKey = ${?INITIAL_CERT_KEY}
    // initialCerts = []
    genWildcardCert = true
    genWildcardCert = ${?OTOROSHI_SSL_GEN_WILDCARD_CERT}
  }
  cluster {
    mode = "off"
    mode = ${?CLUSTER_MODE}
    compression = -1
    compression = ${?CLUSTER_COMPRESSION}
    selfAddress = ${?CLUSTER_SELF_ADDRESS}
    autoUpdateState = true
    autoUpdateState = ${?CLUSTER_AUTO_UPDATE_STATE}
    mtls {
      # certs = []
      # trustedCerts = []
      enabled = false
      enabled = ${?CLUSTER_MTLS_ENABLED}
      loose = false
      loose = ${?CLUSTER_MTLS_LOOSE}
      trustAll = false
      trustAll = ${?CLUSTER_MTLS_TRUST_ALL}
    }
    leader {
      name = ${?CLUSTER_LEADER_NAME}
      urls = ["http://127.0.0.1:8080"]
      url = ${?CLUSTER_LEADER_URL}
      host = "otoroshi-api.oto.tools"
      host = ${?CLUSTER_LEADER_HOST}
      clientId = "admin-api-apikey-id"
      clientId = ${?CLUSTER_LEADER_CLIENT_ID}
      clientSecret = "admin-api-apikey-secret"
      clientSecret = ${?CLUSTER_LEADER_CLIENT_SECRET}
      groupingBy = 50
      groupingBy = ${?CLUSTER_LEADER_GROUP_BY}
      cacheStateFor = 4000
      cacheStateFor = ${?CLUSTER_LEADER_CACHE_STATE_FOR}
      stateDumpPath = ${?CLUSTER_LEADER_DUMP_PATH}
    }
    worker {
      name = ${?CLUSTER_WORKER_NAME}
      retries = 3
      retries = ${?CLUSTER_WORKER_RETRIES}
      timeout = 2000
      timeout = ${?CLUSTER_WORKER_TIMEOUT}
      tenants = []
      tenantsStr = ${?CLUSTER_WORKER_TENANTS}
      dbpath = ${?CLUSTER_WORKER_DB_PATH}
      dataStaleAfter = 600000
      dataStaleAfter = ${?CLUSTER_WORKER_DATA_STALE_AFTER}
      swapStrategy = "Merge" # can be Replace or Merge
      swapStrategy = ${?CLUSTER_WORKER_SWAP_STRATEGY}
      state {
        retries = ${otoroshi.cluster.worker.retries}
        retries = ${?CLUSTER_WORKER_STATE_RETRIES}
        pollEvery = 10000
        pollEvery = ${?CLUSTER_WORKER_POLL_EVERY}
        timeout = ${otoroshi.cluster.worker.timeout}
        timeout = ${?CLUSTER_WORKER_POLL_TIMEOUT}
      }
      quotas {
        retries = ${otoroshi.cluster.worker.retries}
        retries = ${?CLUSTER_WORKER_QUOTAS_RETRIES}
        pushEvery = 2000
        pushEvery = ${?CLUSTER_WORKER_PUSH_EVERY}
        timeout = ${otoroshi.cluster.worker.timeout}
        timeout = ${?CLUSTER_WORKER_PUSH_TIMEOUT}
      }
    }
    analytics {
      pressure {
        enabled = false
        enabled = ${?OTOROSHI_ANALYTICS_PRESSURE_ENABLED}
      }
      actorsystem {
        akka {
          log-dead-letters-during-shutdown = false
          jvm-exit-on-fatal-error = false
          default-dispatcher {
            type = Dispatcher
            executor = "fork-join-executor"
            fork-join-executor {
              parallelism-factor = 4.0
              parallelism-min = 4
              parallelism-max = 64
              task-peeking-mode = "FIFO"
            }
            throughput = 1
          }
          http {
            parsing {
              max-uri-length             = 4k
              max-method-length          = 16
              max-response-reason-length = 64
              max-header-name-length     = 128
              max-header-value-length    = 16k
              max-header-count           = 128
              max-chunk-ext-length       = 256
              max-chunk-size             = 256m
              max-chunk-size             = ${?AKKA_HTTP_CLIENT_ANALYTICS_MAX_CHUNK_SIZE}
              max-content-length         = infinite
              max-content-length         = ${?AKKA_HTTP_CLIENT_ANALYTICS_MAX_CONTENT_LENGHT}
              max-to-strict-bytes        = infinite
              max-to-strict-bytes        = ${?AKKA_HTTP_CLIENT_ANALYTICS_MAX_TO_STRICT_BYTES}
            }
          }
        }
      }
    }
  }
  headers {
    trace.label = "Otoroshi-Viz-From-Label"
    trace.from = "Otoroshi-Viz-From"
    trace.parent = "Otoroshi-Parent-Request"
    request.adminprofile = "Otoroshi-Admin-Profile"
    request.simpleapiclientid = "x-api-key"
    request.clientid = "Otoroshi-Client-Id"
    request.clientsecret = "Otoroshi-Client-Secret"
    request.id = "Otoroshi-Request-Id"
    request.timestamp = "Otoroshi-Request-Timestamp"
    request.bearer = "Otoroshi-Token"
    request.authorization = "Otoroshi-Authorization"
    response.proxyhost = "Otoroshi-Proxied-Host"
    response.error = "Otoroshi-Error"
    response.errormsg = "Otoroshi-Error-Msg"
    response.proxylatency = "Otoroshi-Proxy-Latency"
    response.upstreamlatency = "Otoroshi-Upstream-Latency"
    response.dailyquota = "Otoroshi-Daily-Calls-Remaining"
    response.monthlyquota = "Otoroshi-Monthly-Calls-Remaining"
    comm.state = "Otoroshi-State"
    comm.stateresp = "Otoroshi-State-Resp"
    comm.claim = "Otoroshi-Claim"
    healthcheck.test = "Otoroshi-Health-Check-Logic-Test"
    healthcheck.testresult = "Otoroshi-Health-Check-Logic-Test-Result"
    jwt.issuer = "Otoroshi"
    canary.tracker = "Otoroshi-Canary-Id"
    client.cert.chain = "Otoroshi-Client-Cert-Chain"

    request.jwtAuthorization = "access_token"
    request.bearerAuthorization = "bearer_auth"
    request.basicAuthorization = "basic_auth"
  }
  requests {
    validate = true
    validate = ${?OTOROSHI_REQUESTS_VALIDATE}
    maxUrlLength = ${akka.http.parsing.max-uri-length}
    maxCookieLength = ${akka.http.parsing.max-header-value-length}
    maxHeaderNameLength = ${akka.http.parsing.max-header-name-length}
    maxHeaderValueLength = ${akka.http.parsing.max-header-value-length}
  }
  jmx {
    enabled = false
    enabled = ${?OTOROSHI_JMX_ENABLED}
    port = 16000
    port = ${?OTOROSHI_JMX_PORT}
  }
  loggers {
  }
  provider {
    dashboardUrl = ${?OTOROSHI_PROVIDER_DASHBOARD_URL}
    jsUrl = ${?OTOROSHI_PROVIDER_JS_URL}
    cssUrl = ${?OTOROSHI_PROVIDER_CSS_URL}
    secret = "secret"
    secret = ${?OTOROSHI_PROVIDER_SECRET}
    title = "Provider's dashboard"
    title = ${?OTOROSHI_PROVIDER_TITLE}
  }
  healthcheck {
    workers = 4
    workers = ${?OTOROSHI_HEALTHCHECK_WORKERS}
    block-on-red = false
    block-on-red = ${?OTOROSHI_HEALTHCHECK_BLOCK_ON_RED}
    block-on-red = ${?OTOROSHI_HEALTHCHECK_BLOCK_ON_500}
    ttl = 60000
    ttl = ${?OTOROSHI_HEALTHCHECK_TTL}
    ttl-only = true
    ttl-only = ${?OTOROSHI_HEALTHCHECK_TTL_ONLY}
  }
}


http.port = 8080
http.port = ${?PORT}
play.server.http.port = ${http.port}
play.server.http.port = ${?PORT}
https.port = 8443
https.port = ${?HTTPS_PORT}

play.server.https.engineProvider = "otoroshi.ssl.DynamicSSLEngineProvider"
# play.server.https.keyStoreDumpPath = "./otoroshi.jks"
play.server.https.keyStoreDumpPath = ${?HTTPS_KEYSTORE_DUMP_PATH}

play.http.secret.key = ${otoroshi.secret}
play.http.secret.key = ${?PLAY_CRYPTO_SECRET}

play.server.http.idleTimeout = 60s
play.server.akka.requestTimeout = 60s

http2.enabled = no
http2.enabled = ${?HTTP2_ENABLED}

play.server.https.keyStore.path=${?HTTPS_KEYSTORE_PATH}
play.server.https.keyStore.type=${?HTTPS_KEYSTORE_TYPE}
play.server.https.keyStore.password=${?HTTPS_KEYSTORE_PASSWORD}
play.server.https.keyStore.algorithm=${?HTTPS_KEYSTORE_ALGO}

play.server.https.wantClientAuth = false
play.server.https.wantClientAuth = ${?HTTPS_WANT_CLIENT_AUTH}
play.server.https.needClientAuth = false
play.server.https.needClientAuth = ${?HTTPS_NEED_CLIENT_AUTH}

play.server.pidfile.path = "/dev/null"

play.modules {
}

play.application.loader = "otoroshi.loader.OtoroshiLoader"

play.http {
  session {
    secure = false
    secure = ${?SESSION_SECURE_ONLY}
    httpOnly = true
    maxAge = 259200000
    maxAge = ${?SESSION_MAX_AGE}
    domain = "."${app.domain}
    domain = ${?SESSION_DOMAIN}
    cookieName = "otoroshi-session"
    cookieName = ${?SESSION_NAME}
  }
}

play.http.filters = play.api.http.NoHttpFilters
play.filters.enabled = []

# play.filters {
#   headers {
#     frameOptions = "DENY"
#     xssProtection = "1; mode=block"
#     contentTypeOptions = "nosniff"
#     permittedCrossDomainPolicies = "master-only"
#     # contentSecurityPolicy = "default-src 'self'"
#     contentSecurityPolicy = null
#   }
#   gzip {
#     # The buffer size to use for gzipped bytes
#     bufferSize = 8k
#     # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
#     # to chunked encoding.
#     chunkedThreshold = 100k
#   }
# }

play.server.netty {
  transport = "jdk"
  transport = ${?NETTY_TRANSPORT}
  eventLoopThreads = 32
  maxChunkSize = 16384
  option {
    # SO_BACKLOG = 100
    child {
      SO_KEEPALIVE = true
      # TCP_NODELAY = false
    }
  }
}

play.ws {
  useragent="Otoroshi-ahc"
  useragent=${?USER_AGENT}
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

akka {
  jvm-exit-on-fatal-error = off
}

play.akka {
  jvm-exit-on-fatal-error = off
}

akka {
  loglevel = ERROR
  logger-startup-timeout = 60s
  log-dead-letters-during-shutdown = false
  jvm-exit-on-fatal-error = false
  actor {
    default-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-factor = 4.0
        parallelism-min = 4
        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }
      throughput = 1
    }
  }
  http {
    server {
      server-header = otoroshi
      max-connections = 2048
      remote-address-header = on
      raw-request-uri-header = on
      pipelining-limit = 64
      backlog = 512
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
      http2 {
        request-entity-chunk-size = 65536 b
        incoming-connection-level-buffer-size = 10 MB
        incoming-stream-level-buffer-size = 512kB
      }
    }
    client {
      user-agent-header = Otoroshi-akka
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
    }
    host-connection-pool {
      max-connections = 512
      max-open-requests = 1024
      pipelining-limit = 32
      client {
        user-agent-header = otoroshi
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = true
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }
      }
    }
    parsing {
      max-uri-length             = 4k
      max-method-length          = 16
      max-response-reason-length = 128
      max-header-name-length     = 128
      max-header-value-length    = 16k
      max-header-count           = 128
      max-chunk-ext-length       = 256
      max-chunk-size             = 256m
      max-chunk-size             = ${?AKKA_HTTP_SERVER_MAX_CHUNK_SIZE}
      max-content-length         = infinite
      max-content-length         = ${?AKKA_HTTP_SERVER_MAX_CONTENT_LENGHT}
    }
  }
}
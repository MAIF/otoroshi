http.port = 8080
http.port = ${?PORT}
play.server.http.port = ${http.port}
play.server.http.port = ${?PORT}
https.port = 8443
https.port = ${?HTTPS_PORT}

play.server.https.engineProvider = ssl.DynamicSSLEngineProvider
# play.server.https.keyStoreDumpPath = "./otoroshi.jks"
play.server.https.keyStoreDumpPath = ${?HTTPS_KEYSTORE_DUMP_PATH}

play.http.secret.key = ${otoroshi.secret}
play.http.secret.key = ${?PLAY_CRYPTO_SECRET}

play.server.http.idleTimeout = 60s
play.server.akka.requestTimeout = 60s

http2.enabled = no
http2.enabled = ${?HTTP2_ENABLED}

play.server.https.keyStore.path=${?HTTPS_KEYSTORE_PATH}
play.server.https.keyStore.type=${?HTTPS_KEYSTORE_TYPE}
play.server.https.keyStore.password=${?HTTPS_KEYSTORE_PASSWORD}
play.server.https.keyStore.algorithm=${?HTTPS_KEYSTORE_ALGO}

play.server.https.wantClientAuth = false
play.server.https.wantClientAuth = ${?HTTPS_WANT_CLIENT_AUTH}
play.server.https.needClientAuth = false
play.server.https.needClientAuth = ${?HTTPS_NEED_CLIENT_AUTH}

play.server.pidfile.path = "/dev/null"

play.modules {
}

play.application.loader = "OtoroshiLoader"

play.http {
  session {
    secure = false
    secure = ${?SESSION_SECURE_ONLY}
    httpOnly = true
    maxAge = 259200000
    maxAge = ${?SESSION_MAX_AGE}
    domain = "."${app.domain}
    domain = ${?SESSION_DOMAIN}
    cookieName = "otoroshi-session"
    cookieName = ${?SESSION_NAME}
  }
}

play.http.filters = play.api.http.NoHttpFilters
play.filters.enabled = []

# play.filters {
#   headers {
#     frameOptions = "DENY"
#     xssProtection = "1; mode=block"
#     contentTypeOptions = "nosniff"
#     permittedCrossDomainPolicies = "master-only"
#     # contentSecurityPolicy = "default-src 'self'"
#     contentSecurityPolicy = null
#   }
#   gzip {
#     # The buffer size to use for gzipped bytes
#     bufferSize = 8k
#     # The maximum amount of content to buffer for gzipping in order to calculate the content length before falling back
#     # to chunked encoding.
#     chunkedThreshold = 100k
#   }
# }

play.server.netty {
  transport = "jdk"
  transport = ${?NETTY_TRANSPORT}
  eventLoopThreads = 32
  maxChunkSize = 16384
  option {
    # SO_BACKLOG = 100
    child {
      SO_KEEPALIVE = true
      # TCP_NODELAY = false
    }
  }
}

play.ws {
  useragent="Otoroshi-ahc"
  useragent=${?USER_AGENT}
  # Sets HTTP requests not to follow 302 requests
  #followRedirects = false

  # Sets the maximum number of open HTTP connections for the client.
  #ahc.maxConnectionsTotal = 50

  ## WS SSL
  # https://www.playframework.com/documentation/latest/WsSSL
  # ~~~~~
  ssl {
    # Configuring HTTPS with Play WS does not require programming.  You can
    # set up both trustManager and keyManager for mutual authentication, and
    # turn on JSSE debugging in development with a reload.
    #debug.handshake = true
    #trustManager = {
    #  stores = [
    #    { type = "JKS", path = "exampletrust.jks" }
    #  ]
    #}
  }
}

play.cache {
  # If you want to bind several caches, you can bind the individually
  #bindCaches = ["db-cache", "user-cache", "session-cache"]
}

akka {
  jvm-exit-on-fatal-error = off
}

play.akka {
  jvm-exit-on-fatal-error = off
}

akka {
  loglevel = ERROR
  logger-startup-timeout = 60s
  log-dead-letters-during-shutdown = false
  jvm-exit-on-fatal-error = false
  actor {
    default-dispatcher {
      type = Dispatcher
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-factor = 4.0
        parallelism-min = 4
        parallelism-max = 64
        task-peeking-mode = "FIFO"
      }
      throughput = 1
    }
  }
  http {
    server {
      server-header = otoroshi
      max-connections = 2048
      remote-address-header = on
      raw-request-uri-header = on
      pipelining-limit = 64
      backlog = 512
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
      http2 {
        request-entity-chunk-size = 65536 b
        incoming-connection-level-buffer-size = 10 MB
        incoming-stream-level-buffer-size = 512kB
      }
    }
    client {
      user-agent-header = Otoroshi-akka
      socket-options {
        so-receive-buffer-size = undefined
        so-send-buffer-size = undefined
        so-reuse-address = undefined
        so-traffic-class = undefined
        tcp-keep-alive = true
        tcp-oob-inline = undefined
        tcp-no-delay = undefined
      }
    }
    host-connection-pool {
      max-connections = 512
      max-open-requests = 1024
      pipelining-limit = 32
      client {
        user-agent-header = otoroshi
        socket-options {
          so-receive-buffer-size = undefined
          so-send-buffer-size = undefined
          so-reuse-address = undefined
          so-traffic-class = undefined
          tcp-keep-alive = true
          tcp-oob-inline = undefined
          tcp-no-delay = undefined
        }
      }
    }
    parsing {
      max-uri-length             = 4k
      max-method-length          = 16
      max-response-reason-length = 64
      max-header-name-length     = 128
      max-header-value-length    = 16k
      max-header-count           = 128
      max-chunk-ext-length       = 256
      max-chunk-size             = 64m
      max-content-length         = infinite
    }
  }
}